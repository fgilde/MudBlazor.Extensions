export function initializeMudExDropBoxFilePicker(t,i,r){return new n(t,i,r)}class n extends MudExExternalFilePickerBase{setOptions(n){super.setOptions(n);this.options.apiKey&&this.loadApi()}loadApi(){const n=document.getElementById("dropboxjs");if(n)n.setAttribute("data-app-key",this.options.apiKey),this.apiLoaded();else{const n=document.createElement("script");n.async=!0;n.defer=!0;n.src="https://www.dropbox.com/static/api/2/dropins.js";n.id="dropboxjs";n.setAttribute("data-app-key",this.options.apiKey);n.onload=this.apiLoaded.bind(this);document.body.appendChild(n)}}openPicker(){Dropbox.choose({success:async n=>{const t=await Promise.all(n.map(async n=>{const t=await this.getPath(n.link);return{url:n.link,fileName:n.name,size:n.bytes,isDir:n.isDir,icon:n.icon,path:t}}));this.dotnet.invokeMethodAsync("OnFilesSelected",t)},cancel:()=>{this.dotnet.invokeMethodAsync("OnFilesSelected",[])},linkType:"direct",multiselect:this.options.multiSelect||!1,sizeLimit:this.options.maxFileSize||undefined,extensions:this.options.allowedExtensions||[],folderselect:!1})}extractFilePath(n){const t=new URL(n),i=t.pathname,r=i.split("/");return"/"+r.slice(4,-1).join("/")}async getPath(n){return this.extractFilePath(n)}dispose(){}}window.MudExDropBoxFilePicker=n;