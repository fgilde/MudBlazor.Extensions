/**
 * Minified by jsDelivr using Terser v5.39.0.
 * Original file: /npm/dockview-core@4.7.1/dist/esm/gridview/gridview.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import{Orientation,Sizing}from"../splitview/splitview";import{tail}from"../array";import{LeafNode}from"./leafNode";import{BranchNode}from"./branchNode";import{Emitter}from"../events";import{MutableDisposable}from"../lifecycle";function findLeaf(i,e){if(i instanceof LeafNode)return i;if(i instanceof BranchNode)return findLeaf(i.children[e?i.children.length-1:0],e);throw new Error("invalid node")}function cloneNode(i,e,t){if(i instanceof BranchNode){const o=new BranchNode(i.orientation,i.proportionalLayout,i.styles,e,t,i.disabled,i.margin);for(let e=i.children.length-1;e>=0;e--){const t=i.children[e];o.addChild(cloneNode(t,t.size,t.orthogonalSize),t.size,0,!0)}return o}return new LeafNode(i.view,i.orientation,t)}function flipNode(i,e,t){if(i instanceof BranchNode){const o=new BranchNode(orthogonal(i.orientation),i.proportionalLayout,i.styles,e,t,i.disabled,i.margin);let n=0;for(let r=i.children.length-1;r>=0;r--){const s=i.children[r],h=s instanceof BranchNode?s.orthogonalSize:s.size;let a=0===i.size?0:Math.round(e*h/i.size);n+=a,0===r&&(a+=e-n),o.addChild(flipNode(s,t,a),a,0,!0)}return o}return new LeafNode(i.view,orthogonal(i.orientation),t)}export function indexInParent(i){const e=i.parentElement;if(!e)throw new Error("Invalid grid element");let t=e.firstElementChild,o=0;for(;t!==i&&t!==e.lastElementChild&&t;)t=t.nextElementSibling,o++;return o}export function getGridLocation(i){const e=i.parentElement;if(!e)throw new Error("Invalid grid element");if(/\bdv-grid-view\b/.test(e.className))return[];const t=indexInParent(e);return[...getGridLocation(e.parentElement.parentElement.parentElement),t]}export function getRelativeLocation(i,e,t){if(getLocationOrientation(i,e)===getDirectionOrientation(t)){const[i,o]=tail(e);let n=o;return"right"!==t&&"bottom"!==t||(n+=1),[...i,n]}{const i="right"===t||"bottom"===t?1:0;return[...e,i]}}export function getDirectionOrientation(i){return"top"===i||"bottom"===i?Orientation.VERTICAL:Orientation.HORIZONTAL}export function getLocationOrientation(i,e){return e.length%2==0?orthogonal(i):i}export const orthogonal=i=>i===Orientation.HORIZONTAL?Orientation.VERTICAL:Orientation.HORIZONTAL;export function isGridBranchNode(i){return!!i.children}const serializeBranchNode=(i,e)=>{const t=e===Orientation.VERTICAL?i.box.width:i.box.height;return isGridBranchNode(i)?{type:"branch",data:i.children.map((i=>serializeBranchNode(i,orthogonal(e)))),size:t}:"number"==typeof i.cachedVisibleSize?{type:"leaf",data:i.view.toJSON(),size:i.cachedVisibleSize,visible:!1}:{type:"leaf",data:i.view.toJSON(),size:t}};export class Gridview{get length(){return this._root?this._root.children.length:0}get orientation(){return this.root.orientation}set orientation(i){if(this.root.orientation===i)return;const{size:e,orthogonalSize:t}=this.root;this.root=flipNode(this.root,t,e),this.root.layout(e,t)}get width(){return this.root.width}get height(){return this.root.height}get minimumWidth(){return this.root.minimumWidth}get minimumHeight(){return this.root.minimumHeight}get maximumWidth(){return this.root.maximumHeight}get maximumHeight(){return this.root.maximumHeight}get locked(){return this._locked}set locked(i){this._locked=i;const e=[this.root];for(;e.length>0;){const t=e.pop();t instanceof BranchNode&&(t.disabled=i,e.push(...t.children))}}get margin(){return this._margin}set margin(i){this._margin=i,this.root.margin=i}maximizedView(){var i;return null===(i=this._maximizedNode)||void 0===i?void 0:i.leaf.view}hasMaximizedView(){return void 0!==this._maximizedNode}maximizeView(i){var e;const t=getGridLocation(i.element),[o,n]=this.getNode(t);if(!(n instanceof LeafNode))return;if((null===(e=this._maximizedNode)||void 0===e?void 0:e.leaf)===n)return;this.hasMaximizedView()&&this.exitMaximizedView(),serializeBranchNode(this.getView(),this.orientation);const r=[];!function i(e,t){for(let o=0;o<e.children.length;o++){const n=e.children[o];n instanceof LeafNode?n!==t&&(e.isChildVisible(o)?e.setChildVisible(o,!1):r.push(n)):i(n,t)}}(this.root,n),this._maximizedNode={leaf:n,hiddenOnMaximize:r},this._onDidMaximizedNodeChange.fire({view:n.view,isMaximized:!0})}exitMaximizedView(){if(!this._maximizedNode)return;const i=this._maximizedNode.hiddenOnMaximize;!function e(t){for(let o=t.children.length-1;o>=0;o--){const n=t.children[o];n instanceof LeafNode?i.includes(n)||t.setChildVisible(o,!0):e(n)}}(this.root);const e=this._maximizedNode.leaf;this._maximizedNode=void 0,this._onDidMaximizedNodeChange.fire({view:e.view,isMaximized:!1})}serialize(){const i=this.maximizedView();let e;i&&(e=getGridLocation(i.element)),this.hasMaximizedView()&&this.exitMaximizedView();const t={root:serializeBranchNode(this.getView(),this.orientation),width:this.width,height:this.height,orientation:this.orientation};return e&&(t.maximizedNode={location:e}),i&&this.maximizeView(i),t}dispose(){this.disposable.dispose(),this._onDidChange.dispose(),this._onDidMaximizedNodeChange.dispose(),this._onDidViewVisibilityChange.dispose(),this.root.dispose(),this._maximizedNode=void 0,this.element.remove()}clear(){const i=this.root.orientation;this.root=new BranchNode(i,this.proportionalLayout,this.styles,this.root.size,this.root.orthogonalSize,this.locked,this.margin)}deserialize(i,e){const t=i.orientation,o=t===Orientation.VERTICAL?i.height:i.width;if(this._deserialize(i.root,t,e,o),this.layout(i.width,i.height),i.maximizedNode){const e=i.maximizedNode.location,[t,o]=this.getNode(e);if(!(o instanceof LeafNode))return;this.maximizeView(o.view)}}_deserialize(i,e,t,o){this.root=this._deserializeNode(i,e,t,o)}_deserializeNode(i,e,t,o){var n;let r;if("branch"===i.type){const n=i.data.map((o=>({node:this._deserializeNode(o,orthogonal(e),t,i.size),visible:o.visible})));r=new BranchNode(e,this.proportionalLayout,this.styles,i.size,o,this.locked,this.margin,n)}else{const s=t.fromJSON(i);"boolean"==typeof i.visible&&(null===(n=s.setVisible)||void 0===n||n.call(s,i.visible)),r=new LeafNode(s,e,o,i.size)}return r}get root(){return this._root}set root(i){const e=this._root;e&&(e.dispose(),this._maximizedNode=void 0,this.element.removeChild(e.element)),this._root=i,this.element.appendChild(this._root.element),this.disposable.value=this._root.onDidChange((i=>{this._onDidChange.fire(i)}))}normalize(){if(!this._root)return;if(1!==this._root.children.length)return;const i=this.root,e=i.children[0];if(e instanceof LeafNode)return;i.element.remove();const t=i.removeChild(0);i.dispose(),t.dispose(),this._root=cloneNode(e,e.size,e.orthogonalSize),this.element.appendChild(this._root.element),this.disposable.value=this._root.onDidChange((i=>{this._onDidChange.fire(i)}))}insertOrthogonalSplitviewAtRoot(){if(!this._root)return;const i=this.root;if(i.element.remove(),this._root=new BranchNode(orthogonal(i.orientation),this.proportionalLayout,this.styles,this.root.orthogonalSize,this.root.size,this.locked,this.margin),0===i.children.length);else if(1===i.children.length){const e=i.children[0];i.removeChild(0).dispose(),i.dispose(),this._root.addChild(flipNode(e,e.orthogonalSize,e.size),Sizing.Distribute,0)}else this._root.addChild(i,Sizing.Distribute,0);this.element.appendChild(this._root.element),this.disposable.value=this._root.onDidChange((i=>{this._onDidChange.fire(i)}))}next(i){return this.progmaticSelect(i)}previous(i){return this.progmaticSelect(i,!0)}getView(i){const e=i?this.getNode(i)[1]:this.root;return this._getViews(e,this.orientation)}_getViews(i,e,t){const o={height:i.height,width:i.width};if(i instanceof LeafNode)return{box:o,view:i.view,cachedVisibleSize:t};const n=[];for(let t=0;t<i.children.length;t++){const o=i.children[t],r=i.getChildCachedVisibleSize(t);n.push(this._getViews(o,orthogonal(e),r))}return{box:o,children:n}}progmaticSelect(i,e=!1){const[t,o]=this.getNode(i);if(!(o instanceof LeafNode))throw new Error("invalid location");for(let o=t.length-1;o>-1;o--){const n=t[o],r=i[o]||0;if(e?r-1>-1:r+1<n.children.length)return findLeaf(n.children[e?r-1:r+1],e)}return findLeaf(this.root,e)}constructor(i,e,t,o,n){this.proportionalLayout=i,this.styles=e,this._locked=!1,this._margin=0,this._maximizedNode=void 0,this.disposable=new MutableDisposable,this._onDidChange=new Emitter,this.onDidChange=this._onDidChange.event,this._onDidViewVisibilityChange=new Emitter,this.onDidViewVisibilityChange=this._onDidViewVisibilityChange.event,this._onDidMaximizedNodeChange=new Emitter,this.onDidMaximizedNodeChange=this._onDidMaximizedNodeChange.event,this.element=document.createElement("div"),this.element.className="dv-grid-view",this._locked=null!=o&&o,this._margin=null!=n?n:0,this.root=new BranchNode(t,i,e,0,0,this.locked,this.margin)}isViewVisible(i){const[e,t]=tail(i),[,o]=this.getNode(e);if(!(o instanceof BranchNode))throw new Error("Invalid from location");return o.isChildVisible(t)}setViewVisible(i,e){this.hasMaximizedView()&&this.exitMaximizedView();const[t,o]=tail(i),[,n]=this.getNode(t);if(!(n instanceof BranchNode))throw new Error("Invalid from location");this._onDidViewVisibilityChange.fire(),n.setChildVisible(o,e)}moveView(i,e,t){this.hasMaximizedView()&&this.exitMaximizedView();const[,o]=this.getNode(i);if(!(o instanceof BranchNode))throw new Error("Invalid location");o.moveChild(e,t)}addView(i,e,t){this.hasMaximizedView()&&this.exitMaximizedView();const[o,n]=tail(t),[r,s]=this.getNode(o);if(s instanceof BranchNode){const t=new LeafNode(i,orthogonal(s.orientation),s.orthogonalSize);s.addChild(t,e,n)}else{const[t,...h]=[...r].reverse(),[a,...d]=[...o].reverse();let l=0;const c=t.getChildCachedVisibleSize(a);"number"==typeof c&&(l=Sizing.Invisible(c));t.removeChild(a).dispose();const m=new BranchNode(s.orientation,this.proportionalLayout,this.styles,s.size,s.orthogonalSize,this.locked,this.margin);t.addChild(m,s.size,a);const g=new LeafNode(s.view,t.orientation,s.size);m.addChild(g,l,0),"number"!=typeof e&&"split"===e.type&&(e={type:"split",index:0});const f=new LeafNode(i,t.orientation,s.size);m.addChild(f,e,n)}}remove(i,e){const t=getGridLocation(i.element);return this.removeView(t,e)}removeView(i,e){this.hasMaximizedView()&&this.exitMaximizedView();const[t,o]=tail(i),[n,r]=this.getNode(t);if(!(r instanceof BranchNode))throw new Error("Invalid location");const s=r.children[o];if(!(s instanceof LeafNode))throw new Error("Invalid location");if(r.removeChild(o,e),s.dispose(),1!==r.children.length)return s.view;const h=r.children[0];if(0===n.length)return h instanceof LeafNode||(r.removeChild(0,e),this.root=h),s.view;const[a,...d]=[...n].reverse(),[l,...c]=[...t].reverse(),m=r.isChildVisible(0);r.removeChild(0,e);const g=a.children.map(((i,e)=>a.getChildSize(e)));if(a.removeChild(l,e).dispose(),h instanceof BranchNode){g.splice(l,1,...h.children.map((i=>i.size)));for(let i=0;i<h.children.length;i++){const e=h.children[i];a.addChild(e,e.size,l+i)}for(;h.children.length>0;)h.removeChild(0)}else{const i=new LeafNode(h.view,orthogonal(h.orientation),h.size),e=m?h.orthogonalSize:Sizing.Invisible(h.orthogonalSize);a.addChild(i,e,l)}h.dispose();for(let i=0;i<g.length;i++)a.resizeChild(i,g[i]);return s.view}layout(i,e){const[t,o]=this.root.orientation===Orientation.HORIZONTAL?[e,i]:[i,e];this.root.layout(t,o)}getNode(i,e=this.root,t=[]){if(0===i.length)return[t,e];if(!(e instanceof BranchNode))throw new Error("Invalid location");const[o,...n]=i;if(o<0||o>=e.children.length)throw new Error("Invalid location");const r=e.children[o];return t.push(e),this.getNode(n,r,t)}}
//# sourceMappingURL=/sm/f86794c3d8a169ef253a7e3f260eba215aff2c1d146301af10ce2a08c22384e6.map