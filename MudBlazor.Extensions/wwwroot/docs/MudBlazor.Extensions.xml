<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MudBlazor.Extensions</name>
    </assembly>
    <members>
        <member name="T:MudBlazor.Extensions.Api.ApiMemberInfo`1">
            <summary>
            Simple class that reads default values and Descriptions for a Member
            </summary>
            <typeparam name="TMemberInfo"></typeparam>
        </member>
        <member name="M:MudBlazor.Extensions.Api.ApiMemberInfo`1.#ctor(`0,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:MudBlazor.Extensions.Api.ApiMemberInfo"/> class.
            </summary>
            <param name="memberInfo">The member information.</param>
            <param name="initialType">The initial type of the member.</param>
        </member>
        <member name="M:MudBlazor.Extensions.Api.ApiMemberInfo`1.Create(`0,System.Type)">
            <summary>
            Creates a new instance of the <see cref="T:MudBlazor.Extensions.Api.ApiMemberInfo"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.Extensions.Api.ApiMemberInfo`1.CreateAsync(`0,System.Type)">
            <summary>
            Creates a new instance of the <see cref="T:MudBlazor.Extensions.Api.ApiMemberInfo"/> class asynchronously.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Api.ApiMemberInfo`1.AllPropertiesOf(System.Type)">
            <summary>
            Returns all properties of the given type.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Api.ApiMemberInfo`1.AllMethodsOf(System.Type)">
            <summary>
            Returns all methods of the given type.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Api.ApiMemberInfo`1.IsInherited">
            <summary>
            Gets a value indicating whether the member is inherited.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Api.ApiMemberInfo`1.LoadTask">
            <summary>
            Gets the task responsible for loading the description.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Api.ApiMemberInfo`1.DescriptionLoaded">
            <summary>
            Gets a value indicating whether the description has been loaded.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Api.ApiMemberInfo`1.IsStatic">
            <summary>
            Gets a value indicating whether the member is static.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Api.ApiMemberInfo`1.MemberInfo">
            <summary>
            Gets the member information.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Api.ApiMemberInfo`1.Name">
            <summary>
            Gets the name of the member.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Api.ApiMemberInfo`1.Description">
            <summary>
            Gets or sets the description of the member.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Api.ApiMemberInfo`1.TypeName">
            <summary>
            Gets the type name of the member.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Api.ApiMemberInfo`1.Default">
            <summary>
            Gets the default value of the member.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Api.ApiMemberInfo">
            <summary>
            ApiMemberInfo
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Api.ApiMemberInfo.CreateGenericTypeInstance(System.Type)">
            <summary>
            Creates a generic instance of a type
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Api.ApiMemberInfo.DefaultValue(System.Reflection.PropertyInfo)">
            <summary>
            Returns the default value of a property
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Api.ApiMemberInfo.GetGenericFriendlyTypeName(System.String)">
            <summary>
            Returns a generic friendly type name by an full type name
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Api.ApiMemberInfo.GetGenericFriendlyTypeName(System.Type)">
            <summary>
            Returns a generic friendly type name
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Api.IApiMemberInfo">
            <summary>
            Defines the properties required for API member information.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Api.IApiMemberInfo.Name">
            <summary>
            Gets the name of the member.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Api.IApiMemberInfo.Description">
            <summary>
            Gets the description of the member.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Api.IApiMemberInfo.TypeName">
            <summary>
            Gets the type name of the member.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Api.IApiMemberInfo.Default">
            <summary>
            Gets the default value of the member.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Api.IApiMemberInfo.IsStatic">
            <summary>
            Gets a value indicating whether the member is static.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Api.IApiMemberInfo.IsInherited">
            <summary>
            Gets a value indicating whether the member is inherited.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Api.ApiMemberInfoCache.GetOrCreate``1(``0,System.Type)">
            <summary>
            Gets or creates a new instance of the <see cref="T:MudBlazor.Extensions.Api.ApiMemberInfo`1"/> class.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Attribute.BetaAttribute">
            <summary>
            Attribute to mark a class as beta
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Attribute.BetaAttribute.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:MudBlazor.Extensions.Attribute.BetaAttribute.Message">
            <summary>
            Message
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Attribute.HasDocumentationAttribute">
            <summary>
            Attribute to mark and link a documentation for a class
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Attribute.HasDocumentationAttribute.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="markdownFile"></param>
        </member>
        <member name="P:MudBlazor.Extensions.Attribute.HasDocumentationAttribute.MarkdownFile">
            <summary>
            Documentation file
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Attribute.IgnoreOnObjectEditAttribute">
            <summary>
            IgnoreOnObjectEditAttribute if its set to a property this is completely ignored and cant accessed by meta
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Attribute.SafeCategoryAttribute">
            <summary>
            Don't know why I need this but however MudBlazor throw's an exception if the category is not valid
            So I created this attribute to prevent this exception.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Attribute.SafeCategoryAttribute.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Attribute.SafeCategoryAttribute.Name">
            <summary>
            Name of the category
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.Base.MudExBaseComponent`1">
            <summary>
            Base component for the most of all MudExComponents
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.Base.MudExBaseComponent`1.IsInitialized">
            <summary>
            Is true if init was called
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.Base.MudExBaseComponent`1.PreInitParameters">
            <summary>
            Contains all parameters before init
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExBaseComponent`1.IsOverwritten(System.String)">
            <summary>
            Checks if a parameter is overwritten by user
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExBaseComponent`1.IsOverwritten(System.String[])">
            <summary>
            Returns true if any of the parameters is overwritten
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.Base.MudExBaseComponent`1.IsDisposed">
            <summary>
            Is true if dispose was called
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExBaseComponent`1.Set``1(``0@,``0,System.Action{``0})">
            <summary>
            Set value and call callback if value is changed
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.Base.MudExBaseComponent`1.ElementId">
            <summary>
            Element id
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.Base.MudExBaseComponent`1.Localizer">
            <summary>
            Localizer for localize texts
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.Base.MudExBaseComponent`1.RenderKey">
            <summary>
            Render key for refresh component
            </summary>    
        </member>
        <member name="P:MudBlazor.Extensions.Components.Base.MudExBaseComponent`1.ServiceProvider">
            <summary>
            Injected service provider
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.Base.MudExBaseComponent`1.JsRuntime">
            <summary>
            JsRuntime
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.Base.MudExBaseComponent`1.MudExConfiguration">
            <summary>
            MudExConfiguration
            </summary>    
        </member>
        <member name="P:MudBlazor.Extensions.Components.Base.MudExBaseComponent`1.IsRendered">
            <summary>
            This is true if render has called already
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.Base.MudExBaseComponent`1.IsFullyRendered">
            <summary>
            This is true if render has called already and finished all after render calls
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.Base.MudExBaseComponent`1.DialogService">
            <summary>
            DialogService
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.Base.MudExBaseComponent`1.LocalizerToUse">
            <summary>
            The localizer to use
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExBaseComponent`1.Get``1">
            <summary>
            Returns the injected service for TService
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExBaseComponent`1.GetServices``1">
            <summary>
            Returns the injected services for TService
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExBaseComponent`1.TryLocalize(System.String,System.Object[])">
            <summary>
            Tries to localize given text if localizer and translation is available
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExBaseComponent`1.IsLocalized(System.String,System.Object[])">
            <summary>
            returns true if translation is available
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExBaseComponent`1.EnsureFullyRenderedAsync">
            <summary>
            Returns a task that is completed after element is fully rendered
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExBaseComponent`1.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExBaseComponent`1.OnInitialized">
            <inheritdoc />
        </member>
        <member name="F:MudBlazor.Extensions.Components.Base.MudExBaseComponent`1.SupressStateChange">
            <summary>
            Supresses state change
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExBaseComponent`1.ShouldRender">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExBaseComponent`1.CallStateHasChanged(MudBlazor.Extensions.Core.StateChangeMode)">
            <summary>
            Calls StateHasChanged
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExBaseComponent`1.StateHasChangedAsync">
            <summary>
            Async state change invocation
            </summary>    
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExBaseComponent`1.OnFinishedRenderAsync">
            <summary>
            Called when rendering is finished
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExBaseComponent`1.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExBaseComponent`1.OnAfterRender(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExBaseComponent`1.Refresh">
            <summary>
            Refreshes this component and forces render
            </summary>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExBaseComponent`1.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="T:MudBlazor.Extensions.Components.Base.MudExBaseFormComponent`3">
            <summary>
            Base component for the most of all MudExComponents
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.Base.MudExBaseFormComponent`3.IsInitialized">
            <summary>
            Is true if init was called
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.Base.MudExBaseFormComponent`3.PreInitParameters">
            <summary>
            Contains all parameters before init
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExBaseFormComponent`3.IsOverwritten(System.String)">
            <summary>
            Checks if a parameter is overwritten by user
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExBaseFormComponent`3.IsOverwritten(System.String[])">
            <summary>
            Returns true if any of the parameters is overwritten
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.Base.MudExBaseFormComponent`3.IsDisposed">
            <summary>
            Is true if dispose was called
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExBaseFormComponent`3.Set``1(``0@,``0,System.Action{``0})">
            <summary>
            Set value and call callback if value is changed
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.Base.MudExBaseFormComponent`3.ElementId">
            <summary>
            Element id
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.Base.MudExBaseFormComponent`3.Localizer">
            <summary>
            Localizer for localize texts
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.Base.MudExBaseFormComponent`3.RenderKey">
            <summary>
            Render key for refresh component
            </summary>    
        </member>
        <member name="P:MudBlazor.Extensions.Components.Base.MudExBaseFormComponent`3.ServiceProvider">
            <summary>
            Injected service provider
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.Base.MudExBaseFormComponent`3.JsRuntime">
            <summary>
            JsRuntime
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.Base.MudExBaseFormComponent`3.MudExConfiguration">
            <summary>
            MudExConfiguration
            </summary>    
        </member>
        <member name="P:MudBlazor.Extensions.Components.Base.MudExBaseFormComponent`3.IsRendered">
            <summary>
            This is true if render has called already
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.Base.MudExBaseFormComponent`3.IsFullyRendered">
            <summary>
            This is true if render has called already and finished all after render calls
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.Base.MudExBaseFormComponent`3.DialogService">
            <summary>
            DialogService
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.Base.MudExBaseFormComponent`3.LocalizerToUse">
            <summary>
            The localizer to use
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExBaseFormComponent`3.Get``1">
            <summary>
            Returns the injected service for TService
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExBaseFormComponent`3.GetServices``1">
            <summary>
            Returns the injected services for TService
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExBaseFormComponent`3.TryLocalize(System.String,System.Object[])">
            <summary>
            Tries to localize given text if localizer and translation is available
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExBaseFormComponent`3.IsLocalized(System.String,System.Object[])">
            <summary>
            returns true if translation is available
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExBaseFormComponent`3.EnsureFullyRenderedAsync">
            <summary>
            Returns a task that is completed after element is fully rendered
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExBaseFormComponent`3.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExBaseFormComponent`3.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExBaseFormComponent`3.ShouldRender">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExBaseFormComponent`3.CallStateHasChanged(MudBlazor.Extensions.Core.StateChangeMode)">
            <summary>
            Calls StateHasChanged
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExBaseFormComponent`3.StateHasChangedAsync">
            <summary>
            Async state change invocation
            </summary>    
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExBaseFormComponent`3.OnFinishedRenderAsync">
            <summary>
            Called when rendering is finished
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExBaseFormComponent`3.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExBaseFormComponent`3.OnAfterRender(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExBaseFormComponent`3.Refresh">
            <summary>
            Refreshes this component and forces render
            </summary>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExBaseFormComponent`3.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExBaseFormComponent`3.#ctor(MudBlazor.Converter{`1,`2})">
            <inheritdoc />
        </member>
        <member name="T:MudBlazor.Extensions.Components.Base.MudExJsRequiredBaseComponent`1">
            <summary>
            Base class for components that require a JS module to be imported and a JS object to be created.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:MudBlazor.Extensions.Components.Base.MudExJsRequiredBaseComponent`1.JsReference">
            <summary>
            The JS object reference.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.Base.MudExJsRequiredBaseComponent`1.ModuleReference">
            <summary>
            The imported module reference
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.Base.MudExJsRequiredBaseComponent`1.ElementReference">
            <summary>
            Reference to rendered element
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExJsRequiredBaseComponent`1.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExJsRequiredBaseComponent`1.WaitReferenceCreatedAsync">
            <summary>
            Returns a task that completes when the reference is created
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExJsRequiredBaseComponent`1.GetJsArguments">
            <summary>
            Returns an object that is passed forward to the js initialize and constructor method
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExJsRequiredBaseComponent`1.CreateDotNetObjectReference">
            <summary>
            The dotnet object reference for the js module
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExJsRequiredBaseComponent`1.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExJsRequiredBaseComponent`1.OnJsOptionsChanged">
            <summary>
            Called when the js options are changed
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExJsRequiredBaseComponent`1.ImportModuleAndCreateJsAsync">
            <summary>
            Virtual base method to import the module
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExJsRequiredBaseComponent`1.DisposeAsync">
            <inheritdoc/>
        </member>
        <member name="T:MudBlazor.Extensions.Components.Base.MudExJsRequiredBaseFormComponent`3">
            <summary>
            Base class for components that require a JS module to be imported and a JS object to be created.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.Base.MudExJsRequiredBaseFormComponent`3.JsReference">
            <summary>
            The JS object reference.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.Base.MudExJsRequiredBaseFormComponent`3.ModuleReference">
            <summary>
            The imported module reference
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.Base.MudExJsRequiredBaseFormComponent`3.ElementReference">
            <summary>
            Reference to rendered element
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExJsRequiredBaseFormComponent`3.WaitReferenceCreatedAsync">
            <summary>
            Returns a task that completes when the reference is created
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExJsRequiredBaseFormComponent`3.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExJsRequiredBaseFormComponent`3.GetJsArguments">
            <summary>
            Returns an object that is passed forward to the js initialize and constructor method
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExJsRequiredBaseFormComponent`3.CreateDotNetObjectReference">
            <summary>
            The dotnet object reference for the js module
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExJsRequiredBaseFormComponent`3.ImportModuleAndCreateJsAsync">
            <summary>
            Virtual base method to import the module
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExJsRequiredBaseFormComponent`3.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExJsRequiredBaseFormComponent`3.OnJsOptionsChanged">
            <summary>
            Called when the js options are changed
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExJsRequiredBaseFormComponent`3.DisposeAsync">
            <inheritdoc/>
        </member>
        <member name="T:MudBlazor.Extensions.Components.Base.MudExPickerBase`1">
            <summary>
            Base component for a picker
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.Base.MudExPickerBase`1.IsInitialized">
            <summary>
            Is true if init was called
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.Base.MudExPickerBase`1.Rendered">
            <summary>
            Is true if the component is rendered
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.Base.MudExPickerBase`1.PopverAnimation">
            <summary>
            This animation will be used for the picker if the <see cref="T:MudBlazor.PickerVariant"/> is <see cref="F:MudBlazor.PickerVariant.Inline"/>.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.Base.MudExPickerBase`1.PreInitParameters">
            <summary>
            Contains all parameters before init
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExPickerBase`1.IsOverwritten(System.String)">
            <summary>
            Checks if a parameter is overwritten by user
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExPickerBase`1.IsOverwritten(System.String[])">
            <summary>
            Returns true if any of the parameters is overwritten
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.Base.MudExPickerBase`1.DialogOptions">
            <summary>
            The dialog options to be used for the picker if the <see cref="T:MudBlazor.PickerVariant"/> is <see cref="F:MudBlazor.PickerVariant.Dialog"/>.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.Base.MudExPickerBase`1.BorderColor">
            <summary>
            Simple possibility to set the border color of the picker.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.Base.MudExPickerBase`1.PickerStyle">
            <summary>
            Style of the picker.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.Base.MudExPickerBase`1.ServiceProvider">
            <summary>
            Gets or sets the <see cref="T:System.IServiceProvider"/> to be used for dependency injection.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.Base.MudExPickerBase`1.JsRuntime">
            <summary>
            Gets or sets the <see cref="T:Microsoft.JSInterop.IJSRuntime"/> to be used.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.Base.MudExPickerBase`1.LocalizerToUse">
            <summary>
            Gets the <see cref="T:Microsoft.Extensions.Localization.IStringLocalizer"/> to be used for localizing strings.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.Base.MudExPickerBase`1.Localizer">
            <summary>
            Gets or sets the <see cref="T:Microsoft.Extensions.Localization.IStringLocalizer"/> to be used for localizing strings.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.Base.MudExPickerBase`1.Value">
            <summary>
            Gets or sets the value of the color picker.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExPickerBase`1.BeforeValueChanged(`0,`0)">
            <summary>
            Called before the value is changed. If the return value is false, the value will not be changed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExPickerBase`1.AfterValueChanged(`0,`0)">
            <summary>
            Called after the value is changed.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.Base.MudExPickerBase`1.ValueChanged">
            <summary>
            Gets or sets the callback method when the value of the color picker is changed.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.Base.MudExPickerBase`1.DelayValueChangeToPickerClose">
            <summary>
            Gets or sets a value indicating whether to delay the value change of the color picker until the picker is closed.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.Base.MudExPickerBase`1.BindWidthToPicker">
            <summary>
            If this is set to true, the picker will fit the width of the parent container.
            This is only has effect if <see cref="T:MudBlazor.PickerVariant"/> is set to <see cref="F:MudBlazor.PickerVariant.Inline"/>.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExPickerBase`1.TryLocalize(System.String,System.Object[])">
            <summary>
            tries to localize given string
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.Base.MudExPickerBase`1.AllowOpenOnReadOnly">
            <summary>
            If this is set to true, the picker will open also if the input is read only.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.Base.MudExPickerBase`1.Id">
            <summary>
            Id for picker element
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExPickerBase`1.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExPickerBase`1.OnInitializedAsync">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExPickerBase`1.OnAfterRender(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExPickerBase`1.OnOpenedAsync">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExPickerBase`1.OnSyncResized(MudBlazor.Interop.BoundingClientRect,System.Nullable{Microsoft.AspNetCore.Components.ElementReference},System.Nullable{Microsoft.AspNetCore.Components.ElementReference})">
            <summary>
            Called when the size of the picker is changed by binding.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExPickerBase`1.OnSyncResized(MudBlazor.Interop.BoundingClientRect)">
            <summary>
            Called when the size of the picker is changed by binding.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExPickerBase`1.OnPickerClosedAsync">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExPickerBase`1.RaiseChanged">
            <summary>
            Raises the <see cref="P:MudBlazor.Extensions.Components.Base.MudExPickerBase`1.ValueChanged"/> event.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.Base.MudExPickerBase`1.RaiseChangedIf">
            <summary>
            Calls the <see cref="M:MudBlazor.Extensions.Components.Base.MudExPickerBase`1.RaiseChanged"/> method if picker is closed or <see cref="P:MudBlazor.Extensions.Components.Base.MudExPickerBase`1.DelayValueChangeToPickerClose"/> is false.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.CaptureInfoComponent">
            <summary>
            Component to display information about the current recording
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.MoveContentPosition">
            <summary>
            Position to move the ChildContent to a specific element that can defined by ElementSelector.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.MoveContentPosition.BeforeBegin">
            <summary>
            Move content before the element
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.MoveContentPosition.AfterBegin">
            <summary>
            Move content after begin of element
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.MoveContentPosition.BeforeEnd">
            <summary>
            Move content before end of element
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.MoveContentPosition.AfterEnd">
            <summary>
            Move content to last after end of element
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.MoveContentPosition.None">
            Can be used if you don't want to move the content but use the found or not found content
        </member>
        <member name="T:MudBlazor.Extensions.Components.MoveContentMode">
            <summary>
            Mode to move content
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.MoveContentMode.MoveToSelector">
            <summary>
            MoveContent to selector
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.MoveContentMode.MoveFromSelector">
            <summary>
            Move content from selector
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.MoveContent">
            <summary>
            Component to move the ChildContent to a specific element that can defined by ElementSelector.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MoveContent.ChildContent">
            <summary>
            ChildContent
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MoveContent.Found">
            <summary>
            Content to render only if <see cref="P:MudBlazor.Extensions.Components.MoveContent.ElementSelector"/> found
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MoveContent.NotFound">
            <summary>
            Content to render only if <see cref="P:MudBlazor.Extensions.Components.MoveContent.ElementSelector"/> not found
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MoveContent.ElementSelector">
            <summary>
            Element selector's to move content to.
            If you set an array of selectors the first found element will be used.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MoveContent.Mode">
            <summary>
            Mode how to move the content you can MoveToSelector or move from MoveFromSelector
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MoveContent.Position">
            <summary>
            Position to move the ChildContent to
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MoveContent.QueryOwner">
            <summary>
            Owner element to search for the element defined by <see cref="P:MudBlazor.Extensions.Components.MoveContent.ElementSelector"/>
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MoveContent.QueryFromParent">
            <summary>
            If this is true the QueryOwner (or the parent of this element)'s parent will be used as query owner.
            Instead of true or false you can also set a number to search the parent of the QueryOwner n-times.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MoveContent.ElementFound">
            <summary>
            Returns true if element is found
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MoveContent.OnInitializedAsync">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MoveContent.ElementFoundChanged(System.Boolean)">
            <summary>
            Invoked when the element is found or not found
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MoveContent.ImportModuleAndCreateJsAsync">
            <inheritdoc />
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExAdditionalAdornment">
            <summary>
            Component to add additional adornment to a MudInput
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExAdditionalAdornment.Position">
            <summary>
            Position of the additional adornment
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExAdditionalAdornment.ChildContent">
            <summary>
            Child content of the additional adornment
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExAdditionalAdornment.For">
            <summary>
            MudInput to add the additional adornment to
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExApiView">
            <summary>
            Api view component to display the methods and properties of a type
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExApiView.ApiLinkPath">
            <summary>
            Link path to the api page where this component is used
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExApiView.Type">
            <summary>
            Type to display the api of
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExApiView.ShowHeader">
            <summary>
            Show the header
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExApiView.ShowInheritance">
            <summary>
            Show the inheritance path
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExApiView.ShowTools">
            <summary>
            Should the tools be shown
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExApiView.ShowMethods">
            <summary>
            Show the methods
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExApiView.ShowProperties">
            <summary>
            Show the properties
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExApiView.ShowInherited">
            <summary>
            Show the inherited methods and properties
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExApiView.Compact">
            <summary>
            Should the view be compact
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExApiView.ShowOnly">
            <summary>
            Only show the specified methods and properties
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExApiView.Expanded">
            <summary>
            Is the panel initially expanded
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExApiView.Search">
            <summary>
            Search string
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExApiView.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:MudBlazor.Extensions.Components.AnimateBorderColor">
            <summary>
            Mode of border animation for the audio player
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.AnimateBorderColor.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.AnimateBorderColor.OnPlay">
            <summary>
            Only on play
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.AnimateBorderColor.Always">
            <summary>
            Border is always animated
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExAudioPlayer">
            <summary>
            Blazor wrapper component for AudioMotionAnalyzer
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExAudioPlayer.AudioElement">
            <summary>
            Reference to the audio element
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExAudioPlayer.Name">
            <summary>
            The name of the component
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExAudioPlayer.Src">
            <summary>
            Src url of the audio file
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExAudioPlayer.ContentType">
            <summary>
            Content type of the audio file
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExAudioPlayer.AutoShowHideAudioElement">
            <summary>
            If true the audio player will be shown and hidden automatically depending on mouse hover
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExAudioPlayer.FileDisplayInfos">
            <summary>
            The file display infos
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExAudioPlayer.MudExFileDisplay">
            <summary>
            Cascading parameter to get the parent MudExFileDisplay if present
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExAudioPlayer.AnimateAudioElementBorderColor">
            <summary>
            Set animation for the audio element border color
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExAudioPlayer.AnimateVisualizerBorderColor">
            <summary>
            Set animation for the visualizer border color
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExAudioPlayer.AudioElementBorderColor">
            <summary>
            Set default audio element border color
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExAudioPlayer.BorderColor">
            <summary>
            Border color of the visualizer element
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExAudioPlayer.AudioElementBackgroundColor">
            <summary>
            Set the audio element background color use null to use color from visualizer gradient
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExAudioPlayer.VisualizerBackgroundColor">
            <summary>
            Set the visualizer background color use null to use color from visualizer gradient
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExAudioPlayer.AudioElementBorderStyle">
            <summary>
            Audio element border style
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExAudioPlayer.AudioElementWidth">
            <summary>
            Width of the audio element
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExAudioPlayer.AudioElementBorderSize">
            <summary>
            Border size of the audio element
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExAudioPlayer.VisualizerElementBorderSize">
            <summary>
            Border size of the visualizer element
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExAudioPlayer.CanHandleFileAsync(MudBlazor.Extensions.Components.IMudExFileDisplayInfos,MudBlazor.Extensions.Core.IMudExFileService)">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExAudioPlayer.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExAudioPlayer.HandleIsPlayingChanged(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExAudioPlayer.HandleOnGradientChanged(AuralizeBlazor.Options.AudioMotionGradient)">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExAudioPlayer.HandleOnPresetApplied(AuralizeBlazor.AuralizerPreset,AuralizeBlazor.Options.PresetApplySettings)">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExAudioPlayer.HandleMouseWheel(Microsoft.AspNetCore.Components.Web.WheelEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExAudioPlayer.OnInitialized">
            <inheritdoc />
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExBaseInput`1">
            <summary>
            MudExBaseInput
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExBaseInput`1.ElementId">
            <summary>
            Returns the Id of the input element
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExBaseInput`1.Localizer">
            <summary>
            Localizer for localize texts
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExBaseInput`1.ServiceProvider">
            <summary>
            Injected service provider
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExBaseInput`1.JsRuntime">
            <summary>
            JsRuntime
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExBaseInput`1.MudExConfiguration">
            <summary>
            MudExConfiguration
            </summary>    
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExBaseInput`1.LocalizerToUse">
            <summary>
            The localizer to use
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExBaseInput`1.Get``1">
            <summary>
            Returns the injected service for TService
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExBaseInput`1.GetServices``1">
            <summary>
            Returns the injected services for TService
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExBaseInput`1.TryLocalize(System.String,System.Object[])">
            <summary>
            Tries to localize given text if localizer and translation is available
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExBaseInput`1.Color">
            <summary>
            Color
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExBaseInput`1.AdornmentStart">
            <summary>
            The Adornment if used. By default, it is set to None.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExBaseInput`1.AdornmentEnd">
            <summary>
            The Adornment if used. By default, it is set to None.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExBaseInput`1.ForceShrink">
            <summary>
            ForceShrink
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExBaseInput`1.ChildContentStyle">
            <summary>
            ChildContentStyle
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExBaseInput`1.ErrorStateChanged">
            <summary>
            Callback when the error state changes
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExBaseInput`1.ErrorChanged">
            <summary>
            Callback when the error changes
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExBaseInput`1.ErrorTextChanged">
            <summary>
            Callback when the error text changes
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExBaseInput`1.ValidationErrorsChanged">
            <summary>
            Callback when the validation errors change
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExBaseInput`1.SkipUpdateProcessOnSetParameters">
            <summary>
            SkipUpdateProcessOnSetParameters
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExBaseInput`1.ValidateValue">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExBaseInput`1.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExCaptureButton">
            <summary>
            Button component for capturing audio and video.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExCaptureButton.IsRecording">
            <summary>
            Indicates whether a recording session is currently active.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExCaptureButton.RecordingBorderAnimation">
            <summary>
            If this is true border animation is applied when recording is active, but <see cref="P:MudBlazor.Extensions.Components.MudExCaptureButton.RecordingAnimation"/> has no effect if this is turned on.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExCaptureButton.RecordingAnimation">
            <summary>
            This Animation is playing while recording is active, but only if <see cref="P:MudBlazor.Extensions.Components.MudExCaptureButton.RecordingBorderAnimation"/> is false.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExCaptureButton.OnRecordingStarted">
            <summary>
            Event triggered when a recording session starts.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExCaptureButton.OnRecordingStopped">
            <summary>
            Event triggered when a recording session stops.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExCaptureButton.OnDataCaptured">
            <summary>
            Event triggered capture result is obtained.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExCaptureButton.ShowSpectrumOnRecording">
            <summary>
            If this is true a spectrum is shown while recording is active but then the <see cref="P:MudBlazor.Extensions.Components.MudExCaptureButton.RecordingIcon"/> has no effect and will not be used.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExCaptureButton.RecordingIcon">
            <summary>
            Icon displayed when the recording is active. Defaults to a 'Stop' icon.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExCaptureButton.RecordingColor">
            <summary>
            Color of the icon when the recording is active. Defaults to error color.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExCaptureButton.CaptureOptions">
            <summary>
            The options to use for the capture.
            If no options are provided, the user will be prompted to set them.
            The complexity of the options edit can be controlled with <see cref="P:MudBlazor.Extensions.Components.MudExCaptureButton.EditMode"/>.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExCaptureButton.EditMode">
            <summary>
            The editing mode to use for the capture options edit.
            This is only used when <see cref="P:MudBlazor.Extensions.Components.MudExCaptureButton.CaptureOptions"/> is null or <see cref="P:MudBlazor.Extensions.Components.MudExCaptureButton.AlwaysEditOptions"/> is true and the user should set the options.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExCaptureButton.AlwaysEditOptions">
            <summary>
            Is this is true the user is always prompted to edit the options before starting a recording.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExCaptureButton.RememberEditedOptions">
            <summary>
            If this is true the options are remembered after the user edited them and then no dialog is shown again.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExCaptureButton.BorderAnimationColors">
            <summary>
            Gets or sets the collection of colors to use for the gradient.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExCaptureButton.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExCaptureButton.OnParametersSetAsync">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExCaptureButton.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExCaptureButton.OnClickHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExCaptureButton.StartRecordingAsync">
            <summary>
            Starts the recording asynchronously.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExCaptureButton.StopRecordingAsync">
            <summary>
            Stops the recording asynchronously.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExCaptureButton.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExCaptureOptionsEdit">
            <summary>
            Component edit capture options
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExCaptureOptionsEdit.Value">
            <inheritdoc />
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExCaptureOptionsEdit.ValueChanged">
            <inheritdoc />
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExCaptureOptionsEdit.ReadOnly">
            <summary>
            Set to true to have a read only mode
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExCaptureOptionsEdit.Dense">
            <summary>
            Dense
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExCaptureOptionsEdit.GetRenderData(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta)">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExCaptureOptionsEdit.OnInitializedAsync">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExCaptureOptionsEdit.OnFinishedRenderAsync">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExCaptureOptionsEdit.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExCardHoverMode">
            <summary>
            Combinable hover modes for the MudExCard
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.MudExCardHoverMode.LightBulb">
            <summary>
            A LightBulb follows the mouse
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.MudExCardHoverMode.Simple">
            <summary>
            Simple just change background
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.MudExCardHoverMode.Zoom">
            <summary>
            Card zooms in
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.MudExCardHoverMode.CardEffect3d">
            <summary>
            Card has a 3D effect
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExCardList`1">
            <summary>
            Simple Card List with a hover effect.
            </summary>
            <typeparam name="TData"></typeparam>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExCardList`1.JsRuntime">
            <summary>
            Dependency Injection for IJSRuntime Service.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExCardList`1.Virtualize">
            <summary>
            Set this to true to virtualize items is only possible if ItemsSource is used.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExCardList`1.JsReference">
            <summary>
            Gets or Sets IJSObjectReference JsReference Property.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExCardList`1.ModuleReference">
            <summary>
            Gets or Sets IJSObjectReference ModuleReference Property.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExCardList`1.ElementReference">
            <summary>
            Gets or Sets ElementReference Property.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExCardList`1.BackgroundColor">
            <summary>
            Gets or Sets MudExColor BackgroundColor Property.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExCardList`1.HoverColor">
            <summary>
            Gets or Sets MudExColor HoverColor Property.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExCardList`1.ZoomOnHover">
            <summary>
            Gets or Sets bool ZoomOnHover Property.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExCardList`1.HoverMode">
            <summary>
            Gets or Sets MudExCardHoverMode HoverMode Property.
            </summary>
            <value>
            MudExCardHoverMode
            </value>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExCardList`1.Justify">
            <summary>
            Gets or Sets Justify Property.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExCardList`1.Spacing">
            <summary>
            Gets or Sets Spacing Property.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExCardList`1.LightBulbSize">
            <summary>
            Gets or Sets Light Bulb Size Property.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExCardList`1.LightBulbSizeUnit">
            <summary>
            Gets or Sets Light Bulb Size Unit Property.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExCardList`1.AllAppliedHoverModes">
            <summary>
            Methods returns List of MudExCardHoverMode, where hover modes are applied.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExCardList`1.GetStyle">
            <summary>
            Style for outer element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExCardList`1.OnParametersSetAsync">
            <summary>
            Method gets called OnParametersSetAsync.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExCardList`1.UpdateJs">
            <summary>
            Method gets called UpdateJs for fetching JSRuntime.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExCardList`1.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method gets called OnAfterRenderAsync for rendering and Initializing Modules.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExCardList`1.GetJsArguments">
            <summary>
            Returns arguments for passed to JS code
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExCardList`1.DisposeAsync">
            <summary>
            Method to dispose the module.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExCheckBox`1">
            <summary>
            Just a simple MudCheckBox with HelperText
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExCheckBox`1.HelperText">
            <summary>
            The HelperText will be displayed below the text field.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExCheckBox`1.HelperTextAlignment">
            <summary>
            The HelperText will be displayed below the text field.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExCheckBox`1.Inherited">
            <summary>
            Gets the inherited render fragment.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExChipSelect`1">
            <summary>
            A component that allows the user to select a value from a list of possible values and display it as Chips or default Combobox.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExChipSelect`1.OnInitialized">
            <inheritdoc />
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExChipSelect`1.AutoFocusFilter">
            <summary>
            Gets or Sets the AutoFocus for the filter input.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExChipSelect`1.ChipColor">
            <summary>
            Gets or Sets the color of the chip in the component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExChipSelect`1.FilterEnabled">
            <summary>
            Gets or Sets the option to enable filtering in the component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExChipSelect`1.MultiSelect">
            <summary>
            Gets or Sets the option to enable multi-select functionality in the component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExChipSelect`1.AvailableItems">
            <summary>
            Gets or Sets the list of items that are available for selection.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExChipSelect`1.Filter">
            <summary>
            Search filter
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExChipSelect`1.ViewMode">
            <summary>
            Gets or Sets the view mode for the component.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.ViewMode">
            <summary>
            ViewMode for the ChipSelect
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.ViewMode.ChipsOnly">
            <summary>
            Only Chips
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.ViewMode.ChipsAdditionalAbove">
            <summary>
            Chips above the filed
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.ViewMode.ChipsAdditionalBelow">
            <summary>
            Chips below the field
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.ViewMode.NoChips">
            <summary>
            No chips, just work as listbox
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.CodeViewModeWithRenderFragment">
            <summary>
            Render behavior of the child fragment inside the code view
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.CodeViewModeWithRenderFragment.ExpansionPanel">
            <summary>
            Code is expandable and collapsible
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.CodeViewModeWithRenderFragment.CodeDockedLeft">
            <summary>
            Code is docked to the left
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.CodeViewModeWithRenderFragment.CodeDockedRight">
            <summary>
            Code is docked to the right
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.CodeViewModeWithRenderFragment.CodeDockedTop">
            <summary>
            Code is docked to the top
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.CodeViewModeWithRenderFragment.CodeDockedBottom">
            <summary>
            Cpde is docked to the bottom
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExCodeView">
            <summary>
            Simple CodeViewer Component
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExCodeView.Classname">
            <summary>
            Classname for the component
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExCodeView.StyleStr">
            <summary>
            Style for the component
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExCodeView.CodeViewClassname">
            <summary>
            Classname for the code view
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExCodeView.CodeViewStyleStr">
            <summary>
            Style for the code view
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExCodeView.RenderFragmentClassname">
            <summary>
            Classname for the code view container
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExCodeView.RenderFragmentStyleStr">
            <summary>
            Style for the code view container
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExCodeView.ShowCopyToast">
            <summary>
            If this is true, a toast is shown when the code is copied
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExCodeView.OnCodeCopied">
            <summary>
            Is raised when the code is copied
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExCodeView.DockedMinWidthLeft">
            <summary>
            MinWidth for the left docked panel when split view is used
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExCodeView.DockedMinWidthRight">
            <summary>
            MinWidth for the right docked panel when split view is used
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExCodeView.DockedMinHeightLeft">
            <summary>
            MinHeight for the left docked panel when split view is used
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExCodeView.DockedMinHeightRight">
            <summary>
            MinHeight for the right docked panel when split view is used
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExCodeView.CodeClass">
            <summary>
            User class names, separated by space.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExCodeView.CodeStyle">
            <summary>
            User styles, applied on top of the component's own classes and styles.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExCodeView.RenderFragmentClass">
            <summary>
            User class names, separated by space.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExCodeView.RenderFragmentStyle">
            <summary>
            User styles, applied on top of the component's own classes and styles.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExCodeView.CodeViewModeWithRenderFragment">
            <summary>
            Specify layout if render content and code ist displayed
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExCodeView.CodeCopiedText">
            <summary>
            Text for code copied toast
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExCodeView.ExpandedText">
            <summary>
            Text for expand code
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExCodeView.CollapsedText">
            <summary>
            Text for hide code
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExCodeView.LoadingText">
            <summary>
            Text while loading
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExCodeView.Language">
            <summary>
            Programming Language of code
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExCodeView.CodeIsExpanded">
            <summary>
            Code is expanded
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExCodeView.FullWidth">
            <summary>
            FullWidth
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExCodeView.FullHeight">
            <summary>
            FullHeight
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExCodeView.Theme">
            <summary>
            Theme for code
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExCodeView.ChildContent">
            <summary>
            ChildContent to show code for
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExCodeView.RenderChildContent">
            <summary>
            Set to true to render also the given child content otherwise only code is generated for
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExCodeView.Code">
            <summary>
            Code to show
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExCodeView.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExCodeView.OnCopyClick">
            <summary>
             Callback when the copy button is clicked
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExCodeView.CodeAsMarkup(System.String,System.String)">
            <summary>
            Returns the given code to markup code value
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExCodeView.ExecuteAndReturnFuncAsString(System.Action,System.Boolean,System.String)">
            <summary>
            Executes the given action and returns the code for the action as string
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExCodeView.FuncAsString(System.Action,System.Boolean,System.String)">
            <summary>
            Returns the given function as string
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExCodeView.ReplaceLambdaInFuncString(System.String)">
            <summary>
            Removes lambda signs from code
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExCodeView.GenerateBlazorMarkupFromInstance``1(``0,System.String)">
            <summary>
            Generates Markup from instance
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExCodeView.GetComponentTagNames(System.String)">
            <summary>
            Returns the start and end tag for the given component name
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExCodeView.ShortenMarkup(System.String)">
            <summary>
            Shortens the given markup
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExCodeView.RemoveEmptyLines(System.String)">
            <summary>
            Removes empty lines from the given input
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExCodeView.FormatHtml(System.String)">
            <summary>
            Formats html code
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExCodeView.CodeFromFragment(Microsoft.AspNetCore.Components.RenderFragment)">
            <summary>
            Returns the code from the given fragment
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExColorBubble">
            <summary>
            A Component to quickly select a color
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExColorBubble.SelectColorText">
            <summary>
            Gets or sets the text for the select color button.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExColorBubble.ShowColorPreview">
            <summary>
            Gets or sets a value indicating whether to show a preview of the selected color in the component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExColorBubble.AllowSelectOnPreviewClick">
            <summary>
            Gets or sets a value indicating whether to allow selecting a color by clicking on the preview of the selected color.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExColorBubble.CloseAfterSelect">
            <summary>
            Gets or sets a value indicating whether to close the selector after selecting a color.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExColorBubble.MinLuminance">
            <summary>
            Gets or sets the minimum luminance of the selected color.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExColorBubble.MaxLuminance">
            <summary>
            Gets or sets the maximum luminance of the selected color.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExColorBubble.SelectorSize">
            <summary>
            Gets or sets the size of the color selector.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExColorBubble.ColorChanged">
            <summary>
            Gets or sets the event callback for when the user changes the selected color.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExColorBubble.Color">
            <summary>
            Gets or sets the currently selected color.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExColorBubble.Height">
            <summary>
            Gets or sets the height of the component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExColorBubble.Width">
            <summary>
            Gets or sets the width of the component.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExColorBubble.GetJsArguments">
            <summary>
            Gets the JavaScript arguments to pass to the component.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExColorBubble.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Renders the component after a change has been made.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExColorBubble.OnColorChanged(System.String)">
            <summary>
            Event that is triggered when the user changes the color.
            </summary>
            <param name="color">The new color value.</param>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExColorBubble.OnColorPreviewClick">
            <summary>
            Event that is triggered when the user clicks on the preview of the selected color.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExColorBubble.ShowSelectorAsync">
            <summary>
            Shows the color selector as an asynchronous operation.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.ColorPreviewMode">
            <summary>
            Mode for the preview of the color in MudExColorEdit
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.ColorPreviewMode.None">
            <summary>
            No preview
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.ColorPreviewMode.Text">
            <summary>
            Preview is applied to the text
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.ColorPreviewMode.Icon">
            <summary>
            Preview is applied to the icon
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.ColorPreviewMode.Both">
            <summary>
            Preview is applied to text and icon
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.AutoCloseBehaviour">
            <summary>
            Behavior for the auto close of the dropdown in MudExColorEdit
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.AutoCloseBehaviour.Never">
            <summary>
            Never close the dropdown
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.AutoCloseBehaviour.Always">
            <summary>
            Always close the dropdown after a selection
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.AutoCloseBehaviour.OnDefinedSelect">
            <summary>
            Close the dropdown after a selection of a defined color
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.AutoCloseBehaviour.OnCustomSelect">
            <summary>
            Close the dropdown after a selection of a custom color
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExColorEdit">
            <summary>
            Component to Edit MudExColor
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExColorEdit.FilterVariant">
            <summary>
            Gets or sets the variant filter.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExColorEdit.CssVars">
            <summary>
            Gets or sets the Css Variables.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExColorEdit.ValueString">
            <summary>
            Gets or sets the string value of the color picker selected by the user.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExColorEdit.ValueStringChanged">
            <summary>
            Gets or sets the callback method when the string value of the color picker is changed.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExColorEdit.ShowThemeColors">
            <summary>
            Gets or sets a value indicating whether to show theme colors.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExColorEdit.ShowHtmlColors">
            <summary>
            Gets or sets a value indicating whether to show HTML colors.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExColorEdit.ShowCssColorVariables">
            <summary>
            Gets or sets a value indicating whether to show CSS color variables.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExColorEdit.Filter">
            <summary>
            Gets or sets the filter for the color picker.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExColorEdit.PreviewMode">
            <summary>
            Gets or sets the color preview mode.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExColorEdit.AutoCloseBehaviour">
            <summary>
            Gets or sets the auto close behavior.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExColorEdit.MudColorStringFormat">
            <summary>
            Gets or sets the <see cref="T:MudBlazor.Utilities.MudColorOutputFormats"/>.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExColorEdit.ForceSelectOfMudColor">
            <summary>
            Gets or sets a value indicating whether to have always <see cref="T:MudBlazor.Utilities.MudColor"/> filled in <see cref="T:MudBlazor.Extensions.Core.MudExColor"/> as the OneOf value.
            With this setting turned on, you can use this edit control for all of your Color Properties.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExColorEdit.LegacyRender">
            <summary>
            True to use old render look and feel
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExColorEdit.LabelCustomTab">
            <summary>
            Gets or sets the label for the custom tab.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExColorEdit.LabelDefinedTab">
            <summary>
            Gets or sets the label for the defined tab.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExColorEdit.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExColorEdit.OnParametersSetAsync">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExColorEdit.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExColorEdit.OnPickerOpenedAsync">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExColorEdit.StringValueChangedAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExColorEdit.RaiseChanged">
            <inheritdoc />
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExColorPicker">
            <summary>
            A simple ColorPicker component that inherits the MudColorPicker but adds the possibility to delay the close event and use a native picker component from browser
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExColorPicker.DelayValueChangeToPickerClose">
            <summary>
            Set to true to delay value change event to picker close event
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExColorPicker.UseNativeBrowserControl">
            <summary>
            Set to true to use the browser native control as picker element
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExColorPicker.UseMudExColorBubble">
            <summary>
            Set to true to use MudExColorBubble as picker element
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExColorPicker.UseColorPaletteInNativeBrowserControl">
            <summary>
            Set to true to use the palette from picker for native browser element as well
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExColorPicker.InitialColor">
            <summary>
            The Initial color that should be selected
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExColorPicker.Inherited">
            <summary>
            Render the base component
            </summary>
            <returns></returns>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExColorPicker.ColorConverter">
            <summary>
            Converter for string and MudColor
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExColorPicker.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExColorPicker.OnPickerOpenedAsync">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExColorPicker.OnPickerClosedAsync">
            <inheritdoc />
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExCultureSelect">
            <summary>
            Drop down component to select a culture
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExCultureSelect.Inherited">
            <summary>
            The inherited render
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExCultureSelect.CultureHandling">
            <summary>
            Set how to handle neutral cultures
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExCultureSelect.IgnoreInvariant">
            <summary>
            Set to true to ignore invariant culture
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExCultureSelect.GetAvailableItemsAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExCultureSelect.ToStringFunc">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExCultureSelect.OnInitializedAsync">
            <inheritdoc />
        </member>
        <member name="T:MudBlazor.Extensions.Components.NeutralCultureHandling">
            <summary>
            Handling of neutral cultures
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.NeutralCultureHandling.AllowAllCultures">
            <summary>
            Allow all cultures
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.NeutralCultureHandling.IgnoreNonNeutralCultures">
            <summary>
            Ignore non-neutral cultures
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.NeutralCultureHandling.IgnoreNeutralCultures">
            <summary>
            Ignore neutral cultures
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExDialog">
            <summary>
            MudExDialog is the component to use when you want to show a dialog inlined in your page with all DialogExtensions.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExDialog.Inherited">
            <summary>
            Render base component
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExDialog.OptionsEx">
            <summary>
            DialogOptionsEx for this dialog
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExDialog.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExDialogActionButton">
            <summary>
            Action button for the MudExDialog
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExDialogActionButton.Action">
            <summary>
            Action to invoke when the button is clicked
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExDialogActionButton.Disabled">
            <summary>
            Disabled state of the button
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExDialogActionButton.Label">
            <summary>
            Label of the button
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExDialogActionButton.OnClick">
            <summary>
            Callback when the button is clicked
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExDialogActionButton.SetDisabled(System.Boolean)">
            <summary>
            Set the disabled state of the button
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExDivider">
            <summary>
            A divider to separate content
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExDivider.Inherited">
            <summary>
            Render base component
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExDivider.ServiceProvider">
            <summary>
            Injected service provider
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExDivider.JsRuntime">
            <summary>
            JsRuntime
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExDivider.Label">
            <summary>
            Label
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExDivider.BorderLabel">
            <summary>
            Set to true to add border to label
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExDivider.Color">
            <summary>
            Color
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExDivider.Size">
            <summary>
            Size
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExDivider.UseBorder">
            <summary>
            If this option is true border size is used instead of element size
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExDivider.OnParametersSetAsync">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExDivider.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExDivider.GetStyle">
            <summary>
            Style for divider
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.DropBoxFileInfo">
            <summary>
            File info for DropBox
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.DropBoxFileInfo.Id">
            <summary>
            File Id
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExDropBoxFilePicker">
            <summary>
            DropBox external file picker component
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExDropBoxFilePicker.MaxFileSize">
            <summary>
            Max file size in bytes
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExDropBoxFilePicker.Image">
            <inheritdoc />
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExDropBoxFilePicker.ExternalJsFiles">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExDropBoxFilePicker.OnReady">
            <summary>
            Callback method for JavaScript to call when the picker is ready
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExDropBoxFilePicker.JsOptions">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExDropBoxFilePicker.OnInitialized">
            <inheritdoc />
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExEnumSelect`1">
            <summary>
            Drop down component to select an enum value or multiple on flags enums
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExEnumSelect`1.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExEnumSelect`1.OnParametersSetAsync">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExEnumSelect`1.OnBeforeSelectedChanged(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="T:MudBlazor.Extensions.Components.FilePickerInitialRenderBehaviour">
            <summary>
            Initial render behavior controls rendering while initialization running
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.FilePickerInitialRenderBehaviour.Normal">
            <summary>
            Render normal user can click while not initialized and action is then waiting for initialization
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.FilePickerInitialRenderBehaviour.Disabled">
            <summary>
            Render normal user can click while not initialized and action is then waiting for initialization
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.FilePickerInitialRenderBehaviour.SwitchIconToColored">
            <summary>
            Render normal user can click while not initialized and action is then waiting for initialization
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.FilePickerInitialRenderBehaviour.Loading">
            <summary>
            Render loading while not initialized
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.FilePickerInitialRenderBehaviour.Hidden">
            <summary>
            Hide while not initialized
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.PickerActionViewMode">
            <summary>
            View Mode of the picker action
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.PickerActionViewMode.Button">
            <summary>
            Use simple MudButton to render the action
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.PickerActionViewMode.Image">
            <summary>
            Use image to render the action
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.PickerActionViewMode.Custom">
            <summary>
            ChildContent is used directly to render the action
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExExternalFilePickerBase`2">
            <summary>
            Base class for external file picker components
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.MudExExternalFilePickerBase`2.PickTaskCompletionSource">
            <summary>
            Pick task awaitable completion source
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.MudExExternalFilePickerBase`2.InitializationCompletionSource">
            <summary>
            Initialization task awaitable completion source
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExExternalFilePickerBase`2.Image">
            <summary>
            The Image for the provider
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExExternalFilePickerBase`2.FilesSelected">
            <summary>
            Callback method for when files are selected
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExExternalFilePickerBase`2.ClientId">
            <summary>
            Client id for the picker
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExExternalFilePickerBase`2.ApiKey">
            <summary>
            Api key for the picker
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExExternalFilePickerBase`2.AllowedMimeTypes">
            <summary>
            Allowed mime types
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExExternalFilePickerBase`2.MultiSelect">
            <summary>
            If true, the user can select multiple files
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExExternalFilePickerBase`2.AutoLoadFileDataBytes">
            <summary>
            If true, the file data bytes are loaded automatically after selection
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExExternalFilePickerBase`2.Variant">
            <summary>
            Variant of button
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExExternalFilePickerBase`2.Color">
            <summary>
            Color of button
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExExternalFilePickerBase`2.Size">
            <summary>
            Size of button
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExExternalFilePickerBase`2.StartIcon">
            <summary>
            Icon for Button
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExExternalFilePickerBase`2.ChildContent">
            <summary>
            The child content of the component
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExExternalFilePickerBase`2.IconsWithoutColors">
            <summary>
            Set to true to remove colors from icons
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExExternalFilePickerBase`2.RenderBehaviourWhileInitialization">
            <summary>
            Initial render behavior controls rendering while initialization running
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExExternalFilePickerBase`2.ActionViewMode">
            <summary>
            Initial render behavior controls rendering while initialization running
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExExternalFilePickerBase`2.ImageSize">
            <summary>
            The size that is used if ActionViewMode is set to Image
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExExternalFilePickerBase`2.AccessToken">
            <summary>
            AccessToken for the picker service api
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExExternalFilePickerBase`2.ExternalJsFiles">
            <summary>
            External required js files
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExExternalFilePickerBase`2.IsReady">
            <summary>
            If true, the picker is ready
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExExternalFilePickerBase`2.IsLoading">
            <summary>
            If true, the picker is loading
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExExternalFilePickerBase`2.DefaultIcon">
            <summary>
            DefaultIcon if no StartIcon is set for the button
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExExternalFilePickerBase`2.PickAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExExternalFilePickerBase`2.GetJsArguments">
            <summary>
            Gets the JavaScript arguments to pass to the component.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExExternalFilePickerBase`2.OnAuthorized(System.String)">
            <summary>
            Callback method for JavaScript to call when the picker is authorized
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExExternalFilePickerBase`2.SetLoading(System.Boolean)">
            <summary>
            Sets the loading state
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExExternalFilePickerBase`2.OnReady">
            <summary>
            Callback method for JavaScript to call when the picker is ready
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExExternalFilePickerBase`2.OnFilesSelected(`1[])">
            <summary>
            Callback method for JavaScript to call when files are selected
            </summary>
            <param name="files"></param>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExExternalFilePickerBase`2.JsOptions">
            <summary>
            Returns the options for the js class
            </summary>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExExternalFilePickerBase`2.ImportModuleAndCreateJsAsync">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExExternalFilePickerBase`2.UpdateJsOptions">
            <summary>
            Updates the options for the js class
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExExternalFilePickerBase`2.ShowPicker(System.Threading.CancellationToken)">
            <summary>
            Protected method to show the picker
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.BrowserContentTypePlugin">
            <summary>
            Plugin information for a content type plugin
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.BrowserContentTypePlugin.BrowserNames">
            <summary>
            Names of browsers
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.BrowserContentTypePlugin.BrowserNames.Chrome">
            <summary>
            Chrome
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.BrowserContentTypePlugin.BrowserNames.Opera">
            <summary>
            Opera
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.BrowserContentTypePlugin.BrowserNames.Edge">
            <summary>
            Edge
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.BrowserContentTypePlugin.BrowserNames.Safari">
            <summary>
            Safari
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.BrowserContentTypePlugin.BrowserNames.Firefox">
            <summary>
            Firefox
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.BrowserContentTypePlugin.Name">
            <summary>
            Name of content type plugin
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.BrowserContentTypePlugin.SupportedBrowsers">
            <summary>
            By plugin supported browsers
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.BrowserContentTypePlugin.SupportedContentTypes">
            <summary>
            Supported content types
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.BrowserContentTypePlugin.Url">
            <summary>
            Url to get the plugin
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.BrowserContentTypePlugin.Find(System.String,System.String)">
            <summary>
            Tries to find a plugin for given browser and content type
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.BrowserContentTypePlugin.Available">
            <summary>
            Known available plugins
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.IMudExFileDisplay">
            <summary>
            Interface to register an own file display component
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.IMudExFileDisplay.Name">
            <summary>
            Name of component
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.IMudExFileDisplay.WrapInMudExFileDisplayDiv">
            <summary>
            If this is true the component will wrap the display inside a div
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.IMudExFileDisplay.FileDisplayInfos">
            <summary>
            FileDisplayInfos for file. Will be dynamically set
            Important. The property for FileDisplayInfos from interface IMudExFileDisplayInfos needs to have the [Parameter] attribute
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.IMudExFileDisplay.CanHandleFileAsync(MudBlazor.Extensions.Components.IMudExFileDisplayInfos,MudBlazor.Extensions.Core.IMudExFileService)">
            <summary>
            Should return true if this component can handle a file with the given information
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.IMudExFileDisplay.StartsActive">
            <summary>
            Determines if the control is active by default upon initialization. 
            If true, the control will be used initially; otherwise, it can be selected afterwards.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.IMudExFileDisplay.FileMetaInformationAsync(MudBlazor.Extensions.Components.IMudExFileDisplayInfos)">
            <summary>
            This method will be called to get extra meta infos to display in the info dialog
            </summary>
            <param name="fileDisplayInfos"></param>
            <returns></returns>
        </member>
        <member name="T:MudBlazor.Extensions.Components.IMudExFileDisplayInfos">
            <summary>
            Interface containing infos for a file
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.IMudExFileDisplayInfos.FileName">
            <summary>
            Filename
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.IMudExFileDisplayInfos.Url">
            <summary>
            Url. (Can also be a data uri)
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.IMudExFileDisplayInfos.ContentType">
            <summary>
            Content type of file
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.IMudExFileDisplayInfos.ContentStream">
            <summary>
            Stream of file if its already loaded or dynamically created on client
            Note: This stream should not be closed or disposed.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExFileDisplayContentErrorResult">
            <summary>
            Represents a result of a file display error in the MudEx framework.
            This class provides several static methods to create different types of error results.
            Implements the <see cref="T:MudBlazor.Extensions.Components.IMudExFileDisplayInfos"/> interface.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayContentErrorResult.Unhandled">
            <summary>
            Returns a new instance of MudExFileDisplayContentErrorResult with IsHandled set to false.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayContentErrorResult.Handled">
            <summary>
            Returns a new instance of MudExFileDisplayContentErrorResult with IsHandled set to true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExFileDisplayContentErrorResult.DisplayMessage(System.String)">
            <summary>
            Returns a new instance of MudExFileDisplayContentErrorResult with a specified message.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExFileDisplayContentErrorResult.RedirectTo(System.String,System.String)">
            <summary>
            Returns a new instance of MudExFileDisplayContentErrorResult with a redirection to a specific URL and content type.
            </summary>
            <param name="url">The redirection URL.</param>
            <param name="contentType">The content type of the redirection.</param>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExFileDisplayContentErrorResult.RedirectTo(System.IO.Stream,System.String)">
            <summary>
            Returns a new instance of MudExFileDisplayContentErrorResult with a redirection to a stream and content type.
            </summary>
            <param name="stream">The stream to redirect to.</param>
            <param name="contentType">The content type of the stream.</param>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExFileDisplayContentErrorResult.WithMessage(System.String)">
            <summary>
            Sets the Message property and returns the current MudExFileDisplayContentErrorResult instance.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayContentErrorResult.IsHandled">
            <summary>
            Gets or sets a value indicating whether the error is handled.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayContentErrorResult.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayContentErrorResult.Url">
            <summary>
            Gets or sets the redirection URL.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayContentErrorResult.ContentType">
            <summary>
            Gets or sets the content type.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayContentErrorResult.Message">
            <summary>
            Gets or sets the error message.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayContentErrorResult.ContentStream">
            <summary>
            Gets or sets the content stream for redirection.
            Note: This stream should not be closed or disposed.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayContentErrorResult.FallBackInIframe">
            <summary>
            Gets or sets a value indicating whether to fall back in iframe.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayContentErrorResult.SandBoxIframes">
            <summary>
            Gets or sets a value indicating whether to sandbox iframes.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.StreamUrlHandling">
            <summary>
            Determines how to handle the stream url creation
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.StreamUrlHandling.DataUrl">
            <summary>
            Use simple base64 encoded data url for the stream. Can be used for small files, for large files we recommend use BlobUrl
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.StreamUrlHandling.BlobUrl">
            <summary>
            Automatically use blob url for the stream. The blob url will be revoked after the file is closed
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExFileDisplay">
            <summary>
            Component to display a file in a iframe or object tag or in a registered viewer that implements IMudExFileDisplay
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplay.FileService">
            <summary>
            Reference to the FileService
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplay.StatusText">
            <summary>
            Status text to display in center of file display
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplay.IgnoredRenderControls">
            <summary>
            Specify types of IMudExFileDisplay that should be ignored
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplay.StreamUrlHandling">
            <summary>
            How to handle the stream url
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplay.FileInfo">
            <summary>
            You can set this object with any simple data object that then is used to display file infos
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplay.Dense">
            <summary>
            If true, compact vertical padding will be applied to items.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplay.Url">
            <summary>
            Url to access file can also be a data Url
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplay.ContentType">
            <summary>
            ContentType of loaded file
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplay.CanClose">
            <summary>
            Can close file
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplay.OnCloseClick">
            <summary>
            Event for on close click
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplay.FallBackInIframe">
            Should be true if file is not a binary one
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplay.ViewDependsOnContentType">
            <summary>
            Set this to false to show everything in iframe/object tag otherwise zip, images audio and video will displayed in correct tags
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplay.ForceNativeRender">
            <summary>
            Set this to true to initially render native and ignore registered IMudExFileDisplay
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplay.ImageAsBackgroundImage">
            <summary>
            Set to true to use image as background-url instead of img tag
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplay.ShowContentError">
            <summary>
            Set to true to display content error is content can't displayed
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplay.SandBoxIframes">
            <summary>
            Set to true to use sandbox mode on iframe to disallow some danger js invocation
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplay.AllowDownload">
            <summary>
            Set to true to allow user to download the loaded file
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplay.AllowCopyUrl">
            <summary>
            Set to true to allow user to copy the file url to clipboard
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplay.AllowOpenInNewTab">
            <summary>
            Set to true to allow user to open url in new tab
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplay.FileName">
            <summary>
            Filename
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplay.ContentStream">
            <summary>
            Content stream of the file.
            Note: This stream should not be closed or disposed.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplay.ColorizeIcons">
            <summary>
            If true icons are colored
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplay.IconColor">
            <summary>
            If true icons are colored
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplay.HandleContentErrorFunc">
            <summary>
            A function to handle content error.
            Return true if you have handled the error and false if you want to show the error message
            For example you can reset Url here to create a proxy fallback or display own not supported image or what ever.
            If you reset Url or Data here you need also to reset ContentType
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplay.CustomContentErrorMessage">
            <summary>
            Custom content error message to show if a native content from object or iframe raises an error
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplay.ErrorMessage">
            <summary>
            Gets or sets a general error message
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplay.ParametersForSubControls">
            <summary>
            Specify parameters for viewer controls. If a possible IMudExFileDisplay is found for current content type this parameters will be forwarded
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplay.MediaType">
            <summary>
            Media Type for current file
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplay.PossiblePlugin">
            <summary>
            Returns a plugin that is useful to show the content if the content cant displayed 
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplay.Info">
            <summary>
            Current browser informations
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExFileDisplay.HandleContentError">
            <summary>
            Called if the js side has a content render error.
            This function returns true if it's handled and false if not.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExFileDisplay.GetJsArguments">
            <inheritdoc/>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExFileDisplay.SetStatusTextAsync(System.String)">
            <summary>
            Set the status text to display in center of file display
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExFileDisplay.OpenFileInNewTabAsync">
            <summary>
            Opens the file in a new tab
            </summary>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExFileDisplay.RemoveStatusTextAsync">
            <summary>
            Remove the status text
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExFileDisplay.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExFileDisplay.OnParametersSetAsync">
            <inheritdoc/>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExFileDisplay.GetFileRenderInfos(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            Returns the tag and attributes for the file
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExFileDisplay.DownloadFileAsync">
            <summary>
            Downloads the file using the browser download functionality.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExFileDisplay.GetFileFinfosAsync(System.Boolean)">
            <summary>
            Returns the file infos as dictionary with keys like File, ContentType, Url, Size and more
            </summary>
            <param name="withEmptyValues"></param>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExFileDisplay.ShowInfoFileInfoAsync">
            <summary>
            Shows the info dialog with file information
            </summary>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExFileDisplay.ShowInfoFileInfoAsync(System.Boolean)">
            <summary>
            Shows the info dialog with file information
            </summary>
            <param name="showEmptyValues"></param>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExFileDisplay.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExFileDisplay.ShowError(System.String,System.String)">
            <summary>
            Shows an error message
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExFileDisplayCode">
            <summary>
            Simple component to display markdown files with MudExFileDisplay
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayCode.Name">
            <summary>
            The name of the component
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayCode.Value">
            <summary>
            The Current code string provided from file
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayCode.Language">
            <summary>
            Language
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayCode.Theme">
            <summary>
            The theme of the code block
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayCode.FileDisplayInfos">
            <summary>
            The file display infos
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayCode.MudExFileDisplay">
            <summary>
            Reference to the parent MudExFileDisplay if the component is used inside a MudExFileDisplay
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExFileDisplayCode.CanHandleFileAsync(MudBlazor.Extensions.Components.IMudExFileDisplayInfos,MudBlazor.Extensions.Core.IMudExFileService)">
            <summary>
            Returns true if it's a markdown file and we can handle it
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExFileDisplayCode.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExFileDisplayDialog">
            <summary>
            Dialog to display a file using <see cref="T:MudBlazor.Extensions.Components.MudExFileDisplay"/> component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayDialog.MudDialog">
            <summary>
            The MudDialog instance
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayDialog.ContentClass">
            <summary>
            CSS classes applied to the content of the dialog.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayDialog.Icon">
            <summary>
            Icon to display in the dialog.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayDialog.DialogIconColor">
            <summary>
            If true icons are colored
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayDialog.Buttons">
            <summary>
            Action buttons to display in the dialog.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExFileDisplayDialog.OnParametersSet">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExFileDisplayDialog.ShowAsync(MudBlazor.IDialogService,System.String,System.String,System.String,System.Action{MudBlazor.Extensions.Options.DialogOptionsEx})">
            <summary>
            Shows a file using the <see cref="T:MudBlazor.Extensions.Components.MudExFileDisplay"/> component in a dialog.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExFileDisplayDialog.ShowAsync(MudBlazor.IDialogService,Microsoft.AspNetCore.Components.Forms.IBrowserFile,System.Action{MudBlazor.Extensions.Options.DialogOptionsEx})">
            <summary>
            Shows a file using the <see cref="T:MudBlazor.Extensions.Components.MudExFileDisplay"/> component in a dialog.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExFileDisplayDialog.ShowAsync(MudBlazor.IDialogService,System.IO.Stream,System.String,System.String,System.Action{MudBlazor.Extensions.Options.DialogOptionsEx})">
            <summary>
            Shows a file using the <see cref="T:MudBlazor.Extensions.Components.MudExFileDisplay"/> component in a dialog.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExFileDisplayDialog.Submit(MudBlazor.DialogResult)">
            <summary>
            Submits the dialog.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExFileDisplayDialog.Cancel">
            <summary>
            Closes the dialog.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExFileDisplayExcel">
            <summary>
            Simple Excel file viewer
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayExcel.Name">
            <summary>
            The name of the component
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayExcel.Value">
            <summary>
            The Current code string provided from file
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayExcel.FileDisplayInfos">
            <summary>
            The file display infos
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayExcel.Src">
            <summary>
            Src url of xlsx file
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayExcel.MudExFileDisplay">
            <summary>
            Reference to the parent MudExFileDisplay if the component is used inside a MudExFileDisplay
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExFileDisplayExcel.CanHandleFileAsync(MudBlazor.Extensions.Components.IMudExFileDisplayInfos,MudBlazor.Extensions.Core.IMudExFileService)">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExFileDisplayExcel.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExFileDisplayFont">
            <summary>
            Simple component to display markdown files with MudExFileDisplay
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayFont.SampleText">
            <summary>
            Sample text to display the font
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayFont.HeaderColor">
            <summary>
            Header color
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayFont.DividerColor">
            <summary>
            Divider color
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayFont.Url">
            <summary>
            Url to the font file
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayFont.Name">
            <summary>
            The name of the component
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayFont.Value">
            <summary>
            The Current markdown string provided from file
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayFont.FileDisplayInfos">
            <summary>
            The file display infos
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayFont.MudExFileDisplay">
            <summary>
            Reference to the parent MudExFileDisplay if the component is used inside a MudExFileDisplay
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExFileDisplayFont.CanHandleFileAsync(MudBlazor.Extensions.Components.IMudExFileDisplayInfos,MudBlazor.Extensions.Core.IMudExFileService)">
            <summary>
            Returns true if it's a font file and we can handle it
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExFileDisplayFont.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExFileDisplayHtml">
            <summary>
            Simple component to display Html files with MudExFileDisplay
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayHtml.Name">
            <summary>
            The name of the component
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayHtml.Value">
            <summary>
            The Current code string provided from file
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayHtml.FileDisplayInfos">
            <summary>
            The file display infos
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayHtml.MudExFileDisplay">
            <summary>
            Reference to the parent MudExFileDisplay if the component is used inside a MudExFileDisplay
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExFileDisplayHtml.CanHandleFileAsync(MudBlazor.Extensions.Components.IMudExFileDisplayInfos,MudBlazor.Extensions.Core.IMudExFileService)">
            <summary>
            Returns true if it's a markdown file and we can handle it
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExFileDisplayHtml.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExFileDisplayMarkdown">
            <summary>
            Simple component to display markdown files with MudExFileDisplay
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayMarkdown.Name">
            <summary>
            The name of the component
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayMarkdown.FileDisplayInfos">
            <summary>
            The file display infos
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayMarkdown.MudExFileDisplay">
            <summary>
            Reference to the parent MudExFileDisplay if the component is used inside a MudExFileDisplay
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExFileDisplayMarkdown.CanHandleFileAsync(MudBlazor.Extensions.Components.IMudExFileDisplayInfos,MudBlazor.Extensions.Core.IMudExFileService)">
            <summary>
            Returns true if its a markdown file and we can handle it
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExFileDisplayMarkdown.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExFileDisplayOfficeLive">
            <summary>
            Simple Excel file viewer
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayOfficeLive.Name">
            <summary>
            The name of the component
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayOfficeLive.Value">
            <summary>
            The Current code string provided from file
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayOfficeLive.FileDisplayInfos">
            <summary>
            The file display infos
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayOfficeLive.Src">
            <summary>
            Src url of xlsx file
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayOfficeLive.MudExFileDisplay">
            <summary>
            Reference to the parent MudExFileDisplay if the component is used inside a MudExFileDisplay
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExFileDisplayOfficeLive.CanHandleFileAsync(MudBlazor.Extensions.Components.IMudExFileDisplayInfos,MudBlazor.Extensions.Core.IMudExFileService)">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExFileDisplayOfficeLive.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExFileDisplayStructuredData">
            <summary>
            Simple component to display markdown files with MudExFileDisplay
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayStructuredData.Name">
            <summary>
            The name of the component
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayStructuredData.Value">
            <summary>
            The Current code string provided from file
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayStructuredData.FileDisplayInfos">
            <summary>
            The file display infos
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayStructuredData.MudExFileDisplay">
            <summary>
            Reference to the parent MudExFileDisplay if the component is used inside a MudExFileDisplay
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExFileDisplayStructuredData.CanHandleFileAsync(MudBlazor.Extensions.Components.IMudExFileDisplayInfos,MudBlazor.Extensions.Core.IMudExFileService)">
            <summary>
            Returns true if its a markdown file and we can handle it
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExFileDisplayStructuredData.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExFileDisplayZip">
            <summary>
            A Component to display the content of a zip file
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayZip.Name">
            <inheritdoc />
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayZip.WrapInMudExFileDisplayDiv">
            <inheritdoc />
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayZip.IgnoredRenderControls">
            <summary>
            Specify types of IMudExFileDisplay that should be ignored
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayZip.MudDialog">
            <summary>
            Reference to the parent MudDialog if the component is used inside a MudDialog
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayZip.StreamUrlHandling">
            <summary>
            Behavior for handling stream urls
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayZip.Dense">
            <summary>
            If true, compact vertical padding will be applied to items.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayZip.FileDisplayInfos">
            <inheritdoc />
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayZip.ParametersForSubControls">
            <summary>
            Specify parameters for viewer controls. If a possible IMudExFileDisplay is found for current content type this parameters will be forwarded
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayZip.ForceNativeRender">
            <summary>
            Set this to true to initially render native and ignore registered IMudExFileDisplay
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayZip.SearchString">
            <summary>
            SearchString for current filter
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayZip.Filters">
            <summary>
            The filter values for the component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayZip.AllowSearch">
            <summary>
            If true user is able to search
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayZip.RootFolderName">
            <summary>
            Name of root folder
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayZip.Url">
            <summary>
            Url
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayZip.ContentType">
            <summary>
            Content Type 
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayZip.ContentStream">
            <inheritdoc />
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayZip.ShowAsTree">
            <summary>
            True to display structure as tree
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayZip.ViewMode">
            <summary>
            True to display structure as tree
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayZip.AllowToggleTree">
            <summary>
            If true user can toggle between flat and tree view
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayZip.AllowDownload">
            <summary>
            If true user can download all or specific files from zip
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayZip.AllowPreview">
            <summary>
            If true user can preview containing files
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayZip.ActionButtonColor">
            <summary>
            Button Color for action icon button
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayZip.FilterMode">
            <summary>
            PropertyFilterMode
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayZip.ToolBarPaperClass">
            <summary>
            Css Class for toolbar paper
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayZip.StickyToolbar">
            <summary>
            True to have a sticky toolbar on top
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayZip.StickyToolbarTop">
            <summary>
            Top position if toolbar is sticky
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayZip.SelectionMode">
            <summary>
            File Selection Mode
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayZip.Selected">
            <summary>
            Selected files
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayZip.SelectedChanged">
            <summary>
            Event on selection change
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExFileDisplayZip.IsSelected(Nextended.Blazor.Models.IArchivedBrowserFile)">
            <summary>
            Returns true if given ZipFile entry is selected
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayZip.ShowContentError">
            <summary>
            Show content error
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayZip.FallBackInIframe">
            <summary>
            Set to true to render all failures in iframe fallback
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayZip.ViewDependsOnContentType">
            <summary>
            Set this to false to show everything in iframe/object tag otherwise zip, images audio and video will displayed in correct tags
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayZip.ImageAsBackgroundImage">
            <summary>
            Render images as background image instead of img tag
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayZip.SandBoxIframes">
            <summary>
            Use sandbox mode for iframe
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayZip.HandleContentErrorFunc">
            <summary>
            A function to handle content error.
            Return true if you have handled the error and false if you want to show the error message For example you can reset Url here to create a proxy fallback or display own not supported image or what ever.
            If you reset Url or Data here you need also to reset ContentType
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayZip.CustomContentErrorMessage">
            <summary>
            Custom error message for content error
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayZip.ColorizeIcons">
            <summary>
            If true icons are colored
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayZip.IconColor">
            <summary>
            If true icons are colored
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayZip.Virtualize">
            <summary>
            Gets or sets a value indicating whether the collection should be virtualized.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExFileDisplayZip.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFileDisplayZip.FileName">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExFileDisplayZip.CanHandleFileAsync(MudBlazor.Extensions.Components.IMudExFileDisplayInfos,MudBlazor.Extensions.Core.IMudExFileService)">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExFileDisplayZip.CanHandleFileAsArchive(System.String)">
            <summary>
            Returns true if the MudExFileDisplay Component can handle the file as an archive.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExFileDisplayZip.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExFontSelect">
            <summary>
            Dropdown list component to select one ore more fonts
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExFontSelect.Inherited">
            <summary>
            Render base component
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFontSelect.FontFamily">
            <summary>
            FontFamily
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExFontSelect.WithGoogleLatinFonts">
            <summary>
            Set to true to allow selection of google latin fonts
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExFontSelect.GetAvailableItemsAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExFontSelect.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExFontSelect.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExFontSelect.NeedsValueUpdateForNonMultiSelection">
            <summary>
            Can be overwritten and should return true when the value needs to be updated for no multi selection
            </summary>
            <returns></returns>
        </member>
        <member name="T:MudBlazor.Extensions.Components.GoogleFileInfo">
            <summary>
            File info for Google Drive
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.GoogleFileInfo.Id">
            <summary>
            File Id
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.GoogleFileInfo.AccessToken">
            <summary>
            Access token
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.GoogleFileInfo.EnsureDataLoadedAsync(System.Net.Http.HttpClient)">
            <summary>
            Ensure data is loaded
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.GoogleFileInfo.Size">
            <summary>
            File size
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.GoogleFileInfo.FileName">
            <summary>
            File name
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.GoogleFileInfo.Extension">
            <summary>
            File extension
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.GoogleFileInfo.ContentType">
            <summary>
            File content type
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.GoogleFileInfo.WebViewLink">
            <summary>
            Web view link
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.GoogleFileInfo.WebContentLink">
            <summary>
            Web content link
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.GoogleFileInfo.Data">
            <summary>
            File data
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.GoogleFileInfo.Url">
            <summary>
            Url
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.GoogleFileInfo.Path">
            <summary>
            Folder path
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExGoogleFilePicker">
            <summary>
            Google Drive file picker component
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExGoogleFilePicker.AppId">
            <summary>
            Google Drive App Id
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExGoogleFilePicker.AllowUpload">
            <summary>
            Option to allow upload
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExGoogleFilePicker.AlwaysLoadPath">
            <summary>
            Option to always load path
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExGoogleFilePicker.AllowFolderSelect">
            <summary>
            Option to allow folder select
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExGoogleFilePicker.AllowFolderNavigation">
            <summary>
            Option to allow folder navigation
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExGoogleFilePicker.Image">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExGoogleFilePicker.JsOptions">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExGoogleFilePicker.OnInitialized">
            <inheritdoc />
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExGradientText">
            <summary>
            A Component to display text with a gradient foreground or background
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExGradientText.ServiceProvider">
            <summary>
            Gets or sets the service provider to use when retrieving services.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExGradientText.JsRuntime">
            <summary>
            Gets the JavaScript interop instance.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExGradientText.Radius">
            <summary>
            Gets or sets the radius of the gradient.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExGradientText.GradientForeground">
            <summary>
            Gets or sets a value indicating whether the gradient should be applied to the text foreground.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExGradientText.TextFillColor">
            <summary>
            Gets or sets the fill color of the text.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExGradientText.Animate">
            <summary>
            Gets or sets a value indicating whether to animate the gradient.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExGradientText.AnimationDuration">
            <summary>
            Gets or sets the duration of the animation.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExGradientText.Palette">
            <summary>
            Gets or sets the collection of colors to use for the gradient.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExGradientText.OnParametersSetAsync">
            <inheritdoc />
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExGravatar">
            <summary>
            Simple extension for MudAvatar to load automatically a profile image for an email address using Gravatar
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExGravatar.GravatarUrl">
            <summary>
            Here you can get the current used Url for the image
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExGravatar.GravatarImageSize">
            <summary>
            Specify the size of the Gravatar image to load. The default is 80px.
            Please note this is not the size of the displayed image, but the size of the image behind.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExGravatar.Email">
            <summary>
            The email address to load the Gravatar image for
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExGravatar.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExGrid">
            <summary>
            A simple grid component that supports Columns, and Rows and ColSpan and RowSpan for containing sections.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExGrid.ChildContent">
            <summary>
            Gets or sets the child content of the component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExGrid.Column">
            <summary>
            Gets or sets the column size for the component. Default is 4.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExGrid.Row">
            <summary>
            Gets or sets the row size for the component. Default is 4.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExGrid.Height">
            <summary>
            Gets or sets the height of the component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExGrid.OnClick">
            <summary>
            Event callback for the click event.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExGrid.OnClickStopPropagation">
            <summary>
            Gets or sets a value indicating whether the click event should stop propagation. Default is false.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExGrid.OnContextMenu">
            <summary>
            Event callback for the context menu event.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExGrid.OnContextMenuPreventDefault">
            <summary>
            Gets or sets a value indicating whether the context menu event should prevent its default action. Default is false.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExGrid.OnContextMenuStopPropagation">
            <summary>
            Gets or sets a value indicating whether the context menu event should stop propagation. Default is false.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExGrid.RegisterSection(MudBlazor.Extensions.Components.MudExGridSection)">
            <summary>
            Registers a section with the grid.
            </summary>
            <param name="section"></param>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExGrid.UnregisterSection(MudBlazor.Extensions.Components.MudExGridSection)">
            <summary>
            Unregisters a section with the grid.
            </summary>
            <param name="section"></param>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExGrid.GetAllChildSections">
            <summary>
            Returns all containing sections.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExGrid.OnClickHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            The on click handler
            </summary>    
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExGridSection">
            <summary>
            This section can be placed inside a MudExGrid component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExGridSection.ElementReference">
            <summary>
            Reference to rendered element
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExGridSection.Grid">
            <summary>
            Reference to the parent MudExGrid component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExGridSection.ChildContent">
            <summary>
            Gets or sets the child content of the component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExGridSection.Column">
            <summary>
            Gets or sets the column position for the component. Default is 1.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExGridSection.ColSpan">
            <summary>
            Gets or sets the column span of the component. Default is 1.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExGridSection.Row">
            <summary>
            Gets or sets the row position for the component. Default is 1.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExGridSection.RowSpan">
            <summary>
            Gets or sets the row span of the component. Default is 1.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExGridSection.ColumnChanged">
            <summary>
            Callback that is invoked when the column position changes.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExGridSection.ColSpanChanged">
            <summary>
            Callback that is invoked when the column span changes.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExGridSection.RowChanged">
            <summary>
            Callback that is invoked when the row position changes.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExGridSection.RowSpanChanged">
            <summary>
            Callback that is invoked when the row span changes.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExGridSection.OnClick">
            <summary>
            Event callback for the click event.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExGridSection.OnDblClick">
            <summary>
            Event callback for the double click event.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExGridSection.OnClickStopPropagation">
            <summary>
            Gets or sets a value indicating whether the click event should stop propagation. Default is false.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExGridSection.OnContextMenu">
            <summary>
            Event callback for the context menu event.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExGridSection.OnContextMenuPreventDefault">
            <summary>
            Gets or sets a value indicating whether the context menu event should prevent its default action. Default is false.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExGridSection.OnContextMenuStopPropagation">
            <summary>
            Gets or sets a value indicating whether the context menu event should stop propagation. Default is false.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExGridSection.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExGridSection.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExGridSection.OnClickHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            The on click handler
            </summary>    
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExGridSection.OnDblClickHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            The on double click handler
            </summary>    
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExGroupBox.ChildContent">
            <summary>
            Child content of the group box
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExGroupBox.Text">
            <summary>
            Text to display as group Header
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExGroupBox.Square">
            <summary>
            If true, the group box will have a square border
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExGroupBox.BorderColor">
            <summary>
            The color of the border
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExHtmlEdit">
            <summary>
            A WYSIWYG Html editor component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExHtmlEdit.ValueHasChanged">
            <summary>
            Is true if the value has changed.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExHtmlEdit.ReadOnly">
            <summary>
            Readonly. If true, the editor is disabled.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExHtmlEdit.UpdateValueOnChange">
            <summary>
            If true, the editor will update the value on every change event otherwise on blur only.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExHtmlEdit.Value">
            <summary>
            The HTML content to be displayed and edited inside the editor.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExHtmlEdit.ValueChanged">
            <summary>
            Event callback for the value changed event.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExHtmlEdit.Height">
            <summary>
            Gets or sets the height of the component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExHtmlEdit.Width">
            <summary>
            Gets or sets the height of the component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExHtmlEdit.OnClick">
            <summary>
            Event callback for the click event.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExHtmlEdit.OnClickStopPropagation">
            <summary>
            Gets or sets a value indicating whether the click event should stop propagation. Default is false.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExHtmlEdit.OnContextMenu">
            <summary>
            Event callback for the context menu event.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExHtmlEdit.OnContextMenuPreventDefault">
            <summary>
            Gets or sets a value indicating whether the context menu event should prevent its default action. Default is false.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExHtmlEdit.OnContextMenuStopPropagation">
            <summary>
            Gets or sets a value indicating whether the context menu event should stop propagation. Default is false.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExHtmlEdit.GetHtml">
            <summary>
            Returns the HTML content of the editor.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExHtmlEdit.SetHtml(System.String)">
            <summary>
            Returns the HTML content of the editor.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExHtmlEdit.GetSelectedHtml">
            <summary>
            Returns the HTML content of the editor.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExHtmlEdit.OnClickHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            The on click handler
            </summary>    
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExIcon">
            <summary>
            MudExIcon is a simple MudIcon with extended possibilities to set all colors.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExIcon.Classname">
            <summary>
            Classname for the component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExIcon.Stylename">
            <summary>
            Style for the component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExIcon.Icon">
            <summary>
            Icon to be used can either be svg paths for font icons.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExIcon.Title">
            <summary>
            Title of the icon used for accessibility.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExIcon.Size">
            <summary>
            The Size of the icon.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExIcon.Color">
            <summary>
            The color of the component. It supports the theme colors.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExIcon.ViewBox">
            <summary>
            The view box size of a svg element.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExIcon.ChildContent">
            <summary>
            Child content of component.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExIconPicker">
            <summary>
            Component to Edit Icon values
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExIconPicker.PickerWidth">
            <summary>
            The width of the picker in pixels.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExIconPicker.DisableList">
            <summary>
            Set this to true to disable the list view
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExIconPicker.PickerHeight">
            <summary>
            The height of the picker in pixels.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExIconPicker.FilterVariant">
            <summary>
            Gets or sets the variant filter.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExIconPicker.AfterValueChanged(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExIconPicker.PropertyNameChanged">
            <summary>
            Gets or sets the callback method when the property name for the value of the is changed.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExIconPicker.Available">
            <summary>
            Available Icons in this Picker. If not set they will be filled automatically from <see cref="P:MudBlazor.Extensions.Components.MudExIconPicker.IconTypes"/>
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExIconPicker.IconTypes">
            <summary>
            Here you can specify the class of icons you want to show. Default is MudBlazor.Icons
            But if you have for example installed MudBlazor.MaterialDesignIcons you can also pass typeof(MaterialDesignIcons) 
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExIconPicker.Filter">
            <summary>
            Gets or sets the filter for the icons.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExIconPicker.AutoCloseOnSelect">
            <summary>
            Gets or sets the auto close behavior.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExIconPicker.AlwaysShowValue">
            <summary>
            The visible text value is by default the property path if possible set this to true to show always the value
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExIconPicker.PropertyName">
            <summary>
            Gets or sets the string name of the property for the value.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExIconPicker.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExIconPicker.OnParametersSetAsync">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExIconPicker.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExIconPicker.OnSyncResized(MudBlazor.Interop.BoundingClientRect)">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExIconPicker.OnPickerClosedAsync">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExIconPicker.OnPickerOpenedAsync">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExIconPicker.StringValueChangedAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExIconPicker.RaiseChanged">
            <inheritdoc />
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExImageViewerSaveOptions">
            <summary>
            Options for saving the current image in the image viewer.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExImageViewerSaveOptions.FileName">
            <summary>
            File name for the saved image.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExImageViewerSaveOptions.AreaToSave">
            <summary>
            Specify the area to save.
            Choose between the full image, the visible viewport or the selected area.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExImageViewerSaveOptions.Format">
            <summary>
            Format in which to save the image.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExImageViewerSaveOptions.GetImageFormat">
            <summary>
            Gets the image format for the current options as IImageFormat.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExImageViewerSaveOptions.GetImageFormat(MudBlazor.Extensions.Components.ImageViewerExportFormat)">
            <summary>
            Gets the image format for the given format as IImageFormat.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.ImageViewerExportFormat">
            <summary>
            Available formats for saving the image in the image viewer.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.ImageViewerExportFormat.Png">
            <summary>
            Portable Network Graphics format.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.ImageViewerExportFormat.Jpeg">
            <summary>
            Joint Photographic Experts Group format.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.ImageViewerExportFormat.Webp">
            <summary>
            WebP format.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.ImageViewerExportFormat.Bmp">
            <summary>
            Bitmap format.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.ImageViewerExportFormat.Gif">
            <summary>
            Graphics Interchange Format.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.ImageViewerExportFormat.Tiff">
            <summary>
            Tagged Image File Format.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.ImageViewerExportFormat.Tga">
            <summary>
            Truevision Targa format.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.ImageViewerExportFormat.Qoi">
            <summary>
            QuickTime Image format.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.ImageViewerExportFormat.Pbm">
            <summary>
            Portable Bitmap format.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExImageViewer">
            <summary>
            Simple component to display markdown files with MudExFileDisplay
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExImageViewer.StatusText">
            <summary>
            Returns the current status text
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExImageViewer.ToolbarContent">
            <summary>
            Extra additional toolbar content
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExImageViewer.SelectedAreaToolbarContent">
            <summary>
            Extra additional toolbar content for the selected area toolbar for <see cref="P:MudBlazor.Extensions.Components.MudExImageViewer.AllowRubberBandSelection"/>
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExImageViewer.ImageAreaSelected">
            <summary>
            Callback when the error state changes
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExImageViewer.StreamUrlHandling">
            <summary>
            How to handle the stream url
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExImageViewer.UndoIcon">
            <summary>
            The icon for Undo
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExImageViewer.ZoomInButtonIcon">
            <summary>
            The icon for the ZoomIn button
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExImageViewer.ZoomOutButtonIcon">
            <summary>
            The icon for the ZoomOut button
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExImageViewer.PrintButtonIcon">
            <summary>
            The icon for the Print button
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExImageViewer.ResetButtonIcon">
            <summary>
            The icon for the Reset button
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExImageViewer.FullScreenButtonIcon">
            <summary>
            The icon for the Fullscreen button
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExImageViewer.SaveButtonIcon">
            <summary>
            The icon for the Save button
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExImageViewer.SelectionModeIcon">
            <summary>
            The icon for the Selection Mode
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExImageViewer.SaveDialogOptions">
            <summary>
            The dialog options for the save dialog
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExImageViewer.ShowZoomInButton">
            <summary>
            If true a ZoomIn button is shown in the toolbar
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExImageViewer.ShowZoomOutButton">
            <summary>
            If true a ZoomOut button is shown in the toolbar
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExImageViewer.ShowPrintButton">
            <summary>
            If true a Print button is shown in the toolbar
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExImageViewer.ShowSaveButton">
            <summary>
            If true a Save button is shown in the toolbar
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExImageViewer.ShowResetButton">
            <summary>
            If true a Reset button is shown in the toolbar
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExImageViewer.AllowRubberBandSelection">
            <summary>
            If true user can select an area with the mouse by holding the ctrl key
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExImageViewer.AllowInteractingUnderRubberBand">
            <summary>
            If true the rubber band stays open and the user can still move or zoom the image
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExImageViewer.ShowFullScreenButton">
            <summary>
            If true a FullScreen button is shown in the toolbar
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExImageViewer.ToolbarButtonVariant">
            <summary>
            Variant for toolbar buttons only if <see cref="M:MudBlazor.Extensions.Components.MudExImageViewer.ShowTools"/> is true
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExImageViewer.ToolbarButtonSize">
            <summary>
            Size for toolbar buttons only if <see cref="M:MudBlazor.Extensions.Components.MudExImageViewer.ShowTools"/> is true
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExImageViewer.ToolbarButtonPosition">
            <summary>
            
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExImageViewer.Size">
            <summary>
            Size of the viewer
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExImageViewer.ShowTools">
            <summary>
            This method returns true when at least one button is used
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExImageViewer.ToolbarStyle">
            <summary>
            Style for toolbar only if <see cref="M:MudBlazor.Extensions.Components.MudExImageViewer.ShowTools"/> is true
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExImageViewer.RubberBandStyle">
            <summary>
            Style for RubberBand only if <see cref="P:MudBlazor.Extensions.Components.MudExImageViewer.AllowRubberBandSelection"/> is true
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExImageViewer.Dense">
            <summary>
            Dense toolbar
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExImageViewer.ToolbarBackgroundColor">
            <summary>
            Toolbar background color only if <see cref="M:MudBlazor.Extensions.Components.MudExImageViewer.ShowTools"/> is true
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExImageViewer.BorderColor">
            <summary>
            Border color
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExImageViewer.BorderStyle">
            <summary>
            Border style
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExImageViewer.BorderSize">
            <summary>
            Border size
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExImageViewer.NavigatorRectangleColor">
            <summary>
            Color of the navigator rectangle only if <see cref="P:MudBlazor.Extensions.Components.MudExImageViewer.ShowNavigator"/> is true
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExImageViewer.ToolbarButtonColor">
            <summary>
            Toolbar button color only if <see cref="M:MudBlazor.Extensions.Components.MudExImageViewer.ShowTools"/> is true
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExImageViewer.Src">
            <summary>
            Image source
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExImageViewer.NavigatorPosition">
            <summary>
            Position of the navigator if <see cref="P:MudBlazor.Extensions.Components.MudExImageViewer.ShowNavigator"/> is true
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExImageViewer.NavigatorClass">
            <summary>
            Css class for the navigator if <see cref="P:MudBlazor.Extensions.Components.MudExImageViewer.ShowNavigator"/> is true
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExImageViewer.NavigatorSizeRatio">
            <summary>
            The size ratio of the navigator in relation to the viewer size
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExImageViewer.MaxZoomPixelRatio">
            <summary>
            The maximum zoom pixel ratio
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExImageViewer.MinZoomLevel">
            <summary>
            The minimum zoom level
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExImageViewer.AnimationTime">
            <summary>
            Animation time in seconds
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExImageViewer.ShowNavigator">
            <summary>
            Show the navigator
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExImageViewer.Name">
            <summary>
            The name of the component
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExImageViewer.FileDisplayInfos">
            <summary>
            The file display infos
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExImageViewer.MudExFileDisplay">
            <summary>
            Reference to the MudExFileDisplay if this component is used inside a MudExFileDisplay
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExImageViewer.OnViewerCreated">
            <summary>
            Called when the viewer is created
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExImageViewer.ImportModuleAndCreateJsAsync">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExImageViewer.CanHandleFileAsync(MudBlazor.Extensions.Components.IMudExFileDisplayInfos,MudBlazor.Extensions.Core.IMudExFileService)">
            <summary>
            Returns true if it's a markdown file and we can handle it
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExImageViewer.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExImageViewer.SetStatusTextAsync(System.String)">
            <summary>
            Sets the status text
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExImageViewer.RemoveStatusTextAsync">
            <summary>
            removes the status text
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExImageViewer.ZoomBy(System.Double)">
            <summary>
            Zooms to the given factor
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExImageViewer.ResetZoom">
            <summary>
            Zooms to the given factor
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExImageViewer.ToggleFullScreen">
            <summary>
            Toggles the fullscreen mode
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExImageViewer.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExImageViewer.SaveImageAsync">
            <summary>
            Shows a dialog to specify options and then downloads the image
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExImageViewer.SaveImageAsync(MudBlazor.Extensions.Components.MudExImageViewerSaveOptions)">
            <summary>
            Downloads the image with the given options
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExImageViewer.OpenSelectionInNewTab">
            <summary>
            Opens the selected area in a new tab
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExImageViewer.SaveSelection">
            <summary>
            Downloads the selected area as image
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExImageViewer.GetSelectedAreaImageUrlAsync">
            <summary>
            Returns the selected area image url depending on the <see cref="P:MudBlazor.Extensions.Components.MudExImageViewer.StreamUrlHandling"/> property
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExImageViewer.GetSelectedAreaImageBlobUrlAsync">
            <summary>
            Returns the selected area image as blob url
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExImageViewer.GetSelectedAreaImageDataUrlAsync">
            <summary>
            Returns the selected area image as data url
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExImageViewer.GetSelectedAreaImageAsync">
            <summary>
            Returns the selected area image as byte array
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExImageViewer.HideRubberBand">
            <summary>
            Hides the rubber band
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExImageViewer.Print(MudBlazor.Extensions.Components.SaveImageMode)">
            <summary>
            Prints the image
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExInput`1">
            <summary>
            MudExInput is a component that allows the user to enter a value. It's an extension of MudInput.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExInput`1.Classname">
            <summary>
            Classname for the component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExInput`1.InputClassname">
            <summary>
            Classname for the input element.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExInput`1.AdornmentClassname">
            <summary>
            Classname for adornment.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExInput`1.AdornmentStartClassname">
            <summary>
            Start adornment class name.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExInput`1.AdornmentEndClassname">
            <summary>
            End adornment class name.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExInput`1.ClearButtonClassname">
            <summary>
            Classname for the clear button.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExInput`1.ChildContentClassname">
            <summary>
            Child content class name.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExInput`1.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExInput`1.ShowVisualiser">
            <summary>
            Show visualiser.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExInput`1.DataVisualiserStyle">
            <summary>
            Data visualiser style.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExInput`1.InputType">
            <summary>
            Type of the input element. It should be a valid HTML5 input type.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExInput`1.InputTypeString">
            <summary>
            Input type string.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExInput`1.OnInputHandler(Microsoft.AspNetCore.Components.ChangeEventArgs)">
            <summary>
            Handle input event.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExInput`1.OnChangeHandler(Microsoft.AspNetCore.Components.ChangeEventArgs)">
            <summary>
            Text change event handler.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExInput`1.AutoSize">
            <summary>
            If true, automatically resize the height regard to the text. Needs Lines parameter to set more than 1.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExInput`1.OnInput">
            <summary>
            Fires on input.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExInput`1.OnChange">
            <summary>
            Fires on change.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExInput`1.OnPaste(Microsoft.AspNetCore.Components.Web.ClipboardEventArgs)">
            <summary>
            Paste hook for descendants.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExInput`1.ChildContent">
            <summary>
            ChildContent of the MudInput will only be displayed if InputType.Hidden and if it's not null.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExInput`1.ElementReference">
            <summary>
            Reference to the input element.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExInput`1.FocusAsync">
            <summary>
            Focuses the input element.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExInput`1.BlurAsync">
            <summary>
            Blurs the input element.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExInput`1.SelectAsync">
            <summary>
            Selects the text within the input element.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExInput`1.SelectRangeAsync(System.Int32,System.Int32)">
            <summary>
            Selects a range of text within the input element.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExInput`1.OnIncrement">
            <summary>
            Invokes the callback when the Up arrow button is clicked when the input is set to <see cref="F:MudBlazor.InputType.Number"/>.
            Note: use the optimized control <see cref="T:MudBlazor.MudNumericField`1"/> if you need to deal with numbers.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExInput`1.OnDecrement">
            <summary>
            Invokes the callback when the Down arrow button is clicked when the input is set to <see cref="F:MudBlazor.InputType.Number"/>.
            Note: use the optimized control <see cref="T:MudBlazor.MudNumericField`1"/> if you need to deal with numbers.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExInput`1.HideSpinButtons">
            <summary>
            Hides the spin buttons for <see cref="T:MudBlazor.MudNumericField`1"/>
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExInput`1.DataVisualiser">
            <summary>
            Visualiser for the data.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExInput`1.Clearable">
            <summary>
            Show clear button.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExInput`1.ForceClearable">
            <summary>
            Force clearable.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExInput`1.OnClearButtonClick">
            <summary>
            Button click event for clear button. Called after text and value has been cleared.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExInput`1.OnMouseWheel">
            <summary>
            Mouse wheel event for input.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExInput`1.ClearIcon">
            <summary>
            Custom clear icon.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExInput`1.NumericUpIcon">
            <summary>
            Custom numeric up icon.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExInput`1.NumericDownIcon">
            <summary>
            Custom numeric down icon.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExInput`1.UpdateTextPropertyAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExInput`1.UpdateValuePropertyAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExInput`1.ClearButtonClickHandlerAsync(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Handler for the clear button click.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExInput`1.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExInput`1.SetText(System.String)">
            <summary>
            Sets the input text from outside programmatically
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExList`1">
            <summary>
            MudExList is a component that allows you to select an item from a list of items. It is a wrapper for MudList.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExList`1.LocalizerPattern">
            <summary>
            Gets or Sets the Localizer Pattern.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExList`1.ItemNameRender(`0)">
            <summary>
            Renders the item name
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExList`1.Classname">
            <summary>
            Class
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExList`1.StyleStr">
            <summary>
            Style
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExList`1.SearchString">
            <summary>
            Search string
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExList`1.MudExSelect">
            <summary>
            Reference to the Select
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExList`1.MudAutocomplete">
            <summary>
            Reference to the Autocomplete
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExList`1.ParentList">
            <summary>
            Reference to the Parent List
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExList`1.SearchBoxBackgroundColor">
            <summary>
            BackgroundColor for SearchBox
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExList`1.GroupBy">
            <summary>
            Func to group by items collection
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExList`1.GroupingEnabled">
            <summary>
            Set to true to enable grouping with the GroupBy func
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExList`1.GroupsSticky">
            <summary>
            Sticky header for item group.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExList`1.GroupsNested">
            <summary>
            Set to true to use an expansion panel to nest items.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExList`1.GroupsInitiallyExpanded">
            <summary>
            Sets the group's expanded state on popover opening. Works only if GroupsNested is true.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExList`1.Color">
            <summary>
            The color of the selected List Item.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExList`1.ChildContent">
            <summary>
            Child content of component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExList`1.ItemTemplate">
            <summary>
            Optional presentation template for items
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExList`1.ItemSelectedTemplate">
            <summary>
            Optional presentation template for selected items
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExList`1.ItemDisabledTemplate">
            <summary>
            Optional presentation template for disabled items
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExList`1.SelectAllTemplate">
            <summary>
            Optional presentation template for select all item
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExList`1.Converter">
            <summary>
            Converter for the value. If not set, the default converter is used.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExList`1.Comparer">
            <summary>
            Comparer for the value. If not set, the default comparer is used.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExList`1.ToStringFunc">
            <summary>
            Defines how values are displayed in the drop-down list
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExList`1.ItemCollection">
            <summary>
            Predefined enumerable items. If it's not null, creates list items automatically.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExList`1.SearchFunc">
            <summary>
            Custom search func for search box. If it doesn't set, it searches with "Contains" logic by default. Passed value and searchString values.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExList`1.SearchBox">
            <summary>
            If true, shows a search box for filtering items. Only works with ItemCollection approach.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExList`1.SearchBoxVariant">
            <summary>
            Search box text field variant.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExList`1.SearchBoxAdornment">
            <summary>
            Search box icon position.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExList`1.SearchBoxAutoFocus">
            <summary>
            If true, the search-box will be focused when the dropdown is opened.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExList`1.SearchBoxClearable">
            <summary>
            If true, the search-box has a clear icon.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExList`1.ClassSearchBox">
            <summary>
            SearchBox's CSS classes, separated by space.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExList`1.SearchBoxPlaceholder">
            <summary>
            Placeholder for the search box.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExList`1.Virtualize">
            <summary>
            Allows virtualization. Only work if ItemCollection parameter is not null.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExList`1.MaxItems">
            <summary>
            Set max items to show in list. Other items can be scrolled. Works if list items populated with ItemCollection parameter.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExList`1.OverscanCount">
            <summary>
            Over scan value for Virtualized list. Default is 2.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExList`1.MultiSelection">
            <summary>
            Allows multi selection and adds MultiSelectionComponent for each list item.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExList`1.MultiSelectionAlign">
            <summary>
            The MultiSelectionComponent's placement. Accepts Align.Start and Align.End
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExList`1.MultiSelectionComponent">
            <summary>
            The component which shows as a MultiSelection check.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExList`1.Clickable">
            <summary>
            Set true to make the list items clickable. This is also the precondition for list selection to work.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExList`1.Unselectable">
            <summary>
            Set true to allow unselecting the selected item.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExList`1.SelectValueOnTab">
            <summary>
            If true the active (highlighted) item select on tab key. Designed for only single selection. Default is true.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExList`1.DisablePadding">
            <summary>
            If true, vertical padding will be removed from the list.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExList`1.DisableSelectedItemStyle">
            <summary>
            If true, selected items doesn't have a selected background color.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExList`1.Dense">
            <summary>
            If true, compact vertical padding will be applied to all list items.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExList`1.Gutters">
            <summary>
            If true, the left and right padding is removed on all list items.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExList`1.Disabled">
            <summary>
            If true, will disable the list item if it has onclick.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExList`1.SelectAll">
            <summary>
            If set to true and the MultiSelection option is set to true, a "select all" checkbox is added at the top of the list of items.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExList`1.SelectAllPosition">
            <summary>
            Sets position of the Select All checkbox
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExList`1.SelectAllText">
            <summary>
            Define the text of the Select All option.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExList`1.SecondaryBackgroundForNestedItemHeader">
            <summary>
            If true, change background color to secondary for all nested item headers.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExList`1.OnKeyDown">
            <summary>
            Fired on the KeyDown event.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExList`1.OnFocusOut">
            <summary>
            Fired on the OnFocusOut event.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExList`1.OnDoubleClick">
            <summary>
            Fired on the OnDoubleClick event.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExList`1.HandleCentralValueCommander(System.String,System.Boolean)">
            <summary>
            CentralCommander has a simple aim: Prevent racing conditions. It has two mechanism to do this:
            (1) When this method is running, it doesn't allow to run a second one. That guarantees to different value parameters can not call this method at the same time.
            (2) When this method runs once, prevents all value setters until OnAfterRender runs. That guarantees to have proper values.
            </summary>
            <param name="changedValueType"></param>
            <param name="updateStyles"></param>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExList`1.UpdateSelectedItem">
            <summary>
            Update selected.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExList`1.UpdateSelectedValue">
            <summary>
            Update selected value
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExList`1.SelectedValue">
            <summary>
            The current selected value.
            Note: Make the list Clickable or set MultiSelection true for item selection to work.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExList`1.SelectedValues">
            <summary>
            The current selected values. Holds single value (SelectedValue) if MultiSelection is false.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExList`1.SelectedItem">
            <summary>
            The current selected list item.
            Note: make the list Clickable or MultiSelection or both for item selection to work.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExList`1.SelectedItems">
            <summary>
            The current selected list items.
            Note: make the list Clickable for item selection to work.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExList`1.SelectedValueChanged">
            <summary>
            Called whenever the selection changed. Can also be called even MultiSelection is true.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExList`1.SelectedValuesChanged">
            <summary>
            Called whenever selected values changes. Can also be called even MultiSelection is false.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExList`1.SelectedItemChanged">
            <summary>
            Called whenever the selected item changed. Can also be called even MultiSelection is true.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExList`1.SelectedItemsChanged">
            <summary>
            Called whenever the selected items changed. Can also be called even MultiSelection is false.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExList`1.GetAllItems">
            <summary>
            Get all MudListItems in the list.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExList`1.GetItems">
            <summary>
            Get all items that holds value.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExList`1.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExList`1.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExList`1.OnParametersSet">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExList`1.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExList`1.Dispose">
            <summary>
            Dispose the component.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExList`1.Register(MudBlazor.Extensions.Components.MudExListItem{`0})">
            <summary>
            Register list item.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExList`1.Unregister(MudBlazor.Extensions.Components.MudExListItem{`0})">
            <summary>
            Unregister list item.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExList`1.Register(MudBlazor.Extensions.Components.MudExList{`0})">
            <summary>
            Register child list.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExList`1.Unregister(MudBlazor.Extensions.Components.MudExList{`0})">
            <summary>
            Unregister child list.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExList`1.SearchBoxHandleKeyDown(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs)">
            <summary>
            Key down handler for search box.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExList`1.SearchField">
            <summary>
            Search field.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExList`1.HandleKeyDown(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs)">
            <summary>
            Key down handler
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExList`1.HandleOnFocusOut">
            <summary>
            Handler for focus leave.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExList`1.HandleOnScroll">
            <summary>
            Scroll handler.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExList`1.SetSelectedValue(`0,System.Boolean)">
            <summary>
            Set selected value.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExList`1.SetSelectedValue(MudBlazor.Extensions.Components.MudExListItem{`0},System.Boolean)">
            <summary>
            Set the selected value.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExList`1.UpdateSelectedStyles(System.Boolean,System.Boolean)">
            <summary>
            Update selected styles.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExList`1.IsSelectable">
            <summary>
            Returns true if the item is selectable.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExList`1.DeselectAllItems(System.Collections.Generic.List{MudBlazor.Extensions.Components.MudExListItem{`0}})">
            <summary>
            Unselect all items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExList`1.CollectAllMudListItems(System.Boolean)">
            <summary>
            Collects all MudListItems.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExList`1.UpdateSelectAllState">
            <summary>
            Update select all state.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExList`1.SelectAllCheckBoxIcon">
            <summary>
            Icon for select all checkbox.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExList`1.CheckedIcon">
            <summary>
            Custom checked icon.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExList`1.UncheckedIcon">
            <summary>
            Custom unchecked icon.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExList`1.IndeterminateIcon">
            <summary>
            Custom indeterminate icon.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExList`1.SelectAllItems(System.Nullable{System.Boolean})">
            <summary>
            Select all items.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExList`1.GetActiveItemIndex">
            <summary>
            Returns the index of the active item.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExList`1.GetActiveItemValue">
            <summary>
            returns the value of the active item.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExList`1.UpdateLastActivatedItem(`0)">
            <summary>
            Update last activated item.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExList`1.DeactiveAllItems(System.Collections.Generic.List{MudBlazor.Extensions.Components.MudExListItem{`0}})">
            <summary>
            Deactivate all items.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExList`1.ActiveFirstItem(System.String)">
            <summary>
            Active first item.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExList`1.ActiveAdjacentItem(System.Int32)">
            <summary>
            Active adjacent item.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExList`1.ActivePreviousItem">
            <summary>
            Active previous item.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExList`1.ActiveLastItem">
            <summary>
            Active last item.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExList`1.Clear">
            <summary>
            Clears value(s) and item(s) and deactivates all items.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExList`1.ScrollToMiddleAsync(MudBlazor.Extensions.Components.MudExListItem{`0})">
            <summary>
            Scroll to middle.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExList`1.GetSearchedItems">
            <summary>
            Returns all searched items.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExList`1.ForceUpdate">
            <summary>
            Force update.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExList`1.ForceUpdateItems">
            <summary>
            Force update items.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExList`1.OnDoubleClickHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs,`0)">
            <summary>
            Handler for double click.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.ListItemClickEventArgs`1">
            <summary>
            Arguments for list item click event.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ListItemClickEventArgs`1.MouseEventArgs">
            <summary>
            Mouse event arguments.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ListItemClickEventArgs`1.ItemValue">
            <summary>
            Value of the item.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExListItem`1">
            <summary>
            List item for MudExList.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExListItem`1.UriHelper">
            <summary>
            UriHelper for navigation.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExListItem`1.MudExList">
            <summary>
            Parent list if any.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExListItem`1.ParentListItem">
            <summary>
            Parent list item if any.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExListItem`1.Classname">
            <summary>
            Classname for the component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExListItem`1.MultiSelectClassName">
            <summary>
            Classname for the multiselect component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExListItem`1.IconStyleName">
            <summary>
            Style for the icon.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExListItem`1.ItemId">
            <summary>
            Id of the list item.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExListItem`1.IgnoreItemTemplate">
            <summary>
            If true the item template will be ignored.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExListItem`1.IsFunctional">
            <summary>
            Functional items does not hold values. If a value set on Functional item, it ignores by the MudList. They can not count on Items list (they count on AllItems), cannot be subject of keyboard navigation and selection.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExListItem`1.Text">
            <summary>
            The text to display
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExListItem`1.SecondaryText">
            <summary>
            The secondary text to display
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExListItem`1.Value">
            <summary>
            Value of the list item.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExListItem`1.Avatar">
            <summary>
            Avatar to use if set.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExListItem`1.AvatarClass">
            <summary>
            Avatar CSS Class to apply if Avatar is set.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExListItem`1.Href">
            <summary>
            Link to a URL when clicked.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExListItem`1.ForceLoad">
            <summary>
            If true, force browser to redirect outside component router-space.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExListItem`1.Disabled">
            <summary>
            If true, will disable the list item if it has onclick.
            The value can be overridden by the parent list.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExListItem`1.Gutters">
            <summary>
            If true, the left and right padding is removed.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExListItem`1.Ripple">
            <summary>
            If true, disables ripple effect.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExListItem`1.OverrideMultiSelectionComponent">
            <summary>
            Overriden component for multi selection. Keep it null to have default one that MudList has.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExListItem`1.Icon">
            <summary>
            Icon to use if set.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExListItem`1.IconColor">
            <summary>
            The color of the icon.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExListItem`1.IconSize">
            <summary>
            Sets the Icon Size.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExListItem`1.AdornmentColor">
            <summary>
            The color of the adornment if used. It supports the theme colors.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExListItem`1.ExpandLessIcon">
            <summary>
            Custom expand less icon.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExListItem`1.ExpandMoreIcon">
            <summary>
            Custom expand more icon.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExListItem`1.Inset">
            <summary>
            If true, the List Sub header will be indented.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExListItem`1.OnClickStopPropagation">
            <summary>
            If true, stop propagation on click. Default is true.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExListItem`1.Dense">
            <summary>
            If true, compact vertical padding will be used.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExListItem`1.CommandParameter">
            <summary>
            Command parameter.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExListItem`1.Command">
            <summary>
            Command executed when the user clicks on an element.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExListItem`1.OnClickHandlerPreventDefault">
            <summary>
            Prevent default behavior when click on MudSelectItem. Default behavior is selecting the item and style adjustments.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExListItem`1.ChildContent">
            <summary>
            Display content of this list item. If set, overrides Text.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExListItem`1.NestedList">
            <summary>
            Add child list items here to create a nested list.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExListItem`1.OnClick">
            <summary>
            List click event.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExListItem`1.InitiallyExpanded">
            <summary>
            If true, expands the nested list on first display.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExListItem`1.Expanded">
            <summary>
            Expand or collapse nested list. Two-way bind able. Note: if you directly set this to
            true or false (instead of using two-way binding) it will force the nested list's expansion state.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExListItem`1.ExpandedChanged">
            <summary>
            Called when expanded state change.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExListItem`1.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExListItem`1.Dispose">
            <summary>
            Dispose the component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExListItem`1.IsSelected">
            <summary>
            Selected state of the option. Readonly. Use SetSelected for selecting.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExListItem`1.SetSelected(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Set the selected state of the option.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExListItem`1.ForceRender">
            <summary>
            Force render the component.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExListItem`1.OnClickHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Handler for click event.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExListItem`1.OnlyOnClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Only click event.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExListItem`1.OnListParametersChanged">
            <summary>
            Called when list parameters changed.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExListSubheader`1">
            <summary>
            MudExListSubheader is a sub header for MudExList.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExListSubheader`1.Classname">
            <summary>
            Classname for the component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExListSubheader`1.Stylename">
            <summary>
            Style for the component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExListSubheader`1.MudExList">
            <summary>
            MudExList instance.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExListSubheader`1.ChildContent">
            <summary>
            The child render fragment.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExListSubheader`1.Gutters">
            <summary>
            Disables the left and right spaces.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExListSubheader`1.Inset">
            <summary>
            If true, the List Sub header will be indented.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExListSubheader`1.Sticky">
            <summary>
            If true, sub header behaves sticky and remains on top until other sub header comes to top.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExListSubheader`1.StickyTop">
            <summary>
            The top position of sticky header
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExListSubheader`1.BackgroundColor">
            <summary>
            Set custom header background color.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExMarkdown">
            <summary>
            Simple component to display markdown
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExMarkdown.CodeBlockTheme">
            <summary>
            The theme of the code block
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExMarkdown.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExMessageDialog">
            <summary>
            Simple MessageDialog
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExMessageDialog.IconColor">
            <summary>
            The color of the dialog icon for when the dialog is used in relation to a particular color theme.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExMessageDialog.ContentClass">
            <summary>
            Gets or sets the class for the content of the dialog
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExMessageDialog.ClassActions">
            <summary>
            The CSS class to apply to the action buttons of the dialog.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExMessageDialog.ContentStyle">
            <summary>
            The CSS styles to apply to the content area of the dialog.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExMessageDialog.Message">
            <summary>
            Gets or sets the message of the dialog
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExMessageDialog.AllowEmptyActions">
            <summary>
            Gets or sets whether empty actions are allowed in the dialog
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExMessageDialog.Icon">
            <summary>
            Gets or sets the icon of the dialog
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExMessageDialog.Details">
            <summary>
            Gets or sets the details of the dialog
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExMessageDialog.Buttons">
            <summary>
            Gets or sets the buttons of the dialog
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExMessageDialog.Content">
            <summary>
            Gets or sets the content of the dialog
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExMessageDialog.ShowProgress">
            <summary>
            Gets or sets whether progress is shown in the dialog
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExMessageDialog.ProgressValue">
            <summary>
            Gets or sets the value of the progress shown in the dialog
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExMessageDialog.ProgressMin">
            <summary>
            Gets or sets the minimum value of the progress shown in the dialog
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExMessageDialog.ProgressMax">
            <summary>
            Gets or sets the maximum value of the progress shown in the dialog
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExMessageDialog.DelayContentRendering">
            <summary>
            If this is true the content of the dialog will be rendered after the dialog is opened and animation is finished
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExMessageDialog.PreventStateHasChanged">
            <summary>
            If true StateHasChanged is not happen
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExMessageDialog.OnAfterRender(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExMessageDialog.ShouldRender">
            <inheritdoc />
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExMessageDialog.Component">
            <summary>
            Gets or sets the component associated with the dialog
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExMessageDialog.Cancel">
            <summary>
            Cancels the dialog
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.OneDriveFileInfo">
            <summary>
            File info from one drive
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.OneDriveFileInfo.Id">
            <summary>
            File Id
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.OneDriveFileInfo.AccessToken">
            <summary>
            AccessToken
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.OneDriveFileInfo.ApiPath">
            <summary>
            ApiPath
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.OneDriveFileInfo.DownloadUrl">
            <summary>
            DownloadUrl
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExOneDriveFilePicker">
            <summary>
            OneDrive file picker component
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExOneDriveFilePicker.AllowFolderSelect">
            <summary>
            Option to allow folder select
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExOneDriveFilePicker.RedirectUri">
            <summary>
            Url for redirect
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExOneDriveFilePicker.Image">
            <inheritdoc />
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExOneDriveFilePicker.ExternalJsFiles">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExOneDriveFilePicker.JsOptions">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExOneDriveFilePicker.OnInitialized">
            <inheritdoc />
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExPicker.ChildContent">
            <summary>
            Child content of the picker
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExPicker.PickerContent">
            <inheritdoc />
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExPopover">
            <summary>
            A Popover can be used to display some content on top of another.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExPopover.ServiceProvider">
            <summary>
            Injected service provider to use when retrieving services.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExPopover.JsRuntime">
            <summary>
            Gets the JSRuntime.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExPopover.SelectorsForIgnoreBlur">
            <summary>
            The selectors to ignore when handling blur events.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExPopover.DisposeEvent">
            <summary>
            Indicates whether the event should be disposed.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExPopover.Animation">
            <summary>
            The animation type.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExPopover.AnimationTimingFunction">
            <summary>
            The animation timing function.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExPopover.AnimationPosition">
            <summary>
            The dialog position.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExPopover.OnBlur">
            <summary>
            Event delegate for handling blur events.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExPopover.OpenChanged">
            <summary>
            Event delegate for handling open state changes.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExPopover.OnInitializedAsync">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExPopover.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExPopover.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <summary>
            Sets the component's parameters asynchronously.
            </summary>
            <param name="parameters">The parameter view.</param>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExPopover.OnOpenChanged(System.Boolean)">
            <summary>
            Handles open state change event.
            </summary>
            <param name="newOpenValue">The new open value.</param>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExPopover.OnParametersSetAsync">
            <inheritdoc />
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExPopover.PopoverClass">
            <summary>
            Gets the popover class.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExPopover.PopoverStyles">
            <summary>
            Gets the popover styles.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExPopover.OnFocusLeft(Microsoft.AspNetCore.Components.Web.PointerEventArgs)">
            <summary>
            Handles focus left event.
            </summary>
            <param name="arg">The pointer event args.</param>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExPopover.Inherited">
            <summary>
            Gets the inherited render fragment.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExPopover.DisposeAsync">
            <summary>
            Disposes of the object.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExPopover.Dispose">
            <summary>
            Disposes of the object.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExPromptDialog">
            <summary>
            MudExPromptDialog Component
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExPromptDialog.MudDialog">
            <summary>
            Cascading parameter of the MudDialogInstance object, which is responsible for the dialog instance.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExPromptDialog.Immediate">
            <summary>
            Boolean value indicating whether prompt should be submitted immediately.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExPromptDialog.SubmitOnEnter">
            <summary>
            Boolean value indicating whether prompt should be submitted when Enter key is pressed.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExPromptDialog.OkText">
            <summary>
            The text of the "Ok" button.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExPromptDialog.OkColor">
            <summary>
            Color for icon
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExPromptDialog.CancelText">
            <summary>
            The text of the "Cancel" button.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExPromptDialog.Value">
            <summary>
            The initial value of the input field.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExPromptDialog.HelperText">
            <summary>
            The Helper text
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExPromptDialog.Message">
            <summary>
            The message to be displayed in the component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExPromptDialog.Icon">
            <summary>
            The icon of the component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExPromptDialog.IconColor">
            <summary>
            Color for icon
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExPromptDialog.Details">
            <summary>
            The list of strings with additional details of the component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExPromptDialog.CanConfirm">
            <summary>
            The function that determines whether the prompt window can be confirmed or not.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExPromptDialog.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExPromptDialog.Submit">
            <summary>
            Method for submitting the prompt window.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExPromptDialog.Cancel">
            <summary>
            Method for cancelling the prompt window.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExPromptDialog.IsValid">
            <summary>
            Method that determines if the input value is a valid entry.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExSelect`1">
            <summary>
            An extended SelectBox component that allows to select multiple items and provides a search function also internally the MudExPopover is used, and you can specify animations as well
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.LocalizerPattern">
            <summary>
            Gets or Sets the Localizer Pattern.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.OuterClass">
            <summary>
            The CSS classes applied to the outer <c>div</c>.
            </summary>
            <remarks>
            Defaults to <c>null</c>.  Multiple classes must be separated by spaces.
            </remarks>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSelect`1.ItemNameRender(`0)">
            <summary>
            Renders the item name
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSelect`1.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.MudExList">
            <summary>
            Reference to the internal MudExList
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.Items">
            <summary>
            The collection of items within this select
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.MudExSelect`1.ItemList">
            <summary>
            Items
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.MudExSelect`1.ValueLookup">
            <summary>
            Lookup for items
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.MudExSelect`1.ShadowLookup">
            <summary>
            Shadow lookup for items
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.CurrentIcon">
            <summary>
            The current Icon
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.Classname">
            <summary>
            Class to be applied
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.InputClassname">
            <summary>
            Class to be applied to the inner input element
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.ChipStyleStr">
            <summary>
            Style to be applied to chip
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.UseItemTemplateForSelection">
            <summary>
            If true the item template is use for the selection list, otherwise its use only if ValuePresenter is ItemContent or Chip
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.HideDropDownWhenReadOnly">
            <summary>
            If true dropdown icon is not shown when ReadOnly is true
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.StyleChip">
            <summary>
            Style applied to chip
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.GroupBy">
            <summary>
             Func to group by items collection
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.GroupingEnabled">
            <summary>
            Set to true to enable grouping with the GroupBy func
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.GroupsSticky">
            <summary>
            Sticky header for item group.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.GroupsNested">
            <summary>
            Set to true to use a expansion panel to nest items.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.GroupsInitiallyExpanded">
            <summary>
            Sets the group's expanded state on popover opening. Works only if GroupsNested is true.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.RenderChipsAdditional">
            <summary>
            Render chips additional to item content above or below the select box
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.SearchString">
            <summary>
            Search string for filtering items
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.HighlightSearch">
            <summary>
            Set to true to highlight matched text in the dropdown list
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.ForMultiple">
            <summary>
            Specify an expression which returns the model's field for which validation messages should be displayed when multiple items are selected.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.AvailableItemsLoadFunc">
            <summary>
            Gets or Sets the function that is used to asynchronously load available items.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.UpdateItemsOnStateChange">
            <summary>
            Gets or Sets a value indicating whether to update items on state change. That means if true the items load func will executed then
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSelect`1.OnParametersSetAsync">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSelect`1.GetAvailableItemsAsync(System.Threading.CancellationToken)">
            <summary>
            returns all available items
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.PopoverAnimation">
            <summary>
            The animation type.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.PopoverAnimationTimingFunction">
            <summary>
            The animation timing function.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.PopoverAnimationPosition">
            <summary>
            The dialog position.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.InputClass">
            <summary>
            User class names for the input, separated by space
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.InputStyle">
            <summary>
            User style names for the input, separated by space
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.OnOpen">
            <summary>
            Fired when dropdown opens.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.OnClose">
            <summary>
            Fired when dropdown closes.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.ChildContent">
            <summary>
            Add the MudSelectItems here
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.ItemTemplate">
            <summary>
            Optional presentation template for items
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.SelectAllTemplate">
            <summary>
            Optional presentation template for items
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.ItemSelectedTemplate">
            <summary>
            Optional presentation template for selected items
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.ItemDisabledTemplate">
            <summary>
            Optional presentation template for disabled items
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.ItemDisabledFunc">
            <summary>
            Function to be invoked when checking whether an item should be disabled or not. Works both with renderfragment and ItemCollection approach.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.TemplateClass">
            <summary>
            Classname for item template or chips.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.SelectValueOnTab">
            <summary>
            If true the active (highlighted) item select on tab key. Designed for only single selection. Default is true.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.NoWrap">
            <summary>
            If false multiline text show. Default is false.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.PopoverClass">
            <summary>
            User class names for the popover, separated by space
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.DisablePopoverPadding">
            <summary>
            User class names for the popover, separated by space
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.DisableSelectedItemStyle">
            <summary>
            If true, selected items doesn't have a selected background color.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.SearchBoxPlaceholder">
            <summary>
            Placeholder for the search box.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.Dense">
            <summary>
            If true, compact vertical padding will be applied to all Select items.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.OpenIcon">
            <summary>
            The Open Select Icon
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.CloseIcon">
            <summary>
            The Close Select Icon
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.ValuePresenter">
            <summary>
            The value presenter.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.SelectAll">
            <summary>
            If set to true and the MultiSelection option is set to true, a "select all" checkbox is added at the top of the list of items.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.SelectAllPosition">
            <summary>
            Sets position of the Select All checkbox
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.SelectAllText">
            <summary>
            Define the text of the Select All option.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.MultiSelectionTextFunc">
            <summary>
            Function to define a customized multiselection text.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.SearchFunc">
            <summary>
            Custom search func for searchbox. If doesn't set, it search with "Contains" logic by default. Passed value and searchString values.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.ItemCollection">
            <summary>
            If not null, select items will automatically created regard to the collection.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.Virtualize">
            <summary>
            Allows virtualization. Only work is ItemCollection parameter is not null.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.ChipCloseable">
            <summary>
            If true, chips has close button and remove from SelectedValues when pressed the close button.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.ChipClass">
            <summary>
            Class to be applied to the chip.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.ChipVariant">
            <summary>
            Variant to be applied to the chip.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.ChipSize">
            <summary>
            Size to be applied to the chip.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.Delimiter">
            <summary>
            Parameter to define the delimited string separator.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.RelativeWidth">
            <summary>
            If true popover width will be the same as the select component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.MaxHeight">
            <summary>
            Sets the maxheight the Select can have when open.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.AnchorOrigin">
            <summary>
            Set the anchor origin point to determen where the popover will open from.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.TransformOrigin">
            <summary>
            Sets the transform origin point for the popover.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.Direction">
            <summary>
            Sets the direction the Select menu should open.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.OffsetX">
            <summary>
            If true, the Select menu will open either before or after the input (left/right).
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.OffsetY">
            <summary>
            If true, the Select menu will open either before or after the input (top/bottom).
            </summary>
            [ExcludeFromCodeCoverage]
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.Strict">
            <summary>
            If true, the Select's input will not show any values that are not defined in the dropdown.
            This can be useful if Value is bound to a variable which is initialized to a value which is not in the list
            and you want the Select to show the label / placeholder instead.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.Clearable">
            <summary>
            Show clear button.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.SearchBox">
            <summary>
            If true, shows a search box for filtering items. Only works with ItemCollection approach.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.SearchBoxAutoFocus">
            <summary>
            If true, the search-box will be focused when the dropdown is opened.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.SearchBoxClearable">
            <summary>
            If true, the search-box has a clear icon.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.SearchBoxVariant">
            <summary>
            Search box text field variant.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.SearchBoxAdornment">
            <summary>
            Search box icon position.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.LockScroll">
            <summary>
            If true, prevent scrolling while dropdown is open.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.OnClearButtonClick">
            <summary>
            Button click event for clear button. Called after text and value has been cleared.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.CheckedIcon">
            <summary>
            Custom checked icon.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.UncheckedIcon">
            <summary>
            Custom unchecked icon.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.IndeterminateIcon">
            <summary>
            Custom indeterminate icon.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.MultiSelection">
            <summary>
            If true, multiple values can be selected via checkboxes which are automatically shown in the dropdown
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.MultiSelectionAlign">
            <summary>
            The MultiSelectionComponent's placement. Accepts Align.Start and Align.End
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.MultiSelectionComponent">
            <summary>
            The component which shows as a MultiSelection check.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.Comparer">
            <summary>
            The Comparer to use for comparing selected values internally.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.ToStringFunc">
            <summary>
            Defines how values are displayed in the drop-down list
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.SelectedValues">
            <summary>
            Set of selected values. If MultiSelection is false it will only ever contain a single value. This property is two-way bind able.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSelect`1.NeedsValueUpdateForNonMultiSelection">
            <summary>
            Setting value extra can cause a dead loop on object edit, so we should only set when necessary
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSelect`1.OnBeforeSelectedChanged(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            is called before the selected items change.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.SelectedListItem">
            <summary>
            SelectedListItem
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.SelectedListItems">
            <summary>
            Selected List Items
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.SelectedValuesChanged">
            <summary>
            Fires when SelectedValues changes.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.SelectedListItemsChanged">
            <summary>
            Should only be used for debugging and development purposes.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSelect`1.SetCustomizedTextAsync(System.String,System.Boolean,System.Collections.Generic.List{`0},System.Func{System.Collections.Generic.List{`0},System.String})">
            <summary>
            Set custom text for the select input field.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSelect`1.UpdateValuePropertyAsync(System.Boolean)">
            <summary>
            Updates the value property.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSelect`1.UpdateTextPropertyAsync(System.Boolean)">
            <summary>
            Updates the text property.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSelect`1.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSelect`1.OnParametersSet">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSelect`1.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSelect`1.ForceUpdateItems">
            <summary>
            Force the update of the items in the select menu.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSelect`1.HandleKeyUp(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs)">
            <summary>
            Handler for the keyup event.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSelect`1.OnLostFocus(Microsoft.AspNetCore.Components.Web.FocusEventArgs)">
            <summary>
            Called when the component lost the focus.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSelect`1.FocusAsync">
            <summary>
            Focuses the component.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSelect`1.BlurAsync">
            <summary>
            Blur the component.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSelect`1.SelectAsync">
            <summary>
            Selects the text of the input.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSelect`1.SelectRangeAsync(System.Int32,System.Int32)">
            <summary>
            Selects the text of the input in the given range.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSelect`1.ToggleMenu">
            <summary>
            Toggle the menu.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSelect`1.OpenMenu">
            <summary>
            Open the menu.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSelect`1.CloseMenu">
            <summary>
            Close the menu.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSelect`1.SelectOption(System.Int32)">
            <summary>
            Selects the given option by index.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSelect`1.SelectOption(System.Object,System.Boolean)">
            <summary>
            Selects the given option.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSelect`1.ForceUpdate">
            <summary>
            Force the component to update.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSelect`1.BeginValidatePublic">
            <summary>
            Begin validation for the component.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSelect`1.Add(MudBlazor.Extensions.Components.MudExSelectItem{`0})">
            <summary>
            Adds the given item to the list of selected items.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSelect`1.Remove(MudBlazor.Extensions.Components.MudExSelectItem{`0})">
            <summary>
            Removes the given item from the list of selected items.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSelect`1.RegisterShadowItem(MudBlazor.Extensions.Components.MudExSelectItem{`0})">
            <summary>
            Registers the given item.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSelect`1.UnregisterShadowItem(MudBlazor.Extensions.Components.MudExSelectItem{`0})">
            <summary>
            Unregisters the given item.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSelect`1.SelectClearButtonClickHandlerAsync(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Extra handler for clearing selection.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSelect`1.ClearAsync">
            <summary>
            Clear the selection
            </summary>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSelect`1.Clear">
            <summary>
            Clear the selection
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelect`1.IsValueInList">
            <summary>
            Returns true if the value is in the list of items.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSelect`1.UpdateIcon">
            <summary>
            Updates the icon.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSelect`1.CheckGenericTypeMatch(System.Object)">
            <summary>
            Ensures that the generic type of the select item matches the generic type of the select.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSelect`1.HasValue(`0)">
            <summary>
            Fixes issue #4328
            Returns true when MultiSelection is true, and it has selected values(Since Value property is not used when MultiSelection=true
            </summary>
            <param name="value"></param>
            <returns>True when component has a value</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSelect`1.ChipClosed``1(MudBlazor.MudChip{``0})">
            <summary>
            Called when a chip is closed.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSelect`1.ValidateValue">
            <inheritdoc />
        </member>
        <member name="T:MudBlazor.Extensions.Components.IMudExSelect">
            <summary>
            Interface for the MudExSelect component.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.IMudExSelect.CheckGenericTypeMatch(System.Object)">
            <summary>
            Ensures that the generic type of the select item matches the generic type of the select.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.IMudExSelect.MultiSelection">
            <summary>
            True when multi selection is enabled.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.IMudExShadowSelect">
            <summary>
            Shadow list identifier
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExSelectItem`1">
            <summary>
            MudExSelectItem is a select item for MudExSelect.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelectItem`1.ListItem">
            <summary>
            List item.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelectItem`1.IsFunctional">
            <summary>
            True when item is only functional.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelectItem`1.Text">
            <summary>
            Text for the item.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelectItem`1.MultiSelection">
            <summary>
            Is multi selection enabled.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSelectItem`1.HandleOnClick">
            <summary>
            Handles the click event.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSelectItem`1.GetDisabledStatus">
            <summary>
            Returns the disabled status.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSelectItem`1.Dispose">
            <summary>
            Disposes the component.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExSelectItemGroup`1">
            <summary>
            Group of items in a select list
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelectItemGroup`1.Stylename">
            <summary>
            Style for the component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelectItemGroup`1.Text">
            <summary>
            A user-defined option that can be selected
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelectItemGroup`1.Nested">
            <summary>
            Set to true to use a expansion panel to nest items
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelectItemGroup`1.InitiallyExpanded">
            <summary>
            Sets the group's expanded state on popover opening. Works only if nested is true.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelectItemGroup`1.Sticky">
            <summary>
            Sticky header for item group. Works only with nested is false.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSelectItemGroup`1.StickyTop">
            <summary>
            The top position of sticky header
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSelectItemGroup`1.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExSlideBar">
            <summary>
            A Component that can used to slide in a ChildContent from the bottom, top , left or right by mouseover.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSlideBar.SelectorsToKeepOpenOnMouseLeave">
            <summary>
            Here you can specify some selectors if any of them available in dom element will not collapse on mouse leave
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSlideBar.Position">
            <summary>
            The position where the MudExSlideBar should start to slide from.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSlideBar.AutoCollapse">
            <summary>
            If true, the MudExSlideBar will collapse automatically when the mouse leaves its bounds.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSlideBar.OpacityNotFocused">
            <summary>
            Determines the opacity of the MudExSlideBar when it is not focused.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSlideBar.RelativeToParent">
            <summary>
            If true, the position of the MudExSlideBar will be relative to the parent element.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSlideBar.IsOpen">
            <summary>
            Gets or sets whether the MudExSlideBar is open.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSlideBar.BackgroundColor">
            <summary>
            The background color of the MudExSlideBar.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSlideBar.BorderColor">
            <summary>
            The border color of the MudExSlideBar.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSlideBar.BorderSize">
            <summary>
            The border size of the MudExSlideBar.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSlideBar.IsOpenChanged">
            <summary>
            An event that is raised when the IsOpen property changes.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSlideBar.ChildContent">
            <summary>
            The child content of the MudExSlideBar.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSlideBar.DisableOpacityChange">
            <summary>
            If true, changes in opacity of the MudExSlideBar are ignored.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSlideBar.HideContentWhenCollapsed">
            <summary>
            If true, the child content of the MudExSlideBar will be hidden when the MudExSlideBar is collapsed.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSlideBar.Size">
            <summary>
            Size depends on position if its set as height or width
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSlideBar.Show">
            <summary>
            Shows the MudExSlideBar.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSlideBar.Hide">
            <summary>
            Hides the MudExSlideBar
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSlideBar.MouseEnter">
            <summary>
            Mouse enter event handling.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSlideBar.MouseLeave">
            <summary>
            Mouse leave event handling.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSlideBar.StyleStr">
            <summary>
            Returns the inline styles of the MudExSlideBar.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSlideBar.BorderDirection">
            <summary>
            The direction where the border of the MudExSlideBar should be drawn.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSlideBar.CssClass">
            <summary>
            Returns the CSS classes of the MudExSlideBar.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExSpeechToTextButton">
            <summary>
            Button component for speech-to-text functionality, allowing for asynchronous recording and processing of speech input.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSpeechToTextButton.UsedDevice">
            <summary>
            Returns the device id to use for recording.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSpeechToTextButton.MaxCaptureTime">
            <summary>
            If set, the recording will stop after the specified time.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSpeechToTextButton.ShowNotificationWhileRecording">
            <summary>
            If this is true a notification toast will be shown while recording.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSpeechToTextButton.IsRecording">
            <summary>
            Indicates whether a recording session is currently active.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSpeechToTextButton.AudioDevice">
            <summary>
            Sets the device for the audio input device to use for recording.
            Leave empty to use the default device.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSpeechToTextButton.DeviceSelection">
            <summary>
            Specify if and how the user is able to select the audio input device.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSpeechToTextButton.DeviceListVariant">
            <summary>
            if <see cref="P:MudBlazor.Extensions.Components.MudExSpeechToTextButton.DeviceSelection"/> is set to <see cref="F:MudBlazor.Extensions.Components.DeviceSelectionType.SelectionList"/> this variant is used for the list of devices to choose from.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSpeechToTextButton.RecordingBorderAnimation">
            <summary>
            If this is true border animation is applied when recording is active, but <see cref="P:MudBlazor.Extensions.Components.MudExSpeechToTextButton.RecordingAnimation"/> has no effect if this is turned on.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSpeechToTextButton.RecordingAnimation">
            <summary>
            This Animation is playing while recording is active, but only if <see cref="P:MudBlazor.Extensions.Components.MudExSpeechToTextButton.RecordingBorderAnimation"/> is false.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSpeechToTextButton.OnRecordingStarted">
            <summary>
            Event triggered when a recording session starts.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSpeechToTextButton.OnRecordingStopped">
            <summary>
            Event triggered when a recording session stops.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSpeechToTextButton.OnRecognized">
            <summary>
            Event triggered when a speech recognition result is obtained.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSpeechToTextButton.ShowSpectrumOnRecording">
            <summary>
            If this is true a spectrum is shown while recording is active but then the <see cref="P:MudBlazor.Extensions.Components.MudExSpeechToTextButton.RecordingIcon"/> has no effect and will not be used.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSpeechToTextButton.RecordingIcon">
            <summary>
            Icon displayed when the recording is active. Defaults to a 'Stop' icon.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSpeechToTextButton.RecordingColor">
            <summary>
            Color of the icon when the recording is active. Defaults to error color.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSpeechToTextButton.Language">
            <summary>
            Language used for speech recognition, defaults to English (US).
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSpeechToTextButton.Continuous">
            <summary>
            Specifies whether the recording should continue listening after capturing a complete phrase.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSpeechToTextButton.InterimResults">
            <summary>
            Specifies whether interim results should be reported during the recognition process.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSpeechToTextButton.BorderAnimationColors">
            <summary>
            Gets or sets the collection of colors to use for the gradient.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSpeechToTextButton.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSpeechToTextButton.OnParametersSetAsync">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSpeechToTextButton.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSpeechToTextButton.OnClickHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSpeechToTextButton.StartRecordingAsync">
            <summary>
            Starts the recording asynchronously.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSpeechToTextButton.StopRecordingAsync">
            <summary>
            Stops the recording asynchronously.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSpeechToTextButton.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="T:MudBlazor.Extensions.Components.DeviceSelectionType">
            <summary>
            Specifies the type of device selection to use for audio input.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.DeviceSelectionType.None">
            <summary>
            No device selection is used and the default system device is used.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.DeviceSelectionType.PopupOnlyOnce">
            <summary>
            If no device is selected, a popup is shown to select the device.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.DeviceSelectionType.PopupEveryTime">
            <summary>
            Always show a popup to select the device.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.DeviceSelectionType.SelectionList">
            <summary>
            Show a selection list of devices to choose from.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExSplitPanel">
            <summary>
            A SplitPanel Component 
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSplitPanel.Left">
            <summary>
            The content that will be displayed on the left or top hand side of the SplitPanel
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSplitPanel.Right">
            <summary>
            The content that will be displayed on the right or bottom hand side of the SplitPanel
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSplitPanel.ColumnLayout">
            <summary>
            Sets whether the SplitPanel component should lay out horizontally
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSplitPanel.Reverse">
            <summary>
            Sets whether the SplitPanel component should reverse its flex direction
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSplitPanel.UpdateSizesInPercentage">
            <summary>
            Sets whether the sizes of the panes should be updated in percentage values rather than pixels
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSplitPanel.Splittable">
            <summary>
            Sets whether the SplitPanel component should be splittable
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSplitPanel.SplitterSize">
            <summary>
            Size of splitter
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSplitPanel.SplitterColor">
            <summary>
            Color of splitter
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSplitPanel.IconRight">
            <summary>
            Specifies the icon for the right direction.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSplitPanel.IconLeft">
            <summary>
            Specifies the icon for the left direction.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSplitPanel.IconUp">
            <summary>
            Specifies the icon for the upward direction.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSplitPanel.IconDown">
            <summary>
            Specifies the icon for the downward direction.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSplitPanel.IsInitiallyCollapsed">
            <summary>
            Indicates if the component is collapsed.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSplitPanel.IsCollapsible">
            <summary>
            Indicates if the component can be collapsed.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSplitPanel.GetStyle">
            <summary>
            Gets the style string for the SplitPanel component
            </summary>
            <returns>The style string containing the flex-direction property value</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSplitPanel.OnAfterRender(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExSplitPanelItem">
            <summary>
            SplitPanelItem for MudExSplitPanel component
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSplitPanelItem.Panel">
            <summary>
            The parent MudExSplitPanel component
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSplitPanelItem.ChildContent">
            <summary>
            The child content of MudExSplitPanelItem component
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSplitPanelItem.MinSize">
            <summary>
            The min size of MudExSplitPanelItem component
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSplitPanelItem.SizeUnit">
            <summary>
            The CSS unit of MudExSplitPanelItem component's size
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSplitPanelItem.GetClass">
            <summary>
            Get the CSS class of MudExSplitPanelItem component
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSplitPanelItem.GetStyle">
            <summary>
            Get the CSS style of MudExSplitPanelItem component
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.SizeResponse">
            <summary>
            Size response for the Splitter
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.SizeResponse.Prev">
            <summary>
            Previous element size
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.SizeResponse.Next">
            <summary>
            Next element size
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.ElementSize">
            <summary>
            Element size
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ElementSize.Width">
            <summary>
            Width of the element
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ElementSize.Height">
            <summary>
            Height of the element
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ElementSize.Bounds">
            <summary>
            Bounding client rect of the element
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExSplitter">
            <summary>
            A Splitter Component
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSplitter.DontApply">
            <summary>
            Set this to true if you don't want to apply changes. 
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSplitter.JsReference">
            <inheritdoc/>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSplitter.ModuleReference">
            <inheritdoc/>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSplitter.ElementReference">
            <inheritdoc/>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSplitter.IsDragging">
            <summary>
            Indicates whether the Splitter is currently dragging
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSplitter.IsDraggingChanged">
            <summary>
            Callback when dragging starts or ends
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSplitter.Dragging">
            <summary>
            Callback when drag size changed
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSplitter.DragEnd">
            <summary>
            Callback when drag ends
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSplitter.NextElement">
            <summary>
            Manually set element for right or down
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSplitter.PrevElement">
            <summary>
            Manually set element for left or up
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSplitter.UpdateSizesInPercentage">
            <summary>
            Indicates whether to update sizes in percentage
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExSplitter.Reverse">
            <summary>
            Indicates whether the Splitter is reversed
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSplitter.OnInitializedAsync">
            <inheritdoc/>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSplitter.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSplitter.OnParametersSetAsync">
            <inheritdoc/>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSplitter.GetJsArguments">
            <inheritdoc/>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSplitter.GetElementSizes">
            <summary>
            Returns current size information for next and preview element
            </summary>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSplitter.Reset">
            <summary>
            Resets to initial
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSplitter.Restore">
            <summary>
            Restores the state to last sizes
            </summary>    
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSplitter.Options">
            <summary>
            Returns options for setting up the Splitter.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSplitter.GetStyle">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSplitter.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExSplitter.DisposeAsync">
            <inheritdoc/>
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExTagField`1">
            <summary>
            MudExTagField is a component that allows the user to enter a list of values as chips.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTagField`1.DuplicateErrorText">
            <summary>
            Set to true to allow duplicates
            </summary>    
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTagField`1.AllowDuplicates">
            <summary>
            Set to true to allow duplicates
            </summary>    
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTagField`1.Values">
            <summary>
            Holds a list of values to be displayed as chips.
            </summary>
            <remarks>Used to store the data of each chip.</remarks>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTagField`1.ValuesChanged">
            <summary>
            Triggered when the list of values changes.
            </summary>
            <remarks>Emits the updated list of values.</remarks>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTagField`1.ChipSize">
            <summary>
            Sets the size of the chips.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTagField`1.SetChipsOnEnter">
            <summary>
            Determines whether chips are set upon pressing the enter key. Default is true.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTagField`1.RenderChipsAdditional">
            <summary>
            Determines where the chips should be rendered relative to the select box.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTagField`1.Delimiters">
            <summary>
            Sets the delimiter characters that will create a new chip.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTagField`1.ClassChip">
            <summary>
            Sets the CSS class for the chip elements.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTagField`1.StyleChip">
            <summary>
            Sets the CSS style for the chip elements.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTagField`1.ChipColor">
            <summary>
            Sets the color of the chips.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTagField`1.ChipVariant">
            <summary>
            Sets the visual variant of the chips.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTagField`1.WrapChips">
            <summary>
            Determines whether the chips should wrap to the next line.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTagField`1.Closeable">
            <summary>
            Determines whether the chips have a close button. Default is true.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTagField`1.MaxChips">
            <summary>
            Sets the maximum number of chips allowed.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTagField`1.IsMouseOverChip">
            <summary>
            Is true when the mouse is over a chip.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTagField`1.IsMouseOverChipChanged">
            <summary>
            Called when the value of IsMouseOverChip changes.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTagField`1.OnChipMouseOver">
            <summary>
            Callback when the mouse enters a chip.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTagField`1.OnChipMouseOut">
            <summary>
            Callback when the mouse leaves a chip.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTagField`1.AutoClear">
            <summary>
            Auto clears the input after adding a chip.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTagField`1.ErrorAnimation">
            <summary>
            The animation type for errors.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTagField`1.AppearanceService">
            <summary>
            Appearance service for applying styles.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTagField`1.StyleBuilder">
            <summary>
            Style builder for building styles.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTagField`1.ChipsMaxWidth">
            <summary>
            Maximum width of the chips.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTagField`1.ChipStyleName">
            <summary>
            Style for the chips.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTagField`1.ChipClassname">
            <summary>
            Class name for the chip elements.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExTagField`1.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExTagField`1.InvokeKeyDownAsync(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExTaskBar">
            <summary>
            MudExTaskBar inherits the MudExSlideBar and provides a tabbar to select non modal dialogs. Just provide <MudExTaskBar/> somewhere in your Layout
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTaskBar.OnlyVisibleWithWindows">
            <summary>
            When true the taskbar is only visible if a window is open
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTaskBar.HasItems">
            <summary>
            Is true if the taskbar contains items
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExTaskBar.OnInitialized">
            <inheritdoc />
        </member>
        <member name="T:MudBlazor.Extensions.Components.DialogData">
            <summary>
            Data for a dialog. This data is provided by the dialog itself and used in DialogTaskBarInfo
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.DialogData.Title">
            <summary>
            The title of the dialog
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.DialogData.Icon">
            <summary>
            Icon for dialog
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.DialogTaskBarInfo">
            <summary>
            DialogTaskBarInfo an item in the task bar
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.DialogTaskBarInfo.#ctor(MudBlazor.IDialogReference,MudBlazor.Extensions.Components.DialogData)">
            <summary>
            Creates a new DialogTaskBarInfo for given dialog
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.DialogTaskBarInfo.DialogData">
            <summary>
            Data for the dialog
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.DialogTaskBarInfo.DialogId">
            <summary>
            Id of the dialog
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.DialogTaskBarInfo.DialogReference">
            <summary>
            Reference to dialog
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExTextField`1">
            <summary>
            MudTextField with additional features
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTextField`1.Classname">
            <summary>
            Classname for the input element
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTextField`1.SubscribeToParentForm2">
            <summary>
            Subscribe to parent form
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTextField`1.InputReference">
            <summary>
            Reference to the input element
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTextField`1.AutoSize">
            <summary>
            If true, automatically resize the height regard to the text. Needs Lines parameter to set more than 1.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTextField`1.DataVisualiser">
            <summary>
            The render fragment for child content.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTextField`1.InputType">
            <summary>
            Type of the input element. It should be a valid HTML5 input type.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTextField`1.Clearable">
            <summary>
            Show clear button.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTextField`1.ShowVisualiser">
            <summary>
            Show visualiser.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTextField`1.OnClearButtonClick">
            <summary>
            Button click event for clear button. Called after text and value has been cleared.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExTextField`1.FocusAsync">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExTextField`1.BlurAsync">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExTextField`1.SelectAsync">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExTextField`1.SelectRangeAsync(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExTextField`1.ResetValueAsync">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExTextField`1.Clear">
            <summary>
            Clear the text field, set Value to default(T) and Text to null
            </summary>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExTextField`1.SetText(System.String)">
            <summary>
            Sets the input text from outside programmatically
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTextField`1.Mask">
            <summary>
            Provide a masking object. Built-in masks are PatternMask, MultiMask, RegexMask and BlockMask
            Note: when Mask is set, TextField will ignore some properties such as Lines, Pattern or HideSpinButtons, OnKeyDown and OnKeyUp, etc.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExTextField`1.OnChange">
            <summary>
            On change event on the input element
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExTextField`1.SetValueAsync(`0,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExTextField`1.SetTextAsync(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:MudBlazor.Extensions.Components.ThemePreset`1">
            <summary>
            Theme preset is just a wrapper class for a name and a theme
            </summary>
            <typeparam name="TTheme"></typeparam>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ThemePreset`1.Id">
            <summary>
            Id of the preset can used if item is stored or loaded from database
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ThemePreset`1.Name">
            <summary>
            Name of the theme
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ThemePreset`1.Description">
            <summary>
            Optional description for the theme
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ThemePreset`1.Theme">
            <summary>
            The Theme itself. 
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ThemePreset`1.#ctor">
            <summary>
            Creates an instance
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ThemePreset`1.#ctor(System.String,`0)">
            <summary>
            Creates an instance with name and theme
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ThemePreset`1.#ctor(System.String,System.String,`0)">
            <summary>
            Creates an instance with name, theme and description
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ThemePreset`1.op_Implicit(MudBlazor.Extensions.Components.ThemePreset{`0})~`0">
            <summary>
            Implicit assignable as TTheme
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.ThemeChangedArgs`1">
            <summary>
            Arguments for theme saved, deleted etc
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ThemeChangedArgs`1.#ctor(MudBlazor.Extensions.Components.ThemePreset{`0},`0)">
            <summary>
            Creates new instance of ThemeChangedArgs
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ThemeChangedArgs`1.Preset">
            <summary>
            The used original Preset
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ThemeChangedArgs`1.Theme">
            <summary>
            The current theme with all changes applied
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ThemeChangedArgs`1.op_Implicit(System.ValueTuple{`0,MudBlazor.Extensions.Components.ThemePreset{`0}})~MudBlazor.Extensions.Components.ThemeChangedArgs{`0}">
            <summary>
            Implicit cast from data tuple
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.ThemePreset">
            <summary>
            Static helper class for creating instances of ThemePresets.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ThemePreset.Create``1(System.String,``0)">
            <summary>
            Creates a new theme preset with a given name and theme.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ThemePreset.Create``1(System.String,System.String,``0)">
            <summary>
            Creates a new theme preset with a given name, description, and theme.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ThemePreset.Create``1(System.Collections.Generic.KeyValuePair{System.String,``0}[])">
            <summary>
            Creates a collection of theme presets from an array of key-value pairs.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ThemePreset.Create``1(System.Tuple{System.String,``0}[])">
            <summary>
            Creates a collection of theme presets from an array of tuples.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ThemePreset.Create``1(System.Tuple{System.String,System.String,``0}[])">
            <summary>
            Creates a collection of theme presets from an array of tuples with descriptions.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ThemePreset.Create``1(System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
            Creates a collection of theme presets from a dictionary.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ThemePreset.Create``1(System.ValueTuple{System.String,``0}[])">
            <summary>
            Creates a collection of theme presets from an array of tuples.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ThemePreset.Create``1(System.Linq.Expressions.Expression{System.Func{``0}}[])">
            <summary>
            Creates a collection of theme presets from an array of expressions.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ThemePreset.Create``1(System.ValueTuple{System.String,System.String,``0}[])">
            <summary>
            Creates a collection of theme presets from an array of tuples with descriptions.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.ThemeEditMode">
            <summary>
            Theme edit mode for MudExThemeEdit
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.ThemeEditMode.Simple">
            <summary>
            Edit mode simple with auto sync for multiple targets
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.ThemeEditMode.Full">
            <summary>
            Every property can be edited manually 
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExThemeEdit`1">
            <summary>
            MudExThemeEdit is a powerful component to edit one ore more themes
            </summary>
            <typeparam name="TTheme"></typeparam>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExThemeEdit`1.PropertiesForSimpleMode">
            <summary>
            Here you can set Property names or full paths and only these properties are available when simple mode is used.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExThemeEdit`1.PaletteColorsToSync">
            <summary>
            Here you can set Properties from Palette that should sync with the other palette.
            If you are in dark only mode and change one of these properties this will applied to the light pallete then as well.
            Default is Primary,Secondary, Tertiary, Info, Success, Warning and error
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExThemeEdit`1.ShowCancelButton">
            <summary>
            if true user can click on cancel
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExThemeEdit`1.ShowSaveButton">
            <summary>
            if true user can click on save
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExThemeEdit`1.AllowImport">
            <summary>
            If true user can import json themes
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExThemeEdit`1.AllowExport">
            <summary>
            If true user can export theme as json
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExThemeEdit`1.AutoSaveRestoreState">
            <summary>
            If true the state of current theme and edit values are stored in storage and restored automatically
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExThemeEdit`1.Theme">
            <summary>
            The theme to edit or current theme from preset
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExThemeEdit`1.InitialTheme">
            <summary>
            The theme that will used for reset
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExThemeEdit`1.EditMode">
            <summary>
            Edit mode (default simple)
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExThemeEdit`1.AllowModeToggle">
            <summary>
            If true user can switch between simple and full edit mode
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExThemeEdit`1.IsDark">
            <summary>
            This bool represents a tri state. True to edit only dark color palette, false to edit only light color palette and null to edit both
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExThemeEdit`1.MetaInformation">
            <summary>
            Object edit Meta 
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExThemeEdit`1.Presets">
            <summary>
            This collection of presets will be used to populate the dropdown for preset selection
            If its allowed user can also add or delete from this collection
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExThemeEdit`1.AllowPresetsEdit">
            <summary>
            If true you can add or delete themes
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExThemeEdit`1.CanDelete">
            <summary>
            If function returns true user can delete theme from param
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExThemeEdit`1.ThemeCreated">
            <summary>
            Raised when new theme is created
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExThemeEdit`1.ThemeDeleted">
            <summary>
            Raised when Theme is deleted
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExThemeEdit`1.ThemeChanged">
            <summary>
            Raised when something in Theme or whole theme has changed
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExThemeEdit`1.EditModeChanged">
            <summary>
            Raised when edit mode changed
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExThemeEdit`1.ThemeSaved">
            <summary>
            Raised when user clicks on save
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExThemeEdit`1.EditCanceled">
            <summary>
            Raised when user clicks on cancel
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExThemeEdit`1.ObjectEditor">
            <summary>
            Reference to MudExObjectEdit
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExThemeEdit`1.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExThemeEdit`1.OnParametersSet">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExThemeEdit`1.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExThemeSelect`1">
            <summary>
            Component to select a theme from a list of themes.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExThemeSelect`1.TypoThemeName">
            <summary>
            Typography for Name
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExThemeSelect`1.TypoThemeDescription">
            <summary>
            Typography for description
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExThemeSelect`1.PreviewImageSize">
            <summary>
            Size of preview image
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExThemeSelect`1.SelectVariant">
            <summary>
            Variant if SelectionMode is ThemeSelectionMode.Select
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExThemeSelect`1.Label">
            <summary>
            Label
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExThemeSelect`1.NameContainerStyle">
            <summary>
            Style for theme name container
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExThemeSelect`1.ItemStyle">
            <summary>
            Style for one theme item
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExThemeSelect`1.ItemClass">
            <summary>
            Class for one theme item
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExThemeSelect`1.SelectionMode">
            <summary>
            Gets or sets the selection mode of the component with a default value of <see cref="F:MudBlazor.Extensions.Components.ThemeSelectionMode.Select"/>.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExThemeSelect`1.PreviewMode">
            <summary>
            Gets or sets the preview mode of the component with a default value of <see cref="F:MudBlazor.Extensions.Components.ThemePreviewMode.BothDiagonal"/>.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExThemeSelect`1.Available">
            <summary>
            Gets or sets the available themes.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExThemeSelect`1.Selected">
            <summary>
            Gets or sets the currently selected theme.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExThemeSelect`1.SelectedChanged">
            <summary>
            Event that is raised when the <see cref="P:MudBlazor.Extensions.Components.MudExThemeSelect`1.Selected"/> property is changed.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExThemeSelect`1.SelectedThemeChanged">
            <summary>
            Event that is raised when the <see cref="P:MudBlazor.Extensions.Components.MudExThemeSelect`1.SelectedTheme"/> property is changed.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExThemeSelect`1.SelectedValueChanged">
            <summary>
            Event that is raised when the <see cref="P:MudBlazor.Extensions.Components.MudExThemeSelect`1.SelectedValue"/> property is changed.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExThemeSelect`1.SelectedValue">
            <summary>
            Gets or sets the selected theme ads object to allow binding to non generic components
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExThemeSelect`1.SelectedTheme">
            <summary>
            Gets or sets the selected theme from the available themes.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExThemeSelect`1.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExThemeSelect`1.PreviewImage(MudBlazor.Extensions.Core.MudExDimension)">
            <summary>
            Returns a preview image of the theme with the specified dimensions.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExThemeSelect`1.PreviewImage(`0,MudBlazor.Extensions.Core.MudExDimension)">
            <summary>
            Returns a preview image of the specified theme with the specified dimensions.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExThemeSelect`1.IsOpen">
            <summary>
            Returns a boolean indicating whether the dropdown menu of the component is open or closed.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExThemeSelect`1.GetThemeNameContainerStyle">
            <summary>
            Returns the style of the container of the theme name label.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.ThemePreviewMode">
            <summary>
            Enumeration representing the preview mode of a theme.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.ThemePreviewMode.DarkOnly">
            <summary>
            Only the dark theme is shown in preview.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.ThemePreviewMode.LightOnly">
            <summary>
            Only the light theme is shown in preview.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.ThemePreviewMode.BothDiagonal">
            <summary>
            Both the dark and light theme are shown in preview as one image sliced diagonal.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.ThemePreviewMode.BothHorizontal">
            <summary>
             Both the dark and light theme are shown in preview as one image sliced horizontal.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.ThemePreviewMode.BothVertical">
            <summary>
             Both the dark and light theme are shown in preview as one image sliced vertical.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.ThemeSelectionMode">
            <summary>
            Enumeration representing the selection mode of a theme.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.ThemeSelectionMode.Select">
            <summary>
            Selection Dropdown
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.ThemeSelectionMode.ItemList">
            <summary>
            ItemList
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExToggleableSearch">
            <summary>
            Simple component to expand a Search field 
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExToggleableSearch.Placeholder">
            <summary>
            The short hint displayed in the input before the user enters a value.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExToggleableSearch.ChipsRight">
            <summary>
            When true chips are placed to the right in the input, if null this is true when toggleable is true.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExToggleableSearch.Label">
            <summary>
            The short hint displayed in the input before the user enters a value.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExToggleableSearch.OnChipMouseOver">
            <summary>
            Callback when the mouse enters a chip.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExToggleableSearch.OnChipMouseOut">
            <summary>
            Callback when the mouse leaves a chip.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExToggleableSearch.ChipColor">
            <summary>
            Sets the color of the chips.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExToggleableSearch.ChipVariant">
            <summary>
            Sets the visual variant of the chips.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExToggleableSearch.MultiSearch">
            <summary>
            Set to true to allow multiple values
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExToggleableSearch.FilterMode">
            <summary>
            The Toggle mode
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExToggleableSearch.Filter">
            <summary>
            The filter value itself
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExToggleableSearch.Filters">
            <summary>
            The filter value itself
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExToggleableSearch.Immediate">
            <summary>
            If true, the input will update the Value immediately on typing.
            If false, the Value is updated only on Enter.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExToggleableSearch.Clearable">
            <summary>
            Show clear button
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExToggleableSearch.SearchIcon">
            <summary>
            Icon 
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExToggleableSearch.SearchButtonColor">
            <summary>
            Color for toggle button
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExToggleableSearch.FilterChanged">
            <summary>
            Event callback if filter changed
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExToggleableSearch.FiltersChanged">
            <summary>
            Event callback if filter changed
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExToggleableSearch.SearchActiveChanged">
            <summary>
            Event callback if filter input is toggled
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExToggleableSearch.SearchActive">
            <summary>
            Search is active
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExToggleableSearch.AutoCloseOnBlur">
            <summary>
             If true and search toggleable and open, search with closed on blur
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExToggleableSearch.OnKeyUp">
            <summary>
            Fired on the KeyUp event.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExToggleableSearch.HasSearchActive">
            <summary>
            Returns true if the search is active
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.UploadableFile">
            <summary>
            Represents a file that can be uploaded. Implements the IUploadableFile interface.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.UploadableFile.#ctor">
            <summary>
            Creates a new instance of UploadableFile.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.UploadableFile.#ctor(Nextended.Core.Contracts.IUploadableFile)">
            <summary>
            Creates a new instance of UploadableFile from an existing instance.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.UploadableFile.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.UploadableFile.Extension">
            <summary>
            Gets or sets the file extension.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.UploadableFile.ContentType">
            <summary>
            Gets or sets the content type of the file.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.UploadableFile.Data">
            <summary>
            Gets or sets the data of the file.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.UploadableFile.Url">
            <summary>
            Gets or sets the URL of the file.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.UploadableFile.Path">
            <summary>
            Path if its came from folder or extracted from zip
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.UploadableFile.LoadTask">
            <summary>
            Task for loading content
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.UploadableFile.Size">
            <summary>
            File size
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.UploadableFile.EnsureDataLoadedAsync(System.Net.Http.HttpClient)">
            <summary>
            Ensure data array is filled
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.UploadableFile.FromUrlAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Creates an instance of UploadableFile from a given URL.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.SelectItemsMode">
            <summary>
            Specifies the mode of selecting items.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.SelectItemsMode.None">
            <summary>
            No selection allowed.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.SelectItemsMode.Single">
            <summary>
            Allows single item selection.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.SelectItemsMode.MultiSelect">
            <summary>
            Allows multi item selection.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.SelectItemsMode.MultiSelectWithCtrlKey">
            <summary>
            Allows multi item selection with Ctrl key.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.SelectItemsMode.ShowPreviewOnClick">
            <summary>
            In this mode the preview will popup on click.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.RestrictionType">
            <summary>
            Specifies the type of MIME type restriction.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.RestrictionType.WhiteList">
            <summary>
            Only MIME types in the list are allowed.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.RestrictionType.BlackList">
            <summary>
            MIME types in the list are not allowed.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.BrowserFileWithPath">
            <summary>
            Browser file with path
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.BrowserFileWithPath.RelativePath">
            <summary>
            Relative path of the file
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.BrowserFileWithPath.Name">
            <summary>
            Name of the file
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.BrowserFileWithPath.Size">
            <summary>
            Size of the file
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.BrowserFileWithPath.ContentType">
            <summary>
            Mime type of the file
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.DropZoneClickAction">
            <summary>
            Action for drop zone click
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.DropZoneClickAction.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.DropZoneClickAction.UploadFile">
            <summary>
            Click to upload
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.DropZoneClickAction.UploadFolder">
            <summary>
            Click to select folder to upload
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.DropZoneClickAction.AddUrl">
            <summary>
            Click to add url
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.DropZoneClickAction.PickFromGoogleDrive">
            <summary>
            Click forces pick from google drive
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.DropZoneClickAction.PickFromOneDrive">
            <summary>
            Click forces pick from one drive
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.DropZoneClickAction.PickFromDropBox">
            <summary>
            Click forces pick from drop box
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.ExternalProviderRendering">
            <summary>
            Represents the mode of rendering of the external provider.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.ExternalProviderRendering.ActionButtons">
            <summary>
            As action buttons.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.ExternalProviderRendering.ActionButtonsNewLine">
            <summary>
            As action buttons on a new line.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.ExternalProviderRendering.Images">
            <summary>
            Render as images.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.ExternalProviderRendering.ImagesNewLine">
            <summary>
            Render as images on a new line.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.ExternalProviderRendering.IntegratedInDialogAsImages">
            <summary>
            Integrate as images in the external add url dialog.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.ExternalProviderRendering.IntegratedInDialogAsButtons">
            <summary>
            Integrate as buttons in the external add url dialog.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExUploadEdit`1">
            <summary>
            A Component to edit and upload a list of files
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.AllowAudioRecording">
            <summary>
            If this is true audio recordings can be uploaded
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.AllowVideoCapture">
            <summary>
            If this is true videos can be captured and uploaded
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.RemoveItemButtonAlwaysRight">
            <summary>
            Set to set the item remove button always to the right independent of the <see cref="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.ActionsAdornment"/>
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.ActionsAdornment">
            <summary>
            Adornment for the action buttons
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.PreviewDialogTitleResolveFunc">
            <summary>
            The title text displayed in the external preview dialog.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.PreviewInIframe">
            <summary>
            Set this to true to preview any file in an iframe
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.PreviewIcon">
            <summary>
            Icon for the preview button
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.PreviewIconColor">
            <summary>
            Color for the preview button
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.CanRemoveItemFunc">
            <summary>
            With this function you can control if an item can be removed
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.ItemIsVisibleFunc">
            <summary>
            With this function you can control if an item should be shown
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.DropZoneTemplate">
            <summary>
            Template can used for the drop zone part if no item is added
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.ItemTemplate">
            <summary>
            Item render template
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.ExternalDialogOptions">
            <summary>
            Dialog options for external file dialog
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.ColoredImagesForExternalFilePicker">
            <summary>
            Set this to true to use the original colors for the images of the external file picker
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.ExternalProviderRendering">
            <summary>
            Specify how external file providers are rendered
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.TextAddExternal">
            <summary>
            The text displayed when picker are rendered in the add external dialog
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.OneDriveClientId">
            <summary>
            Client ID for One Drive
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.GoogleDriveClientId">
            <summary>
            Client ID for Google Drive
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.DropBoxApiKey">
            <summary>
            The API key for DropBox
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.ButtonVariant">
            <summary>
            Variant of action buttons
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.Color">
            <summary>
            Color
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.ButtonColor">
            <summary>
            Color of action buttons
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.ButtonSize">
            <summary>
            Size of action buttons
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.PreviewButtonSize">
            <summary>
            Size of action preview action buttons in item
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.ButtonsJustify">
            <summary>
            Alignment of action buttons
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.CodeBlockTheme">
            <summary>
            Specify Theme to use for code file previews
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.StreamUrlHandling">
            <summary>
            Specify how temporary urls are created
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.ForceNativeRender">
            <summary>
            Set this to true to initially render native and ignore registered IMudExFileDisplay
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.TextDropZone">
            <summary>
            The text displayed in the drop zone. 
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.TextUploadFiles">
            <summary>
            The text for the upload files button.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.TextUploadFile">
            <summary>
            The text for the upload file button.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.TextStartRecording">
            <summary>
            Text for recording audio
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.TextStartVideoCapture">
            <summary>
            Text for video capture
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.TextUploadFolder">
            <summary>
            The text for the upload folder button.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.TextAddUrl">
            <summary>
            The text for the add URL button.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.TextAddFromGoogle">
            <summary>
            The text for google drive picker.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.TextAddFromDropBox">
            <summary>
            The text for drop box picker
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.TextAddFromOneDrive">
            <summary>
            The text for one drive picker
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.TextRemoveAll">
            <summary>
            The text for the remove all button.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.TextErrorDuplicateFile">
            <summary>
            The error text displayed when a file is duplicated.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.TextErrorMaxFileSize">
            <summary>
            The error text displayed when a file exceeds the maximum size.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.TextErrorMaxFileCount">
            <summary>
            The error text displayed when the maximum number of files is exceeded.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.TextErrorExtensionNotAllowed">
            <summary>
            The error text displayed when a file's MIME type is not allowed.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.TextErrorExtensionForbidden">
            <summary>
            The error text displayed when a file's MIME type is forbidden.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.TextErrorMimeTypeNotAllowed">
            <summary>
            The error text displayed when a file's MIME type is not allowed.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.TextErrorMimeTypeForbidden">
            <summary>
            The error text displayed when a file's MIME type is forbidden.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.TextAddUrlTitle">
            <summary>
            The title text displayed in the add URL dialog.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.TextAddUrlMessage">
            <summary>
            The message text displayed in the add URL dialog.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.ErrorAnimation">
            <summary>
            The animation type for errors.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.Label">
            <summary>
            The label displayed in the component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.ReadOnly">
            <summary>
            Defines whether the component is read only.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.HelperText">
            <summary>
            The helper text displayed in the component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.Variant">
            <summary>
            The variant of the component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.AllowRename">
            <summary>
            Defines whether renaming of files is allowed.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.ShowRenameButton">
            <summary>
            If true an extra rename Button is rendered. Only used when <see cref="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.AllowRename"/> is true. 
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.AllowExternalUrl">
            <summary>
            Defines whether adding of external URL is allowed.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.AllowGoogleDrive">
            <summary>
            Defines whether adding of external files from Google Drive is allowed.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.AllowDropBox">
            <summary>
            Defines whether adding of external files from Drop Box is allowed.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.AllowOneDrive">
            <summary>
            Defines whether adding of external files from Microsoft One Drive or office 365 is allowed.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.UploadFieldId">
            <summary>
            The ID of the upload field.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.MimeTypes">
            <summary>
            Mime types for MimeRestrictions based on the <see cref="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.MimeRestrictionType"/> this types are allowed or forbidden.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.Extensions">
            <summary>
            Extensions for FileRestrictions based on the <see cref="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.ExtensionRestrictionType"/> this types are allowed or forbidden.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.MimeRestrictionType">
            <summary>
            The type of the MIME restriction.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.ExtensionRestrictionType">
            <summary>
            The type of the restriction for extensions.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.ExternalPickerImageSize">
            <summary>
            The size for external file picker images that is used if <see cref="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.ExternalProviderRendering"/> is set to Image
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.MaxFileSize">
            <summary>
            The maximum file size allowed in bytes.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.MaxHeight">
            <summary>
            The maximum height allowed.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.MinHeight">
            <summary>
            The minimum height allowed.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.MaxMultipleFiles">
            <summary>
            The maximum number of multiple files allowed.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.UploadRequests">
            <summary>
            The upload requests.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.AllowMultiple">
            <summary>
            Defines whether multiple files can be uploaded.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.AllowFolderUpload">
            <summary>
            Defines whether folder upload is allowed.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.AllowPreview">
            <summary>
            Defines whether preview of the files is allowed.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.ShowFileUploadButton">
            <summary>
            Defines whether the file upload button is displayed.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.ShowFolderUploadButton">
            <summary>
            Defines whether the folder upload button is displayed.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.ShowClearButton">
            <summary>
            Defines whether the clear button is displayed.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.AllowRemovingItems">
            <summary>
            Defines whether removing of items is allowed.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.SelectItemsMode">
            <summary>
            The mode of selecting items.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.AutoExtractArchive">
            <summary>
            Defines whether zip or other archives files should be automatically extracted.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.UploadRequest">
            <summary>
            The current upload request.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.AllowDuplicates">
            <summary>
            Defines whether duplicates are allowed.
            If no duplicates are allowed and this is false please ensure <see cref="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.AutoLoadFileDataBytes"/> is true, otherwise the duplicate check will not work
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.DisplayErrors">
            <summary>
            Defines whether errors should be displayed.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.SelectedRequests">
            <summary>
            The selected requests.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.RemoveErrorAfter">
            <summary>
            The time to remove an error after it has been displayed.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.AutoRemoveError">
            <summary>
            Defines whether errors should be automatically removed.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.RemoveErrorOnChange">
            <summary>
            Defines whether errors should be removed when there are changes.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.AllowDrop">
            <summary>
            Defines whether file drop is allowed.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.OnError">
            <summary>
            The callback that will be invoked when an error occurs.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.UploadRequestsChanged">
            <summary>
            The callback that will be invoked when upload requests change.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.UploadRequestDataLoaded">
            <summary>
            The callback that will be invoked when a added upload request has load his data.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.UploadRequestRemoved">
            <summary>
            The callback that will be invoked when an upload request is removed.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.UploadRequestChanged">
            <summary>
            The callback that will be invoked when an upload request changes.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.SelectedRequestsChanged">
            <summary>
            The callback that will be invoked when selected requests change.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.HandlePreviewContentErrorFunc">
            <summary>
            The function that will be invoked to handle preview content errors.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.ResolvePreviewDataUrlFunc">
            <summary>
            The function that will be invoked to resolve preview data URLs.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.ResolveContentTypeFromUrlFunc">
            <summary>
            The function that will be invoked to resolve content types from URLs.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.ColorizeIcons">
            <summary>
            If true file icons are colored
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.DropZoneClickAction">
            <summary>
            If true icons are colored
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.AutoLoadFileDataBytes">
            <summary>
            If this is true the file will be loaded into memory and the data will be available in the <see cref="P:MudBlazor.Extensions.Components.UploadableFile.Data"/> property.
            Otherwise the data will only be loaded automatically when user clicks preview. 
            If false you can use <see cref="M:MudBlazor.Extensions.Components.UploadableFile.EnsureDataLoadedAsync(System.Net.Http.HttpClient)"/> or <see cref="M:MudBlazor.Extensions.Components.MudExUploadEdit`1.EnsureDataLoadedAsync(System.Net.Http.HttpClient)"/> to load the data manually when needed.
            Notice if you disable this, the duplicate from <see cref="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.AllowDuplicates"/> check will not work
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.LoadFileDataBytesInBackground">
            <summary>
            Set this to false to load the file data before adding the request.
            Otherwise data will be loaded in background.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.ShowProgressForLoadingData">
            <summary>
            If this is true then while the file is loading the progress bar will be shown.
            Otherwise the progress bar will be shown indeterminate what is faster for the UI.
            Notice this only works when <see cref="P:MudBlazor.Extensions.Components.MudExUploadEdit`1.LoadFileDataBytesInBackground"/> is true
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExUploadEdit`1.OnInitializedAsync">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExUploadEdit`1.UpdatePathMappings(MudBlazor.Extensions.Components.BrowserFileWithPath[])">
            <summary>
            Called from JS to update mappings
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExUploadEdit`1.GetJsArguments">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExUploadEdit`1.ImportModuleAndCreateJsAsync">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExUploadEdit`1.HasData">
            <summary>
            Returns whether the component has data.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExUploadEdit`1.HasData(`0)">
            <summary>
            Returns whether the request has data.
            </summary>    
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExUploadEdit`1.EnsureDataLoadedAsync(System.Net.Http.HttpClient)">
            <summary>
            Ensures all data is loaded for all files.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExUploadEdit`1.Add(System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Components.Forms.IBrowserFile})">
            <summary>
            Adds all given files to the upload requests.
            </summary>
            <param name="files"></param>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExUploadEdit`1.Add(Microsoft.AspNetCore.Components.Forms.IBrowserFile)">
            <summary>
            Adds a file to the upload requests.
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExUploadEdit`1.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExUploadEdit`1.Remove(`0,System.Boolean)">
            <summary>
            Removes the given request from the list of requests.
            </summary>
            <param name="request"></param>
            <param name="keepError">if true errors will not removed independent of RemoveErrorOnChange flag</param>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExUploadEdit`1.RemoveAll">
            <summary>
            Removes all requests from the list of requests.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExUploadEdit`1.Upload(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Display Upload File
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExUploadEdit`1.Upload(System.String,Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Display Upload File
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExUploadEdit`1.UploadFolder(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Display Upload folder
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExUploadEdit`1.IsSelected(`0)">
            <summary>
            Returns true if the given request is selected
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExUploadEdit`1.Select(`0,Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Selects the given request.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExUploadEdit`1.GetIcon(`0)">
            <summary>
            returns the recommended icon for the given request
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExUploadEdit`1.GetIconColor(`0)">
            <summary>
            returns the color for the icon
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExUploadEdit`1.Preview(`0,System.String)">
            <summary>
            Previews the given request.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExUploadEdit`1.GetTitleForFileDisplayDialog(`0)">
            <summary>
            Returns the title string for file display dialog
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExUploadEdit`1.ResolvePreviewUrlAsync(`0)">
            <summary>
            resolves the preview data url
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExUploadEdit`1.ResolveContentTypeFromUrlAsync(System.String)">
            <summary>
            Resolve content type
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExUploadEdit`1.HasValue(System.Collections.Generic.IList{`0})">
            <summary>
            Checks if the value is non-null and has elements.
            Used by Required parameter for form validation
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExUploadEdit`1.Add(System.String)">
            <summary>
            Adds a new request from the given URL.
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExUploadEdit`1.Add(`0)">
            <summary>
            Adds a new request
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExUploadEdit`1.DropZoneClick(System.String)">
            <summary>
            Executes the DropZone Click Action
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.CssAndStyleApplyMode">
            <summary>
            Mode how css and style will be applied.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.CssAndStyleApplyMode.BeforeContentRendered">
            <summary>
            The css and style will be applied to the container before the content is rendered.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.CssAndStyleApplyMode.AfterContentRendered">
            <summary>
            The css and style will be applied to the container after the content is rendered.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExVirtualItem">
            <summary>
            An item that only renders the content if it is in the viewport.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExVirtualItem.IsVisibleChanged">
            <summary>
            Is invoked when the visibility of the element changes.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExVirtualItem.ChildContent">
            <summary>
            Child content of component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExVirtualItem.NotIntersectingContent">
            <summary>
            this content is rendered when element is not into view.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExVirtualItem.Virtualize">
            <summary>
            If this is false the <see cref="P:MudBlazor.Extensions.Components.MudExVirtualItem.ChildContent"/>> will always be rendered.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExVirtualItem.CssAndStyleApplyMode">
            <summary>
            The css class that will be applied to the container.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExVirtualItem.NotIntersectingClass">
            <summary>
            the class that will be applied to the container if the content is not intersecting.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExVirtualItem.IntersectingClass">
            <summary>
            the class that will be applied to the container if the content is intersecting.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExVirtualItem.NotIntersectingStyle">
            <summary>
            the style that will be applied to the container if the content is not intersecting.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExVirtualItem.IntersectingStyle">
            <summary>
            the style that will be applied to the container if the content is intersecting.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExVirtualItem.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExVirtualize`1">
            <summary>
            Simple virtualize component that can be disabled with support for fixed items and ItemsProvider.
            </summary>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExVirtualize`1.ItemsPerRow">
            <summary>
            Items per row. Defaults to 1.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExVirtualize`1.IsEnabled">
            <summary>
            Set false to turn off virtualization
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExVirtualize`1.ChildContent">
            <summary>
            Gets or sets the item template for the list.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExVirtualize`1.ItemContent">
            <summary>
            Gets or sets the item template for the list.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExVirtualize`1.Placeholder">
            <summary>
            Gets or sets the template for items that have not yet been loaded in memory.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExVirtualize`1.ItemSize">
            <summary>
            Gets the size of each item in pixels. Defaults to 50px.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExVirtualize`1.ItemsProvider">
            <summary>
            Gets or sets the function providing items to the list.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExVirtualize`1.Items">
            <summary>
            Gets or sets the fixed item source.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExVirtualize`1.OverscanCount">
            <summary>
            Gets or sets a value that determines how many additional items will be rendered
            before and after the visible region. This help to reduce the frequency of rendering
            during scrolling. However, higher values mean that more elements will be present
            in the page.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExVirtualize`1.SpacerElement">
             <summary>
             Gets or sets the tag name of the HTML element that will be used as the virtualization spacer.
             One such element will be rendered before the visible items, and one more after them, using
             an explicit "height" style to control the scroll range.
            
             The default value is "div". If you are placing the <see cref="T:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1"/> instance inside
             an element that requires a specific child tag name, consider setting that here. For example when
             rendering inside a "tbody", consider setting <see cref="P:MudBlazor.Extensions.Components.MudExVirtualize`1.SpacerElement"/> to the value "tr".
             </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExVirtualize`1.OnParametersSetAsync">
            <inheritdoc />
        </member>
        <member name="T:MudBlazor.Extensions.Components.ObjectEdit.IDefaultRenderDataProvider">
            <summary>
            Interface for providing default render data for mudex object edit property
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.IDefaultRenderDataProvider.GetRenderData(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta)">
            <summary>
            Returns the render data 
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.ObjectEdit.IDefaultRenderDataProviderFor`1">
            <summary>
            Interface for providing default render data for mudex object only for a specific type
            This renderdata is only used when that type a property of the current edited object
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.IDefaultRenderDataProviderFor`1.GetPropertyType">
            <summary>
            Returns the type of the property where this render data is used for
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.ObjectEdit.IObjectEditorFor`1">
            <summary>
            Interface for object editor
            Just implement this interface on any component to make it as the default object editor for <typeparam name="T"></typeparam>
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.IObjectEditorFor`1.Value">
            <summary>
            The value to edit. This is the value that will be edited by the component
            It's required that this property has the parameter attribute
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.IObjectEditorFor`1.ValueChanged">
            <summary>
            The value changed event
            It's required that this property has the parameter attribute
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.ObjectEdit.IObjectEditorWithCustomPropertyRenderDataFor`1">
            <summary>
            Interface for object editor
            Just implement this interface on any component to make it as the default object editor for <typeparam name="T"></typeparam>
            Additionally this interface provides a method to get the custom render data for the object editor.
            This is useful when you want to provide custom render data behavior for your editor if it is used as a property of another object.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MudBlazor.Extensions.Components.ObjectEdit.IObjectMetaConfiguration`1">
            <summary>
            Interface for configuring the <see cref="T:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1"/> component for a meta of TModel.
            </summary>
            <typeparam name="TModel">Model type to configure</typeparam>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.IObjectMetaConfiguration`1.ConfigureAsync(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta{`0})">
            <summary>
            Configure meta 
            </summary>
            <param name="meta"></param>
            <returns></returns>
        </member>
        <member name="T:MudBlazor.Extensions.Components.ObjectEdit.MudExCollectionEditor`1">
            <summary>
            Powerful component to edit a set of items and their properties.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExCollectionEditor`1.LocalizerPattern">
            <summary>
            Gets or Sets the Localizer Pattern.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExCollectionEditor`1.Height">
            <summary>
            Gets or sets the height of the collection editor.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExCollectionEditor`1.MaxHeight">
            <summary>
            Gets or sets the maximum height of the collection editor.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExCollectionEditor`1.SizeUnit">
            <summary>
            Gets or sets the size unit for the collection editor.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExCollectionEditor`1.Items">
            <summary>
            Gets or sets the collection of items to be edited.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExCollectionEditor`1.ItemsChanged">
            <summary>
            Gets or sets the event callback for when items are changed.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExCollectionEditor`1.ItemToStringFunc">
            <summary>
            Gets or sets the function to convert an item to a string.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExCollectionEditor`1.TextAdd">
            <summary>
            Gets or sets the text for the add button.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExCollectionEditor`1.TextRemoveAll">
            <summary>
            Gets or sets the text for the remove all button.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExCollectionEditor`1.TextEdit">
            <summary>
            Gets or sets the text for the edit button.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExCollectionEditor`1.Label">
            <summary>
            Gets or sets the label of the collection editor.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExCollectionEditor`1.Virtualize">
            <summary>
            Gets or sets a value indicating whether the collection should be virtualized.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExCollectionEditor`1.ReadOnly">
            <summary>
            Gets or sets a value indicating whether the collection is read-only.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExCollectionEditor`1.HelperText">
            <summary>
            Gets or sets the helper text for the collection editor.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExCollectionEditor`1.ItemIcon">
            <summary>
            Gets or sets the icon for each item in the collection.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExCollectionEditor`1.RemoveIcon">
            <summary>
            Gets or sets the icon for the remove button.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExCollectionEditor`1.RemoveAllIcon">
            <summary>
            Gets or sets the icon for the remove all button.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExCollectionEditor`1.AddIcon">
            <summary>
            Gets or sets the icon for the add button.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExCollectionEditor`1.EditIcon">
            <summary>
            Gets or sets the icon for the edit and preview button.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExCollectionEditor`1.ViewIcon">
            <summary>
            Gets or sets the icon for the view button.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExCollectionEditor`1.Variant">
            <summary>
            Gets or sets the variant of the collection editor.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExCollectionEditor`1.ShowClearButton">
            <summary>
            Gets or sets a value indicating whether to show the clear button.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExCollectionEditor`1.AllowAdd">
            <summary>
            Gets or sets a value indicating whether to allow adding items.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExCollectionEditor`1.AllowEditOrPreview">
            <summary>
            Gets or sets a value indicating whether to allow editing or previewing items.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExCollectionEditor`1.AllowRemove">
            <summary>
            Gets or sets a value indicating whether to allow removing items.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExCollectionEditor`1.DialogOptions">
            <summary>
            Gets or sets the options for the dialog.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExCollectionEditor`1.ToolbarColor">
            <summary>
            Gets or sets the color of the toolbar.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExCollectionEditor`1.ToolbarPosition">
            <summary>
            Gets or sets the position of the toolbar.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExCollectionEditor`1.StickToolbar">
            <summary>
            Gets or sets a value indicating whether the toolbar sticks.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExCollectionEditor`1.StyleToolbar">
            <summary>
            Gets or sets the style of the toolbar.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExCollectionEditor`1.ClassToolbar">
            <summary>
            Gets or sets the class of the toolbar.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExCollectionEditor`1.ToolbarButtonColor">
            <summary>
            Gets or sets the color of the toolbar buttons.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExCollectionEditor`1.FilterMode">
            <summary>
            Gets or sets the filter mode.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExCollectionEditor`1.Filter">
            <summary>
            Gets or sets the filter string.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExCollectionEditor`1.SearchIcon">
            <summary>
            Gets or sets the icon for the search button.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExCollectionEditor`1.GetMudGridStyle">
            <summary>
            Generates the style string for the MudGrid component.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExCollectionEditor`1.GetToolbarStyle">
            <summary>
            Generates the style string for the toolbar.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExCollectionEditor`1.GetStyle">
            <summary>
            Generates the style string for the collection editor.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExCollectionEditor`1.OnParametersSet">
            <summary>
            Called when the parameters are set.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExCollectionEditor`1.Add(`0)">
            <summary>
            Adds an item to the collection.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExCollectionEditor`1.Remove(`0)">
            <summary>
            Removes an item from the collection.
            </summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExCollectionEditor`1.RaiseChanged">
            <summary>
            Raises the ItemsChanged event.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExCollectionEditor`1.RemoveAll">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExCollectionEditor`1.Edit(`0)">
            <summary>
            Edits an item in the collection.
            </summary>
            <param name="item">The item to edit.</param>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExCollectionEditor`1.SetValue(`0,`0)">
            <summary>
            Sets the value of an item in the collection.
            </summary>
            <param name="item">The item to set the value on.</param>
            <param name="newValue">The new value for the item.</param>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExCollectionEditor`1.View(`0)">
            <summary>
            Views an item in the collection.
            </summary>
            <param name="item">The item to view.</param>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExCollectionEditor`1.ItemNameRender(`0)">
            <summary>
            Renders the item name
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExCollectionEditor`1.Add">
            <summary>
            Opens the dialog to add an item to the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MudBlazor.Extensions.Components.ObjectEdit.GroupingStyle">
            <summary>
            Specifies the grouping style.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.ObjectEdit.GroupingStyle.Flat">
            <summary>
            Grouped flat with s line
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.ObjectEdit.GroupingStyle.DefaultExpansionPanel">
            <summary>
            Use MudBlazor expansion panel
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.ObjectEdit.GroupingStyle.Tabs">
            <summary>
            Grouping with tabs
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.ObjectEdit.GroupingStyle.None">
            <summary>
            No grouping style
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.ObjectEdit.PropertyFilterMode">
            <summary>
            Specifies the property filter mode.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.ObjectEdit.PropertyFilterMode.Toggleable">
            <summary>
            Filter is toggable
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.ObjectEdit.PropertyFilterMode.AlwaysVisible">
            <summary>
            Filter is always visible
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.ObjectEdit.PropertyFilterMode.Disabled">
            <summary>
            No filter at all
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.ObjectEdit.ActionAlignment">
            <summary>
            Specifies the alignment of an action.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.ObjectEdit.ActionAlignment.Right">
            <summary>
            Right
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.ObjectEdit.ActionAlignment.Left">
            <summary>
            Left
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.ObjectEdit.RegisteredConfigurationBehaviour">
            <summary>
            Specifies when the registered configurations will applied.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.ObjectEdit.RegisteredConfigurationBehaviour.ExecutedBefore">
            <summary>
            Registered configurations will applied first
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.ObjectEdit.RegisteredConfigurationBehaviour.ExecutedAfter">
            <summary>
            Registered configurations will applied after component property configurations
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.ObjectEdit.RegisteredConfigurationBehaviour.IgnoreRegisteredConfigurations">
            <summary>
            Registered configurations will ignored
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.ObjectEdit.PathDisplayMode">
            <summary>
            Specifies the mode of path display.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.ObjectEdit.PathDisplayMode.DisplaySeparate">
            <summary>
            Display path as separate label
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.ObjectEdit.PathDisplayMode.DisplayAsGroupName">
            <summary>
            Display path as group
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.ObjectEdit.PathDisplayMode.None">
            <summary>
            Do not display the path
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.ObjectEdit.StateTarget">
            <summary>
            Specifies the target for state storage.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.ObjectEdit.StateTarget.LocalStorage">
            <summary>
            Local storage
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.ObjectEdit.StateTarget.SessionStorage">
            <summary>
            Session storage
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.ObjectEdit.DataChangeTrigger">
            <summary>
            Specifies the trigger for data change.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.ObjectEdit.DataChangeTrigger.ExportImport">
            <summary>
            Import or export
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.ObjectEdit.DataChangeTrigger.StateSaveLoad">
            <summary>
            State restored
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.ObjectEdit.ModelForPrimitive`1">
            <summary>
            Represents a model for primitive types.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.ModelForPrimitive`1.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.ModelForPrimitive`1.#ctor(`0)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.ModelForPrimitive`1.Value">
            <summary>
            Gets or sets the value of the model.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.ObjectEdit.ExportedData`1">
            <summary>
            Represents exported data.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.ExportedData`1.Value">
            <summary>
            Gets or sets the value of the exported data.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.ExportedData`1.Json">
            <summary>
            Gets or sets the JSON representation of the exported data.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.ExportedData`1.TriggerdFrom">
            <summary>
            Gets or sets the data change trigger.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.ObjectEdit.ImportedData`1">
            <summary>
            Represents imported data.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.ObjectEdit.ImportData`1">
            <summary>
            Represents data to be imported.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.ObjectEdit.ExportData`1">
            <summary>
            Represents data to be exported.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.ExportData`1.Cancel">
            <summary>
            Gets or sets a value indicating whether the export operation should be cancelled.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1">
            <summary>
            A powerful component to edit an object and its properties.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.ReadOnlyOverwrite">
            <summary>
            If this is set all properties will be readonly depending on the value otherwise the property settings for meta configuration will be used
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.SingleExpand">
            <summary>
            If this is true only one group can be expanded at a time other groups will be collapsed
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.HasRegistrationForWholeObject">
            <summary>
            Returns true if we have a registration for the current object that then uses the registered component
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.IsInternalLoading">
            <summary>
            Is true if currently is an internal Bulk running. Like reset or clear etc.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.InternalToolBarContent">
            <summary>
            ToolBarContent
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.Primitive">
            <summary>
            Is true if the value is a primitive type
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.RenderWithType">
            <summary>
            Returns the type of the registered editor if available
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.MultiSearch">
            <summary>
            Set to true to allow multiple values
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.RenderIgnoredReferences">
            <summary>
            If you need the reference for dynamic ignored fields for example because of Model Validation or resets you should set this to true
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.IsLoading">
            <summary>
            Whether the component should show a loading indicator.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.Value">
            <summary>
            The object to be edited by the component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.AutoUpdateConditions">
            <summary>
            Whether the component should automatically update all registered Conditions.
            Otherwise you need to call UpdateAllConditions on your own.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.Height">
            <summary>
            The height of the component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.MaxHeight">
            <summary>
            The maximum height of the component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.SizeUnit">
            <summary>
            The size unit of the component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.ImportNeedsConfirmation">
            <summary>
            Whether the import action needs confirmation.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.RemoveIgnoredFromImport">
            <summary>
            If this setting is true, all properties which are ignored by meta config will be removed
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.SetPropertiesAfterImport">
            <summary>
            If this setting is true, after import all properties are set instead of full value assignment
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.StateKey">
            <summary>
            The state key for saving and restoring the component state.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.ImportConfirmText">
            <summary>
            The text for confirming an import action.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.ImportCancelText">
            <summary>
            The text for cancelling an import action.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.Virtualize">
            <summary>
            Whether the component should be virtualized.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.LightOverlayLoadingBackground">
            <summary>
            Whether the component should have a light overlay loading background.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.AutoOverlay">
            <summary>
            Whether the component should automatically display an overlay when loading.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.ToolbarButtonColor">
            <summary>
            The color of the toolbar buttons.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.AddScrollToTop">
            <summary>
            Whether the component should add a scroll to top button.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.ScrollToTopPosition">
            <summary>
            The position of the scroll to top button.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.AllowSearch">
            <summary>
            Whether search functionality is enabled.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.AllowExport">
            <summary>
            Whether export functionality is enabled.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.AllowImport">
            <summary>
            Whether import functionality is enabled.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.AutoSaveRestoreState">
            <summary>
            Whether the component should automatically save and restore its state.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.StoreAndReadValueFromUrl">
            <summary>
            If this is true, the component adds the value if possible to url and reads it automatically if its present in Url
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.StateTargetStorage">
            <summary>
            The storage location for saving and restoring component state.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.ExportFileName">
            <summary>
            The file name for exporting the component data.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.ImportIcon">
            <summary>
            The icon to display for the import action.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.SearchIcon">
            <summary>
            The icon to display for the search action.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.ExpandCollapseIcon">
            <summary>
            The icon to display for expanding and collapsing.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.ExportIcon">
            <summary>
            The icon to display for the export action.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.AutoSkeletonOnLoad">
            <summary>
            Whether to automatically display the skeleton loading state on component load.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.ToolbarColor">
            <summary>
            The color of the toolbar.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.GroupLineColor">
            <summary>
            The color of the group lines in the component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.GroupElevation">
            <summary>
            The elevation of the group.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.ToolBarElevation">
            <summary>
            The elevation of the toolbar.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.ToolBarClass">
            <summary>
            A CSS class for the component toolbar.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.ToolBarPaperClass">
            <summary>
            A CSS class for the component toolbar paper.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.StickyToolbar">
            <summary>
            Whether the toolbar should be sticky to the top of the component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.ShowToolbar">
            <summary>
            If false the toolbar will be hidden
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.StickyToolbarTop">
            <summary>
            The positioning CSS value for a sticky toolbar.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.AfterImport">
            <summary>
            Called after the component has imported data.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.AfterExport">
            <summary>
            Called after the component has exported data.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.BeforeExport">
            <summary>
            Called before the component export's data. Provides the export data to be manipulated.
            If you need to change content of parameter to manipulate export data you can do it here
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.BeforeImport">
            <summary>
            Called before the component import's data. Provides the import data to be manipulated.
            Here you can change content of parameter to manipulate import data
            For example you can remove some properties or change the values
            This is called before the import is executed
            importData.Json = "{\"FirstName\": \"Changed Test\"}";
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.ValueChanged">
            <summary>
            Called when the edited value is changed.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.PropertyChanged">
            <summary>
            Called when a property of the edited object is changed.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.MetaInformation">
            <summary>
            The object edit metadata for the component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.ShowPathAsTitleForEachProperty">
            <summary>
            Whether to show the property path as title for each property.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.PathDisplayMode">
            <summary>
            The path display mode for the component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.GroupingStyle">
            <summary>
            The grouping style for the component.
            Here also <see cref="F:MudBlazor.Extensions.Components.ObjectEdit.GroupingStyle.None"/> is possible to disable grouping styles but properties are grouped by groups anyway.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.FilterMode">
            <summary>
            The filter mode for the component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.SearchActiveChanged">
            <summary>
            Event callback if filter input is toggled
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.SearchActive">
            <summary>
            Search is active
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.Filter">
            <summary>
            The filter value for the component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.Filters">
            <summary>
            The filter values for the component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.AutoHideDisabledFields">
            <summary>
            Whether to automatically hide disabled fields.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.DisableGrouping">
            <summary>
            Whether to disable grouping.
            However if you specify a <see cref="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.DefaultGroupName"/> everything is ungrouped under this group name.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.DefaultGroupName">
            <summary>
            The default group name for the component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.DisableFieldFallback">
            <summary>
            Whether to disable field fallback.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.WrapInMudGrid">
            <summary>
            Whether to wrap the component in a MudGrid component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.GroupsCollapsible">
            <summary>
            Whether groups are collapsible in the component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.GlobalResetSettings">
            <summary>
            The global reset settings for the component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.DefaultPropertyResetSettings">
            <summary>
            The default property reset settings for the component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.ResetConfirmationMessageBoxOptions">
            <summary>
            The message box options for reset confirmation.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.ResetConfirmationDialogOptions">
            <summary>
            The dialog options for reset confirmation.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.MetaConfiguration">
            <summary>
            The action to perform for object metadata configuration.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.MetaConfigurationAsync">
            <summary>
            The async action to perform for object metadata configuration.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.ToolBarActionAlignment">
            <summary>
            The alignment of actions in the component toolbar.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.ToolBarContent">
            <summary>
            The content to display in the component toolbar.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.ConfigureBehaviourForRegisteredConfigurations">
            <summary>
            The behaviour how registered Meta and configured meta should applied
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.ConfigureMetaInformationAlways">
            If this setting is true a manual passed MetaInformation will also re configured
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.ErrorMessage">
            <summary>
            Error message to display
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.CustomResetFunction">
            <summary>
            Set this to handle Reset on your own
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.BulkActionRunning">
            <summary>
            Is true if currently is a internal Bulk running. Like reset or clear etc..
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.Editors">
            <summary>
            All rendered editors
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.DynamicComponentRef">
            <summary>
            ExpansionPanels
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.Ref">
            <summary>
            References to editors
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.OnParametersSetAsync">
            <inheritdoc/>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc/>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.UpdateAllConditions">
            <summary>
            Updates all conditions on meta settings
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.UpdateConditions">
            <summary>
            Updates all conditions on meta settings
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.OnFinishedRenderAsync">
            <inheritdoc/>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.GetUpdatedValue">
            <summary>
            Returns the current value independent of disabled value bindings
            </summary>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.Reset">
            <summary>
            Resets all values
            </summary>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.Clear">
            <summary>
            Clears all input fields
            </summary>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.RestoreState(System.Boolean)">
            <summary>
            Restore state if available and returns true if state was restored otherwise false.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.DeleteState">
            <summary>
            Deletes the current state
            </summary>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.SaveState">
            <summary>
            Saves the current state
            </summary>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.Invalidate(System.Boolean)">
            <summary>
            Updates the component state
            </summary>
            <param name="useRefresh"></param>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.RaiseAllEditorsValueChanged">
            <summary>
            Raises the ValueChanged event for all editors
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.RaiseValueChanged">
            <summary>
            Raises the ValueChanged event
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.OnPropertyChange(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta)">
            <summary>
            Called when a property value is changed
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.ConfigureMetaBase(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta{`0})">
            <summary>
            Base meta configuration can be overridden to have meta configuration for all ObjectEditPropertyMeta
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.CreateMetaIfNotExists(System.Nullable{System.Boolean})">
            <summary>
            Creates and updates meta configs
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.Export">
            <summary>
            Exports the current value as json
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.ToJsonAsync">
            <summary>
            Returns the current value as json
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.ToJson">
            <summary>
            Returns the json
            </summary>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEdit`1.LoadFromJson(System.String,System.Boolean)">
            <summary>
            Imports a Json value
            </summary>
            <param name="json"></param>
            <param name="removeIgnoredImports"></param>
            <returns></returns>
        </member>
        <member name="T:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditDialog`1">
            <summary>
            Dialog for editing objects with the MudExObjectEditForm
            </summary>
            <typeparam name="T">Type of object being edited</typeparam>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditDialog`1.OverwriteActionBar">
            <summary>
            If set to true, overwrite the standard action bar of the dialog with custom content.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditDialog`1.MudDialog">
            <summary>
            The MudDialog instance that represents the current dialog instance that is open.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditDialog`1.Gutters">
            <summary>
            If set to true, remove the side padding of the dialog content.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditDialog`1.DialogClass">
            <summary>
            The CSS class to apply to the dialog.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditDialog`1.ContentClass">
            <summary>
            The CSS class to apply to the content area of the dialog.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditDialog`1.DialogFormClass">
            <summary>
            The CSS class to apply to the form element of the dialog.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditDialog`1.ActionsClass">
            <summary>
            The CSS class to apply to the action buttons of the dialog.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditDialog`1.TitleClass">
            <summary>
            The CSS class to apply to the title of the dialog.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditDialog`1.ContentStyle">
            <summary>
            The CSS styles to apply to the content area of the dialog.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditDialog`1.DialogStyle">
            <summary>
            The CSS styles to apply to the dialog.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditDialog`1.DefaultFocus">
            <summary>
            The default focus location for the dialog.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditDialog`1.DialogIcon">
            <summary>
            The name of the icon to display in the dialog header area.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditDialog`1.ErrorAnimation">
            <summary>
            The type of animation to display when an error occurs.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditDialog`1.DialogIconColor">
            <summary>
            The color of the dialog icon for when the dialog is used in relation to a particular color theme.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditDialog`1.CustomSubmit">
            <summary>
            An optional custom submit function.
            If a string is returned that string will be treated as an error message and displayed in place of the default success message.
            Dialog will only closed if result of this function is empty or null otherwise result will displayed as error message.
            This can be useful to keep dialog open until server save is succeeded and not failed
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditDialog`1.OnPropertyChange(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta)">
            <summary>
            Customize what happens when a property changes.
            </summary>
            <param name="property">The property that has been changed.</param>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditDialog`1.OnSubmit(Microsoft.AspNetCore.Components.Forms.EditContext)">
            <summary>
            Called when the form is submitted.
            </summary>
            <param name="ctx">The edit context that represents the current state of the form's data.</param>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditDialog`1.Cancel">
            <summary>
            Called when the Cancel button is clicked.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions">
            <summary>
            Contains extension methods for IServiceCollection to configure MudBlazor services with extensions.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.AddMudExObjectEdit(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.Assembly[])">
            <summary>
            Adds MudBlazor Object edit extensions to the service collection.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithBindingFlags``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta{``0},System.Reflection.BindingFlags)">
            <summary>
             Configures binding flags for property discovery in ObjectEditMeta.
             <typeparam name="T">The type of the object being edited.</typeparam>
             <param name="meta">The ObjectEditMeta instance to configure.</param>
             <param name="flags">The BindingFlags to use for property discovery.</param>
             <returns>The modified ObjectEditMeta instance.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithLabelResolver``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta{``0},System.Func{System.Reflection.PropertyInfo,System.String})">
            <summary>
             Sets a custom function for resolving property labels in ObjectEditMeta.
             <typeparam name="T">The type of the object being edited.</typeparam>
             <param name="meta">The ObjectEditMeta instance to configure.</param>
             <param name="resolverFunc">The function to use for resolving labels.</param>
             <returns>The modified ObjectEditMeta instance.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithDescriptionResolver``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta{``0},System.Func{System.Reflection.PropertyInfo,System.String})">
            <summary>
             Sets a custom function for resolving property descriptions in ObjectEditMeta.
             <typeparam name="T">The type of the object being edited.</typeparam>
             <param name="meta">The ObjectEditMeta instance to configure.</param>
             <param name="resolverFunc">The function to use for resolving descriptions.</param>
             <returns>The modified ObjectEditMeta instance.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithLabelLocalizerPattern``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta{``0},System.String,Microsoft.Extensions.Localization.IStringLocalizer)">
            <summary>
             Applies a localization pattern and optional IStringLocalizer for property labels in ObjectEditMeta.
             <typeparam name="T">The type of the object being edited.</typeparam>
             <param name="meta">The ObjectEditMeta instance to configure.</param>
             <param name="pattern">The pattern to use for label localization.</param>
             <param name="localizer">Optional. The IStringLocalizer to use for localization.</param>
             <returns>The modified ObjectEditMeta instance.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithDescriptionLocalizerPattern``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta{``0},System.String,Microsoft.Extensions.Localization.IStringLocalizer)">
            <summary>
             Applies a localization pattern and optional IStringLocalizer for property descriptions in ObjectEditMeta.
             <typeparam name="T">The type of the object being edited.</typeparam>
             <param name="meta">The ObjectEditMeta instance to configure.</param>
             <param name="pattern">The pattern to use for description localization.</param>
             <param name="localizer">Optional. The IStringLocalizer to use for localization.</param>
             <returns>The modified ObjectEditMeta instance.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithOrdering``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta{``0},System.Func{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta,System.Object},System.Boolean)">
            <summary>
             Configures property ordering for ObjectEditMeta.
             <typeparam name="T">The type of the object being edited.</typeparam>
             <param name="meta">The ObjectEditMeta instance to configure.</param>
             <param name="orderFunc">The function to determine the order of properties.</param>
             <param name="ascending">Indicates if the ordering should be ascending (default) or descending.</param>
             <returns>The modified ObjectEditMeta instance.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithOrderingDescending``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta{``0},System.Func{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta,System.Object})">
            <summary>
             Configures descending property ordering for ObjectEditMeta.
             <typeparam name="T">The type of the object being edited.</typeparam>
             <param name="meta">The ObjectEditMeta instance to configure.</param>
             <param name="orderFunc">The function to determine the order of properties.</param>
             <returns>The modified ObjectEditMeta instance with descending ordering.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WrapEachIn``2(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta{``0},System.Action{``1}[])">
            <summary>
             Wraps each property in a specified wrapper component in ObjectEditMeta.
             <typeparam name="T">The type of the object being edited.</typeparam>
             <typeparam name="TWrapperComponent">The component type to wrap each property with.</typeparam>
             <param name="meta">The ObjectEditMeta instance to configure.</param>
             <param name="options">Configuration actions for the wrapper component.</param>
             <returns>The modified ObjectEditMeta instance.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WrapEachInMudItem``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta{``0},System.Action{MudBlazor.MudItem}[])">
            <summary>
             Wraps each property in a MudItem component in ObjectEditMeta.
             <typeparam name="T">The type of the object being edited.</typeparam>
             <param name="meta">The ObjectEditMeta instance to configure.</param>
             <param name="options">Configuration actions for the MudItem component.</param>
             <returns>The modified ObjectEditMeta instance.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithSeparateLabelComponentOnly``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta{``0})">
            <summary>
             Configures ObjectEditMeta to use separate label components only, for all properties.
             <typeparam name="T">The type of the object being edited.</typeparam>
             <param name="meta">The ObjectEditMeta instance to configure.</param>
             <returns>The modified ObjectEditMeta instance.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithSeparateLabelComponent``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta{``0})">
            <summary>
             Configures ObjectEditMeta to use separate label components for all properties.
             <typeparam name="T">The type of the object being edited.</typeparam>
             <param name="meta">The ObjectEditMeta instance to configure.</param>
             <returns>The modified ObjectEditMeta instance.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithSeparateValidationComponent``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta{``0})">
            <summary>
             Configures ObjectEditMeta to use separate validation components for all properties.
             <typeparam name="T">The type of the object being edited.</typeparam>
             <param name="meta">The ObjectEditMeta instance to configure.</param>
             <returns>The modified ObjectEditMeta instance.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithoutLabel``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta{``0})">
            <summary>
             Configures ObjectEditMeta to exclude labels for all properties.
             <typeparam name="T">The type of the object being edited.</typeparam>
             <param name="meta">The ObjectEditMeta instance to configure.</param>
             <returns>The modified ObjectEditMeta instance.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.ObjectEditMeta``1(``0,System.Action{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta{``0}}[])">
            <summary>
             Creates an ObjectEditMeta instance for a given object with optional configuration actions.
             <typeparam name="T">The type of the object to create the ObjectEditMeta instance for.</typeparam>
             <param name="value">The object to create the ObjectEditMeta instance for.</param>
             <param name="configures">A series of actions to configure the newly created ObjectEditMeta instance.</param>
             <returns>An ObjectEditMeta instance configured according to the provided actions.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.AsReadOnly``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta{``0})">
            <summary>
             Sets all properties within the ObjectEditMeta instance to be read-only.
             <typeparam name="T">The type of the object being edited.</typeparam>
             <param name="meta">The ObjectEditMeta instance to configure.</param>
             <returns>The ObjectEditMeta instance with all properties set as read-only.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.DisableUnderline``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta{``0},System.Boolean)">
            <summary>
             Disables the underline for all properties within the ObjectEditMeta instance.
             <typeparam name="T">The type of the object being edited.</typeparam>
             <param name="meta">The ObjectEditMeta instance to configure.</param>
             <param name="disableUnderline">Indicates whether the underline should be disabled.</param>
             <returns>The ObjectEditMeta instance with all properties having underline disabled.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.IgnoreAllReadOnlyFields``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta{``0})">
            <summary>
             Ignores all read-only fields within the ObjectEditMeta instance.
             <typeparam name="T">The type of the object being edited.</typeparam>
             <param name="meta">The ObjectEditMeta instance to configure.</param>
             <returns>The ObjectEditMeta instance with all read-only fields ignored.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.IgnoreAllInheritedFields``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
             Ignores all inherited fields within the ObjectEditMeta instance, except for those specified.
             <typeparam name="T">The type of the object being edited.</typeparam>
             <param name="meta">The ObjectEditMeta instance to configure.</param>
             <param name="except">Expressions specifying which inherited fields to not ignore.</param>
             <returns>The ObjectEditMeta instance with specified inherited fields not ignored.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.IgnoreAllInheritedFieldsIf``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta{``0},System.Func{``0,System.Boolean},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
             Conditionally ignores all inherited fields within the ObjectEditMeta instance, except for those specified, based on a condition.
             <typeparam name="T">The type of the object being edited.</typeparam>
             <param name="meta">The ObjectEditMeta instance to configure.</param>
             <param name="condition">The condition that determines whether the inherited fields should be ignored.</param>
             <param name="except">Expressions specifying which inherited fields to not ignore if the condition is met.</param>
             <returns>The ObjectEditMeta instance with specified inherited fields conditionally ignored.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.IgnoreAllObsoleteFields``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta{``0})">
            <summary>
             Ignores all fields marked with the Obsolete attribute within the ObjectEditMeta instance.
             <typeparam name="T">The type of the object being edited.</typeparam>
             <param name="meta">The ObjectEditMeta instance to configure.</param>
             <returns>The ObjectEditMeta instance with all obsolete fields ignored.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.GroupByTypes``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta{``0})">
            <summary>
             Groups properties by their types within the ObjectEditMeta instance.
             <typeparam name="T">The type of the object being edited.</typeparam>
             <param name="meta">The ObjectEditMeta instance to configure.</param>
             <returns>The ObjectEditMeta instance with properties grouped by their types.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.GroupByTypes``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta{``0},System.Type[])">
            <summary>
             Groups specified types of properties within the ObjectEditMeta instance.
             <typeparam name="T">The type of the object being edited.</typeparam>
             <param name="meta">The ObjectEditMeta instance to configure.</param>
             <param name="types">The types of properties to group.</param>
             <returns>The ObjectEditMeta instance with specified types of properties grouped.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.IgnoreAllInheritedFieldsIf``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta{``0},System.Func{``0,System.Boolean},System.String[])">
            <summary>
             Conditionally ignores all inherited fields within the ObjectEditMeta instance, except for those specified by name, based on a condition.
             <typeparam name="T">The type of the object being edited.</typeparam>
             <param name="meta">The ObjectEditMeta instance to configure.</param>
             <param name="condition">The condition that determines whether the inherited fields should be ignored.</param>
             <param name="except">Field names that should not be ignored even if the condition is met.</param>
             <returns>The ObjectEditMeta instance with specified inherited fields conditionally ignored.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.IgnoreAllObsoleteFieldsIf``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta{``0},System.Func{``0,System.Boolean})">
            <summary>
             Conditionally ignores all fields marked with the Obsolete attribute within the ObjectEditMeta instance based on a condition.
             <typeparam name="T">The type of the object being edited.</typeparam>
             <param name="meta">The ObjectEditMeta instance to configure.</param>
             <param name="condition">The condition that determines whether the obsolete fields should be ignored.</param>
             <returns>The ObjectEditMeta instance with all obsolete fields conditionally ignored.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.GroupByTypes``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta{``0},System.ValueTuple{System.Type,System.String}[])">
            <summary>
             Groups properties by their types within the ObjectEditMeta instance, with custom names for specified types.
             <typeparam name="T">The type of the object being edited.</typeparam>
             <param name="meta">The ObjectEditMeta instance to configure.</param>
             <param name="types">Tuples specifying the types and their custom group names.</param>
             <returns>The ObjectEditMeta instance with properties grouped by their types and custom names.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.IgnoreAllNotInheritedFields``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta{``0})">
            <summary>
             Ignores all fields that are not inherited (declared directly within the type T) within the ObjectEditMeta instance.
             <typeparam name="T">The type of the object being edited.</typeparam>
             <param name="meta">The ObjectEditMeta instance to configure.</param>
             <returns>The ObjectEditMeta instance with all non-inherited fields ignored.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.IgnoreFields``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta{``0},System.String[])">
            <summary>
             Ignores specific fields by name within the ObjectEditMeta instance.
             <typeparam name="T">The type of the object being edited.</typeparam>
             <param name="meta">The ObjectEditMeta instance to configure.</param>
             <param name="fieldNames">The names of the fields to ignore.</param>
             <returns>The ObjectEditMeta instance with specified fields ignored.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.IgnoreFields``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
             Ignores specific fields by expressions within the ObjectEditMeta instance.
             <typeparam name="T">The type of the object being edited.</typeparam>
             <param name="meta">The ObjectEditMeta instance to configure.</param>
             <param name="fields">Expressions pointing to the fields to ignore.</param>
             <returns>The ObjectEditMeta instance with specified fields ignored.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithPropertyResolverFunc``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta{``0},System.Func{System.Reflection.PropertyInfo,System.Boolean})">
            <summary>
             Adds a custom property resolver function to the ObjectEditMeta instance.
             <typeparam name="T">The type of the object being edited.</typeparam>
             <param name="meta">The ObjectEditMeta instance to configure.</param>
             <param name="shouldHandle">The function that determines whether a property should be handled.</param>
             <returns>The ObjectEditMeta instance with the custom property resolver function added.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.GroupBy``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta{``0},System.Func{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta,System.String})">
            <summary>
             Groups properties within the ObjectEditMeta instance using a custom grouping function.
             <typeparam name="T">The type of the object being edited.</typeparam>
             <param name="meta">The ObjectEditMeta instance to configure.</param>
             <param name="groupFunc">The function to determine the group name for each property.</param>
             <returns>The ObjectEditMeta instance with properties grouped according to the custom function.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.GroupBy``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta{``0},System.Func{System.Reflection.PropertyInfo,System.String})">
            <summary>
             Groups properties within the ObjectEditMeta instance using a custom grouping function based on PropertyInfo.
             <typeparam name="T">The type of the object being edited.</typeparam>
             <param name="meta">The ObjectEditMeta instance to configure.</param>
             <param name="groupFunc">The function to determine the group name based on PropertyInfo.</param>
             <returns>The ObjectEditMeta instance with properties grouped according to the custom function.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.GroupByAttribute``2(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta{``0},System.Func{``1,System.String})">
            <summary>
             Groups properties within the ObjectEditMeta instance based on a specified attribute and a function to determine the group name from that attribute.
             <typeparam name="T">The type of the object being edited.</typeparam>
             <typeparam name="TAttribute">The attribute type to base the grouping on.</typeparam>
             <param name="meta">The ObjectEditMeta instance to configure.</param>
             <param name="groupFunc">The function that extracts the group name from the attribute.</param>
             <returns>The ObjectEditMeta instance with properties grouped based on the specified attribute.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.GroupByCategoryAttribute``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta{``0},System.String)">
            <summary>
             Groups properties within the ObjectEditMeta instance based on the CategoryAttribute, with a fallback group name if the attribute is not present.
             <typeparam name="T">The type of the object being edited.</typeparam>
             <param name="meta">The ObjectEditMeta instance to configure.</param>
             <param name="fallbackGroupName">The fallback group name to use if the CategoryAttribute is not present.</param>
             <returns>The ObjectEditMeta instance with properties grouped by the CategoryAttribute or the fallback name.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.RenderWithMudAutocomplete``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta,``0[])">
            <summary>
             Renders the ObjectEditPropertyMeta with a MudAutocomplete component.
            </summary>
            <typeparam name="TPropertyType">The type of the property.</typeparam>
            <param name="meta">The ObjectEditPropertyMeta to render.</param>
            <param name="items">The array of items for autocomplete suggestions.</param>
            <returns>The rendered ObjectEditPropertyMeta.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.RenderWithMudAutocomplete``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta,System.Boolean,``0[])">
            <summary>
             Renders the ObjectEditPropertyMeta with a MudAutocomplete component.
            </summary>
            <typeparam name="TPropertyType">The type of the property.</typeparam>
            <param name="meta">The ObjectEditPropertyMeta to render.</param>
            <param name="requireValueFromSuggestion">A boolean indicating whether the value must come from the suggestions.</param>
            <param name="items">The array of items for autocomplete suggestions.</param>
            <returns>The rendered ObjectEditPropertyMeta.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.RenderWithMudAutocomplete``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta,System.Boolean,System.Boolean,``0[])">
            <summary>
             Renders the ObjectEditPropertyMeta with a MudAutocomplete component.
            </summary>
            <typeparam name="TPropertyType">The type of the property.</typeparam>
            <param name="meta">The ObjectEditPropertyMeta to render.</param>
            <param name="requireValueFromSuggestion">A boolean indicating whether the value must come from the suggestions.</param>
            <param name="filterSuggestionForValue">A boolean indicating whether to filter suggestions based on the input value.</param>
            <param name="items">The array of items for autocomplete suggestions.</param>
            <returns>The rendered ObjectEditPropertyMeta.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.RenderWithMudAutocomplete``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta,System.Type,System.Boolean,System.Boolean)">
            <summary>
             Renders the ObjectEditPropertyMeta with a MudAutocomplete component.
            </summary>
            <typeparam name="TPropertyType">The type of the property.</typeparam>
            <param name="meta">The ObjectEditPropertyMeta to render.</param>
            <param name="suggestionsFromEnum">The type of enum for suggestions.</param>
            <param name="requireValueFromSuggestion">A boolean indicating whether the value must come from the suggestions.</param>
            <param name="filterSuggestionForValue">A boolean indicating whether to filter suggestions based on the input value.</param>
            <returns>The rendered ObjectEditPropertyMeta.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.RenderWithMudAutocomplete``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta,System.Type,System.Action{MudBlazor.MudAutocomplete{``0}},System.Boolean,System.Boolean)">
            <summary>
             Renders the ObjectEditPropertyMeta with a MudAutocomplete component.
            </summary>
            <typeparam name="TPropertyType">The type of the property.</typeparam>
            <param name="meta">The ObjectEditPropertyMeta to render.</param>
            <param name="suggestionsFromEnum">The type of enum for suggestions.</param>
            <param name="options">Additional options for configuring the MudAutocomplete component.</param>
            <param name="requireValueFromSuggestion">A boolean indicating whether the value must come from the suggestions.</param>
            <param name="filterSuggestionForValue">A boolean indicating whether to filter suggestions based on the input value.</param>
            <returns>The rendered ObjectEditPropertyMeta.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.RenderWithMudAutocomplete``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta,System.Action{MudBlazor.MudAutocomplete{``0}},System.Boolean,System.Boolean,``0[])">
            <summary>
             Renders the ObjectEditPropertyMeta with a MudAutocomplete component.
            </summary>
            <typeparam name="TPropertyType">The type of the property.</typeparam>
            <param name="meta">The ObjectEditPropertyMeta to render.</param>
            <param name="options">Additional options for configuring the MudAutocomplete component.</param>
            <param name="requireValueFromSuggestion">A boolean indicating whether the value must come from the suggestions.</param>
            <param name="filterSuggestionForValue">A boolean indicating whether to filter suggestions based on the input value.</param>
            <param name="suggestionItems">The array of items for autocomplete suggestions.</param>
            <returns>The rendered ObjectEditPropertyMeta.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WrapIn(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta,MudBlazor.Extensions.Components.ObjectEdit.Options.IRenderData)">
            <summary>
             Wraps the ObjectEditPropertyMeta in the specified rendering data.
            </summary>
            <param name="meta">The ObjectEditPropertyMeta to wrap.</param>
            <param name="wrappingRenderData">The rendering data to wrap the ObjectEditPropertyMeta in.</param>
            <returns>The wrapped rendering data.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.RenderWith``3(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta,System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Action{``0},System.Func{``1,``2},System.Func{``2,``1})">
            <summary>
             Renders the ObjectEditPropertyMeta with the specified component, value field, and options.
            </summary>
            <typeparam name="TComponent">The type of the component to render.</typeparam>
            <typeparam name="TPropertyType">The type of the property.</typeparam>
            <typeparam name="TFieldType">The type of the field.</typeparam>
            <param name="meta">The ObjectEditPropertyMeta to render.</param>
            <param name="valueField">The expression representing the value field.</param>
            <param name="options">Additional options for configuring the component.</param>
            <param name="toFieldTypeConverter">A function to convert the property type to the field type.</param>
            <param name="toPropertyTypeConverter">A function to convert the field type to the property type.</param>
            <returns>The rendered ObjectEditPropertyMeta.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.RenderWith``3(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta,System.Linq.Expressions.Expression{System.Func{``0,``2}},``0,System.Func{``1,``2},System.Func{``2,``1})">
            <summary>
             Renders the ObjectEditPropertyMeta with the specified component, value field, and instance for attributes.
            </summary>
            <typeparam name="TComponent">The type of the component to render.</typeparam>
            <typeparam name="TPropertyType">The type of the property.</typeparam>
            <typeparam name="TFieldType">The type of the field.</typeparam>
            <param name="meta">The ObjectEditPropertyMeta to render.</param>
            <param name="valueField">The expression representing the value field.</param>
            <param name="instanceForAttributes">The instance for attributes.</param>
            <param name="toFieldTypeConverter">A function to convert the property type to the field type.</param>
            <param name="toPropertyTypeConverter">A function to convert the field type to the property type.</param>
            <returns>The rendered ObjectEditPropertyMeta.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.RenderWith``3(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta,System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Func{``1,``2},System.Func{``2,``1})">
            <summary>
             Extends ObjectEditPropertyMeta to render a property using a specified component and field converters.
             <typeparam name="TComponent">The component type used for rendering.</typeparam>
             <typeparam name="TPropertyType">The type of the property being edited.</typeparam>
             <typeparam name="TFieldType">The field type used within the rendering component.</typeparam>
             <param name="meta">The ObjectEditPropertyMeta instance to extend.</param>
             <param name="valueField">An expression pointing to the component's field to bind.</param>
             <param name="toFieldTypeConverter">An optional converter from TPropertyType to TFieldType.</param>
             <param name="toPropertyTypeConverter">An optional converter from TFieldType back to TPropertyType.</param>
             <returns>The modified ObjectEditPropertyMeta instance.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.RenderWith``2(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Action{``0})">
            <summary>
             Extends ObjectEditPropertyMeta to render a property using a specified component and additional options.
             <typeparam name="TComponent">The component type used for rendering where TComponent must be a class with a parameterless constructor.</typeparam>
             <typeparam name="TPropertyType">The type of the property being edited.</typeparam>
             <param name="meta">The ObjectEditPropertyMeta instance to extend.</param>
             <param name="valueField">An expression pointing to the component's field to bind.</param>
             <param name="options">An action to configure additional options on the component.</param>
             <returns>The modified ObjectEditPropertyMeta instance.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.RenderWith``2(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta,System.Linq.Expressions.Expression{System.Func{``0,``1}},``0)">
            <summary>
             Extends ObjectEditPropertyMeta to render a property using a specified component and an instance for attribute values.
             <typeparam name="TComponent">The component type used for rendering where TComponent must be a class with a parameterless constructor.</typeparam>
             <typeparam name="TPropertyType">The type of the property being edited.</typeparam>
             <param name="meta">The ObjectEditPropertyMeta instance to extend.</param>
             <param name="valueField">An expression pointing to the component's field to bind.</param>
             <param name="instanceForAttributes">An instance of TComponent for extracting attribute values.</param>
             <returns>The modified ObjectEditPropertyMeta instance.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.RenderWith``2(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
             Extends ObjectEditPropertyMeta to render a property using a specified component.
             <typeparam name="TComponent">The component type used for rendering.</typeparam>
             <typeparam name="TPropertyType">The type of the property being edited.</typeparam>
             <param name="meta">The ObjectEditPropertyMeta instance to extend.</param>
             <param name="valueField">An expression pointing to the component's field to bind.</param>
             <returns>The modified ObjectEditPropertyMeta instance.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.RenderWith``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta,System.Action{``0})">
            <summary>
             Extends ObjectEditPropertyMeta to render a property using a specified component with additional options.
             <typeparam name="TComponent">The component type used for rendering where TComponent must be a class with a parameterless constructor.</typeparam>
             <param name="meta">The ObjectEditPropertyMeta instance to extend.</param>
             <param name="options">An action to configure additional options on the component.</param>
             <returns>The modified ObjectEditPropertyMeta instance.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.RenderWith``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
             Extends ObjectEditPropertyMeta to render a property using a specified component with a dictionary of attributes.
             <typeparam name="TComponent">The component type used for rendering.</typeparam>
             <param name="meta">The ObjectEditPropertyMeta instance to extend.</param>
             <param name="attributes">A dictionary of attributes to apply to the component.</param>
             <returns>The modified ObjectEditPropertyMeta instance.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.RenderWith(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta,System.Type,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
             Extends ObjectEditPropertyMeta to render a property using a specified component type with a dictionary of attributes.
             <param name="meta">The ObjectEditPropertyMeta instance to extend.</param>
             <param name="componentType">The Type of the component used for rendering.</param>
             <param name="attributes">A dictionary of attributes to apply to the component.</param>
             <returns>The modified ObjectEditPropertyMeta instance.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.RenderWith(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta,MudBlazor.Extensions.Components.ObjectEdit.Options.ICustomRenderer)">
            <summary>
             Extends ObjectEditPropertyMeta to render a property using a custom renderer.
             <param name="meta">The ObjectEditPropertyMeta instance to extend.</param>
             <param name="renderer">The custom renderer to use for rendering the property.</param>
             <returns>The modified ObjectEditPropertyMeta instance.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.AsReadOnly(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta,System.Boolean)">
            <summary>
             Marks an ObjectEditPropertyMeta as read-only.
             <param name="meta">The ObjectEditPropertyMeta instance to modify.</param>
             <param name="isReadOnly">Indicates whether the property should be read-only.</param>
             <returns>The modified ObjectEditPropertyMeta instance.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithDefaultFocus(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta)">
            <summary>
             Marks an ObjectEditPropertyMeta to have Auto focus
             <param name="meta">The ObjectEditPropertyMeta instance to modify.</param>
             <returns>The modified ObjectEditPropertyMeta instance.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.DisableUnderline(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta,System.Boolean)">
            <summary>
             Disables the underline for an ObjectEditPropertyMeta.
             <param name="meta">The ObjectEditPropertyMeta instance to modify.</param>
             <param name="disableUnderline">Indicates whether the underline should be disabled.</param>
             <returns>The modified ObjectEditPropertyMeta instance.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.Ignore(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta,System.Boolean)">
            <summary>
             Ignores an ObjectEditPropertyMeta in the UI rendering process.
             <param name="meta">The ObjectEditPropertyMeta instance to modify.</param>
             <param name="ignore">Indicates whether the property should be ignored.</param>
             <returns>The modified ObjectEditPropertyMeta instance.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithResetOptions(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta,System.Boolean,System.String,System.Boolean,System.String)">
            <summary>
             Configures reset options for an ObjectEditPropertyMeta.
             <param name="meta">The ObjectEditPropertyMeta instance to configure.</param>
             <param name="allowReset">Indicates whether resetting is allowed.</param>
             <param name="resetIcon">The icon to use for the reset button.</param>
             <param name="showResetText">Indicates whether to show reset text.</param>
             <param name="resetText">The text to display for the reset option.</param>
             <returns>The modified ObjectEditPropertyMeta instance.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithResetOptions(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta,MudBlazor.Extensions.Components.ObjectEdit.Options.PropertyResetSettings)">
            <summary>
             Applies a provided set of reset settings to an ObjectEditPropertyMeta.
             <param name="meta">The ObjectEditPropertyMeta instance to modify.</param>
             <param name="resetSettings">The reset settings to apply.</param>
             <returns>The modified ObjectEditPropertyMeta instance.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithResetOptions(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta,System.Action{MudBlazor.Extensions.Components.ObjectEdit.Options.PropertyResetSettings})">
            <summary>
             Configures reset options for an ObjectEditPropertyMeta using a delegate.
             <param name="meta">The ObjectEditPropertyMeta instance to modify.</param>
             <param name="resetSettingsAction">A delegate to configure the reset settings.</param>
             <returns>The modified ObjectEditPropertyMeta instance.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.IsResettable(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta,System.Boolean)">
            <summary>
             Sets whether an ObjectEditPropertyMeta is resettable.
             <param name="meta">The ObjectEditPropertyMeta instance to modify.</param>
             <param name="resettable">Indicates whether the property should be resettable.</param>
             <returns>The modified ObjectEditPropertyMeta instance.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.NotResettable(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta)">
            <summary>
             Sets an ObjectEditPropertyMeta as not resettable.
             <param name="meta">The ObjectEditPropertyMeta instance to modify.</param>
             <returns>The modified ObjectEditPropertyMeta instance with reset disabled.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithSettings(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta,System.Action{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaSettings})">
            <summary>
             Applies custom settings to an ObjectEditPropertyMeta.
             <param name="meta">The ObjectEditPropertyMeta instance to modify.</param>
             <param name="settingsAction">A delegate to configure the settings.</param>
             <returns>The modified ObjectEditPropertyMeta instance.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithSeparateLabelComponent(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta)">
            <summary>
             Configures an ObjectEditPropertyMeta to use separate components for the label and the editor.
             <param name="meta">The ObjectEditPropertyMeta instance to modify.</param>
             <returns>The modified ObjectEditPropertyMeta instance with separate label component enabled.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithSeparateValidationComponent(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta)">
            <summary>
             Configures an ObjectEditPropertyMeta to use a separate validation component.
             <param name="meta">The ObjectEditPropertyMeta instance to modify.</param>
             <returns>The modified ObjectEditPropertyMeta instance with separate validation component enabled.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithoutLabel(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta)">
            <summary>
             Configures an ObjectEditPropertyMeta to not display a label.
             <param name="meta">The ObjectEditPropertyMeta instance to modify.</param>
             <returns>The modified ObjectEditPropertyMeta instance without a label.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithSeparateLabelComponentOnly(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta)">
            <summary>
             Configures an ObjectEditPropertyMeta to only use a separate label component.
             <param name="meta">The ObjectEditPropertyMeta instance to modify.</param>
             <returns>The modified ObjectEditPropertyMeta instance with only a separate label component.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithDefaultLabeling(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta)">
            <summary>
             Sets the default labeling behavior for an ObjectEditPropertyMeta.
             <param name="meta">The ObjectEditPropertyMeta instance to modify.</param>
             <returns>The modified ObjectEditPropertyMeta instance with default component labeling.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithOrder(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta,System.Int32)">
            <summary>
             Sets the order of an ObjectEditPropertyMeta.
             <param name="meta">The ObjectEditPropertyMeta instance to modify.</param>
             <param name="order">The order index.</param>
             <returns>The modified ObjectEditPropertyMeta instance with the specified order.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithLabel(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta,System.String)">
            <summary>
             Sets the label for an ObjectEditPropertyMeta.
             <param name="meta">The ObjectEditPropertyMeta instance to modify.</param>
             <param name="label">The label text.</param>
             <returns>The modified ObjectEditPropertyMeta instance with the specified label.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithDescription(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta,System.String)">
            <summary>
             Sets the description for an ObjectEditPropertyMeta.
             <param name="meta">The ObjectEditPropertyMeta instance to modify.</param>
             <param name="description">The description text.</param>
             <returns>The modified ObjectEditPropertyMeta instance with the specified description.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithLabelResolver(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta,System.Func{System.Reflection.PropertyInfo,System.String})">
            <summary>
             Sets a custom label resolver function for an ObjectEditPropertyMeta.
             <param name="meta">The ObjectEditPropertyMeta instance to modify.</param>
             <param name="resolverFunc">The function to resolve label text.</param>
             <returns>The modified ObjectEditPropertyMeta instance with the custom label resolver.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithDescriptionResolver(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta,System.Func{System.Reflection.PropertyInfo,System.String})">
            <summary>
             Sets a custom description resolver function for an ObjectEditPropertyMeta.
             <param name="meta">The ObjectEditPropertyMeta instance to modify.</param>
             <param name="resolverFunc">The function to resolve description text.</param>
             <returns>The modified ObjectEditPropertyMeta instance with the custom description resolver.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithLabelLocalizerPattern(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta,System.String,Microsoft.Extensions.Localization.IStringLocalizer)">
            <summary>
             Sets a label localizer pattern for an ObjectEditPropertyMeta.
             <param name="meta">The ObjectEditPropertyMeta instance to modify.</param>
             <param name="pattern">The pattern to use for localization, e.g., "Label_{0}".</param>
             <param name="localizer">The IStringLocalizer instance to use for localization.</param>
             <returns>The modified ObjectEditPropertyMeta instance with the specified localizer pattern for labels.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithDescriptionLocalizerPattern(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta,System.String,Microsoft.Extensions.Localization.IStringLocalizer)">
            <summary>
             Sets a description localizer pattern for an ObjectEditPropertyMeta.
             <param name="meta">The ObjectEditPropertyMeta instance to modify.</param>
             <param name="pattern">The pattern to use for localization, e.g., "Description_{0}".</param>
             <param name="localizer">The IStringLocalizer instance to use for localization.</param>
             <returns>The modified ObjectEditPropertyMeta instance with the specified localizer pattern for descriptions.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithGroup(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta,System.String)">
            <summary>
             Groups an ObjectEditPropertyMeta under a specified group name.
             <param name="meta">The ObjectEditPropertyMeta instance to modify.</param>
             <param name="groupName">The name of the group.</param>
             <returns>The modified ObjectEditPropertyMeta instance grouped under the specified name.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithGroup(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta,MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaGroupInfo)">
            <summary>
             Groups an ObjectEditPropertyMeta using a specified group info object.
             <param name="meta">The ObjectEditPropertyMeta instance to modify.</param>
             <param name="groupInfo">The ObjectEditPropertyMetaGroupInfo instance to use for grouping.</param>
             <returns>The modified ObjectEditPropertyMeta instance grouped according to the specified group info.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WrapIn``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta,System.Action{``0}[])">
            <summary>
             Wraps the rendering of an ObjectEditPropertyMeta in a specified wrapper component with configuration options.
             <typeparam name="TWrapperComponent">The wrapper component type, which must have a parameterless constructor.</typeparam>
             <param name="meta">The ObjectEditPropertyMeta instance to be wrapped.</param>
             <param name="options">Actions to configure the wrapper component.</param>
             <returns>The modified IRenderData with the wrapper component applied.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WrapInValidationWrapper``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta,System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
             Wraps the rendering of an ObjectEditPropertyMeta in a MudExValidationWrapper with a specified expression for the property.
             <typeparam name="TPropertyType">The property type for validation.</typeparam>
             <param name="meta">The ObjectEditPropertyMeta instance to be wrapped.</param>
             <param name="forExpression">An expression indicating the property to validate.</param>
             <returns>The modified IRenderData with the MudExValidationWrapper applied.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WrapInValidationWrapper``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta,System.Action{MudBlazor.Extensions.Components.MudExValidationWrapper{``0}}[])">
            <summary>
             Wraps the rendering of an ObjectEditPropertyMeta in a MudExValidationWrapper with configuration options.
             <typeparam name="TPropertyType">The property type for validation.</typeparam>
             <param name="meta">The ObjectEditPropertyMeta instance to be wrapped.</param>
             <param name="options">Actions to configure the MudExValidationWrapper.</param>
             <returns>The modified IRenderData with the MudExValidationWrapper applied.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WrapInMudItem(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta,System.Action{MudBlazor.MudItem}[])">
            <summary>
             Wraps the rendering of an ObjectEditPropertyMeta in a MudItem component with configuration options.
             <param name="meta">The ObjectEditPropertyMeta instance to be wrapped.</param>
             <param name="options">Actions to configure the MudItem component.</param>
             <returns>The modified IRenderData with the MudItem component applied.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithAdditionalAttributes(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
             Adds additional attributes to the rendering of an ObjectEditPropertyMeta.
             <param name="meta">The ObjectEditPropertyMeta instance to modify.</param>
             <param name="attributes">Key-value pairs of attributes to add.</param>
             <returns>The modified ObjectEditPropertyMeta instance with additional attributes applied.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithAdditionalAttributes(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta,System.Boolean,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
             Adds additional attributes to the rendering of an ObjectEditPropertyMeta, with an option to overwrite existing attributes.
             <param name="meta">The ObjectEditPropertyMeta instance to modify.</param>
             <param name="overwriteExisting">Indicates whether to overwrite existing attributes.</param>
             <param name="attributes">Key-value pairs of attributes to add.</param>
             <returns>The modified ObjectEditPropertyMeta instance with additional attributes applied.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithAdditionalAttributes(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
             Adds additional attributes to the rendering of an ObjectEditPropertyMeta from a dictionary, with an option to overwrite existing attributes.
             <param name="meta">The ObjectEditPropertyMeta instance to modify.</param>
             <param name="attributes">A dictionary of attributes to add.</param>
             <param name="overwriteExisting">Indicates whether to overwrite existing attributes.</param>
             <returns>The modified ObjectEditPropertyMeta instance with additional attributes applied.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithAdditionalAttributes(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta,System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean)">
            <summary>
             Adds additional attributes to the rendering of an ObjectEditPropertyMeta from a dictionary, with an option to overwrite existing attributes.
             <param name="meta">The ObjectEditPropertyMeta instance to modify.</param>
             <param name="attributes">A dictionary of attributes to add.</param>
             <param name="overwriteExisting">Indicates whether to overwrite existing attributes.</param>
             <returns>The modified ObjectEditPropertyMeta instance with additional attributes applied.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithAdditionalAttribute(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta,System.String,System.Object,System.Boolean)">
            <summary>
             Adds or overwrites a single additional attribute for the rendering of an ObjectEditPropertyMeta.
             <param name="meta">The ObjectEditPropertyMeta instance to modify.</param>
             <param name="key">The key of the attribute to add or overwrite.</param>
             <param name="value">The value of the attribute.</param>
             <param name="overwriteExisting">Indicates whether to overwrite the attribute if it already exists.</param>
             <returns>The modified ObjectEditPropertyMeta instance with the additional attribute applied.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.IgnoreIf``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta,System.Func{``0,System.Boolean})">
            <summary>
             Conditionally ignores an ObjectEditPropertyMeta based on a predicate applied to the model.
             <typeparam name="TModel">The type of the model.</typeparam>
             <param name="meta">The ObjectEditPropertyMeta instance to modify.</param>
             <param name="condition">The condition that determines whether the property should be ignored.</param>
             <returns>The modified ObjectEditPropertyMeta instance with the ignore condition applied.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.AsReadOnlyIf``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta,System.Func{``0,System.Boolean})">
            <summary>
             Conditionally sets an ObjectEditPropertyMeta as read-only based on a predicate applied to the model.
             <typeparam name="TModel">The type of the model.</typeparam>
             <param name="meta">The ObjectEditPropertyMeta instance to modify.</param>
             <param name="condition">The condition that determines whether the property should be read-only.</param>
             <returns>The modified ObjectEditPropertyMeta instance with the read-only condition applied.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithAttributesIf``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta,System.Func{``0,System.Boolean},System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
             Conditionally adds attributes to an ObjectEditPropertyMeta based on a predicate applied to the model.
             <typeparam name="TModel">The type of the model.</typeparam>
             <param name="meta">The ObjectEditPropertyMeta instance to modify.</param>
             <param name="condition">The condition that determines whether the attributes should be added.</param>
             <param name="attributes">The attributes to conditionally add.</param>
             <returns>The modified ObjectEditPropertyMeta instance with the conditional attributes applied.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithAttributesIf``2(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta,System.Func{``0,System.Boolean},System.Action{``1}[])">
            <summary>
             Conditionally adds attributes to an ObjectEditPropertyMeta based on a predicate applied to the model, using configuration options for a specific component.
             <typeparam name="TModel">The type of the model.</typeparam>
             <typeparam name="TComponent">The type of the component for which attributes are being configured.</typeparam>
             <param name="meta">The ObjectEditPropertyMeta instance to modify.</param>
             <param name="condition">The condition that determines whether the attributes should be added.</param>
             <param name="options">The configuration options for the component.</param>
             <returns>The modified ObjectEditPropertyMeta instance with the conditional attributes applied.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithAttributesIf``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta,System.Func{``0,System.Boolean},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
             Conditionally adds attributes to an ObjectEditPropertyMeta based on a predicate applied to the model, from a dictionary of attributes.
             <typeparam name="TModel">The type of the model.</typeparam>
             <param name="meta">The ObjectEditPropertyMeta instance to modify.</param>
             <param name="condition">The condition that determines whether the attributes should be added.</param>
             <param name="attributes">A dictionary of attributes to conditionally add.</param>
             <returns>The modified ObjectEditPropertyMeta instance with the conditional attributes applied.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithAttributesIf``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta,System.Func{``0,System.Boolean},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
             Conditionally adds attributes to an ObjectEditPropertyMeta based on a predicate applied to the model, from a dictionary of attributes.
             <typeparam name="TModel">The type of the model.</typeparam>
             <param name="meta">The ObjectEditPropertyMeta instance to modify.</param>
             <param name="condition">The condition that determines whether the attributes should be added.</param>
             <param name="attributes">A dictionary of attributes to conditionally add.</param>
             <returns>The modified ObjectEditPropertyMeta instance with the conditional attributes applied.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.IgnoreOnExport(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta,System.Boolean)">
            <summary>
             Ignores an ObjectEditPropertyMeta during export operations based on a boolean flag.
             <param name="meta">The ObjectEditPropertyMeta instance to modify.</param>
             <param name="ignore">Indicates whether the property should be ignored on export.</param>
             <returns>The modified ObjectEditPropertyMeta instance with the export ignore setting applied.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.IgnoreOnImport(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta,System.Boolean)">
            <summary>
             Ignores an ObjectEditPropertyMeta during import operations based on a boolean flag.
             <param name="meta">The ObjectEditPropertyMeta instance to modify.</param>
             <param name="ignore">Indicates whether the property should be ignored on import.</param>
             <returns>The modified ObjectEditPropertyMeta instance with the import ignore setting applied.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.IgnoreOnExportAndImport(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta,System.Boolean)">
            <summary>
             Ignores an ObjectEditPropertyMeta during both export and import operations based on a boolean flag.
             <param name="meta">The ObjectEditPropertyMeta instance to modify.</param>
             <param name="ignore">Indicates whether the property should be ignored on both export and import.</param>
             <returns>The modified ObjectEditPropertyMeta instance with both export and import ignore settings applied.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.AsDisabledIf``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta,System.Func{``0,System.Boolean})">
            <summary>
             Conditionally disables an ObjectEditPropertyMeta based on a predicate applied to the model.
             <typeparam name="TModel">The type of the model.</typeparam>
             <param name="meta">The ObjectEditPropertyMeta instance to modify.</param>
             <param name="condition">The condition that determines whether the property should be disabled.</param>
             <returns>The modified ObjectEditPropertyMeta instance with the disabled condition applied.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.OnRendered``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta,System.Action{``0})">
            <summary>
             Sets a callback to be invoked when the component associated with the ObjectEditPropertyMeta is rendered.
             <typeparam name="TComponent">The component type associated with the property.</typeparam>
             <param name="meta">The ObjectEditPropertyMeta instance to modify.</param>
             <param name="onReferenceSet">The action to invoke on component render.</param>
             <returns>The modified ObjectEditPropertyMeta instance with the render callback set.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithAdditionalAttributes``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta,System.Boolean,System.Action{``0}[])">
            <summary>
             Adds additional attributes to the rendering of an ObjectEditPropertyMeta using configuration options for a specific component type, with an option to overwrite existing attributes.
             <typeparam name="TComponent">The component type for which the attributes are being configured, must have a parameterless constructor.</typeparam>
             <param name="meta">The ObjectEditPropertyMeta instance to modify.</param>
             <param name="overwriteExisting">Indicates whether to overwrite existing attributes.</param>
             <param name="options">Configuration options for the component that define the attributes to add.</param>
             <returns>The modified ObjectEditPropertyMeta instance with the additional attributes applied.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithAdditionalAttributes``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta,System.Action{``0}[])">
            <summary>
             Adds additional attributes to the rendering of an ObjectEditPropertyMeta using configuration options for a specific component type.
             <typeparam name="TComponent">The component type for which the attributes are being configured, must have a parameterless constructor.</typeparam>
             <param name="meta">The ObjectEditPropertyMeta instance to modify.</param>
             <param name="options">Configuration options for the component that define the attributes to add.</param>
             <returns>The modified ObjectEditPropertyMeta instance with the additional attributes applied.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithAdditionalAttributes``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta,``0,System.Boolean)">
            <summary>
             Adds additional attributes to the rendering of an ObjectEditPropertyMeta using a specific component instance, potentially with an option to overwrite existing attributes. This method allows for the dynamic generation of attributes based on the state or properties of the provided component instance.
             <typeparam name="TComponent">The component type for which the attributes are being configured, must have a parameterless constructor.</typeparam>
             <param name="meta">The ObjectEditPropertyMeta instance to modify.</param>
             <param name="instanceForAttributes">The instance of TComponent from which to derive the attributes.</param>
             <param name="overwriteExisting">Optional. Indicates whether to overwrite existing attributes. Defaults to false if not specified.</param>
             <returns>The modified ObjectEditPropertyMeta instance with the additional attributes applied.</returns>
             Note: This method signature seems to be incomplete as provided, so the description is based on the visible pattern and assumption of intended functionality.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithEditConfirmation(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta,System.String,MudBlazor.Extensions.Components.ObjectEdit.Options.AdditionalComponentRenderPosition)">
            <summary>
            Protects the property from being edited by the user until a confirmation is received.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithEditConfirmation(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta,MudBlazor.Extensions.Components.ObjectEdit.Options.IConfirmationProtection,MudBlazor.Extensions.Components.ObjectEdit.Options.AdditionalComponentRenderPosition)">
            <summary>
            Protects the property from being edited by the user until a confirmation is received.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.RenderWith``4(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0},System.Linq.Expressions.Expression{System.Func{``1,``3}},System.Action{``1},System.Func{``2,``3},System.Func{``3,``2})">
            <summary>
             Configures a property to be rendered with a specified component, allowing for customization of the component's value field, options, and type converters between the property and field types.
             <typeparam name="TModel">The model type.</typeparam>
             <typeparam name="TComponent">The component type.</typeparam>
             <typeparam name="TPropertyType">The property type.</typeparam>
             <typeparam name="TFieldType">The field type within the component.</typeparam>
             <param name="meta">The ObjectEditPropertyMetaOf instance for the model.</param>
             <param name="valueField">The expression selecting the field within the component.</param>
             <param name="options">Action to configure the component instance.</param>
             <param name="toFieldTypeConverter">Optional converter from property to field type.</param>
             <param name="toPropertyTypeConverter">Optional converter from field to property type.</param>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.RenderWith``4(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0},System.Linq.Expressions.Expression{System.Func{``1,``3}},``1,System.Func{``2,``3},System.Func{``3,``2})">
            <summary>
             Configures a property to be rendered with a specified component using an instance for attributes, allowing for type conversions between the property and component field types.
             <typeparam name="TModel">The model type.</typeparam>
             <typeparam name="TComponent">The component type.</typeparam>
             <typeparam name="TPropertyType">The property type.</typeparam>
             <typeparam name="TFieldType">The field type within the component.</typeparam>
             <param name="meta">The ObjectEditPropertyMetaOf instance for the model.</param>
             <param name="valueField">The expression selecting the field within the component.</param>
             <param name="instanceForAttributes">The component instance for defining attributes.</param>
             <param name="toFieldTypeConverter">Optional converter from property to field type.</param>
             <param name="toPropertyTypeConverter">Optional converter from field to property type.</param>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.RenderWith``4(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0},System.Linq.Expressions.Expression{System.Func{``1,``3}},System.Func{``2,``3},System.Func{``3,``2})">
            <summary>
             Configures a property to be rendered with a specified component, specifying only the value field and optional type converters, without custom options.
             <typeparam name="TModel">The model type.</typeparam>
             <typeparam name="TComponent">The component type.</typeparam>
             <typeparam name="TPropertyType">The property type.</typeparam>
             <typeparam name="TFieldType">The field type within the component.</typeparam>
             <param name="meta">The ObjectEditPropertyMetaOf instance for the model.</param>
             <param name="valueField">The expression selecting the field within the component.</param>
             <param name="toFieldTypeConverter">Optional converter from property to field type.</param>
             <param name="toPropertyTypeConverter">Optional converter from field to property type.</param>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.RenderWith``3(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Action{``1})">
            <summary>
             Configures a property to be rendered with a specified component, specifying the value field and an action to customize the component.
             <typeparam name="TModel">The model type.</typeparam>
             <typeparam name="TComponent">The component type.</typeparam>
             <typeparam name="TPropertyType">The property type.</typeparam>
             <param name="meta">The ObjectEditPropertyMetaOf instance for the model.</param>
             <param name="valueField">The expression selecting the field within the component.</param>
             <param name="options">Action to configure the component instance.</param>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.RenderWith``3(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0},System.Linq.Expressions.Expression{System.Func{``1,``2}},``1)">
            <summary>
             Configures a property to be rendered with a specified component using an instance for attributes, without needing type conversions.
             <typeparam name="TModel">The model type.</typeparam>
             <typeparam name="TComponent">The component type.</typeparam>
             <typeparam name="TPropertyType">The property type.</typeparam>
             <param name="meta">The ObjectEditPropertyMetaOf instance for the model.</param>
             <param name="valueField">The expression selecting the field within the component.</param>
             <param name="instanceForAttributes">The component instance for defining attributes.</param>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.RenderWith``3(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
            <summary>
             Configures a property to be rendered with a specified component, specifying only the value field without additional options or type conversions.
             <typeparam name="TModel">The model type.</typeparam>
             <typeparam name="TComponent">The component type.</typeparam>
             <typeparam name="TPropertyType">The property type.</typeparam>
             <param name="meta">The ObjectEditPropertyMetaOf instance for the model.</param>
             <param name="valueField">The expression selecting the field within the component.</param>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.RenderWith``2(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0},System.Action{``1})">
            <summary>
             Configures a property to be rendered with a specified component, allowing for customization through an action.
             <typeparam name="TModel">The model type.</typeparam>
             <typeparam name="TComponent">The component type to render with.</typeparam>
             <param name="meta">The ObjectEditPropertyMetaOf instance for the model.</param>
             <param name="options">Action to configure the component instance.</param>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.RenderWith``2(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
             Configures a property to be rendered with a specified component, optionally using provided attributes.
             <typeparam name="TModel">The model type.</typeparam>
             <typeparam name="TComponent">The component type to render with.</typeparam>
             <param name="meta">The ObjectEditPropertyMetaOf instance for the model.</param>
             <param name="attributes">Optional dictionary of attributes to apply to the component.</param>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.RenderWith``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0},System.Type,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
             Configures a property to be rendered with a component of a specified type, optionally using provided attributes.
             <typeparam name="TModel">The model type.</typeparam>
             <param name="meta">The ObjectEditPropertyMetaOf instance for the model.</param>
             <param name="componentType">The type of the component to render with.</param>
             <param name="attributes">Optional dictionary of attributes to apply to the component.</param>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.RenderWith``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0},MudBlazor.Extensions.Components.ObjectEdit.Options.ICustomRenderer)">
            <summary>
             Configures a property to be rendered using a custom renderer.
             <typeparam name="TModel">The model type.</typeparam>
             <param name="meta">The ObjectEditPropertyMetaOf instance for the model.</param>
             <param name="renderer">The custom renderer to use.</param>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.AsReadOnly``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0},System.Boolean)">
            <summary>
             Marks a property as read-only, optionally based on a condition.
             <typeparam name="TModel">The model type.</typeparam>
             <param name="meta">The ObjectEditPropertyMetaOf instance for the model.</param>
             <param name="isReadOnly">Indicates whether the property is read-only.</param>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.DisableUnderline``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0},System.Boolean)">
            <summary>
             Disables the underline feature of a component, optionally based on a condition.
             <typeparam name="TModel">The model type.</typeparam>
             <param name="meta">The ObjectEditPropertyMetaOf instance for the model.</param>
             <param name="disableUnderline">Indicates whether to disable the underline.</param>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.Ignore``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0},System.Boolean)">
            <summary>
             Ignores a property for editing purposes, optionally based on a condition.
             <typeparam name="TModel">The model type.</typeparam>
             <param name="meta">The ObjectEditPropertyMetaOf instance for the model.</param>
             <param name="ignore">Indicates whether the property should be ignored.</param>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithResetOptions``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0},System.Boolean,System.String,System.Boolean,System.String)">
            <summary>
             Configures reset options for a property, allowing for customization of reset behavior.
             <typeparam name="TModel">The model type.</typeparam>
             <param name="meta">The ObjectEditPropertyMetaOf instance for the model.</param>
             <param name="allowReset">Indicates whether resetting is allowed.</param>
             <param name="resetIcon">The icon used for the reset button.</param>
             <param name="showResetText">Indicates whether to show text next to the reset icon.</param>
             <param name="resetText">The text to display next to the reset icon, if applicable.</param>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithResetOptions``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0},MudBlazor.Extensions.Components.ObjectEdit.Options.PropertyResetSettings)">
            <summary>
             Configures reset options for a property using a PropertyResetSettings object.
             <typeparam name="TModel">The model type.</typeparam>
             <param name="meta">The ObjectEditPropertyMetaOf instance for the model.</param>
             <param name="resetSettings">The reset settings to apply.</param>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithResetOptions``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0},System.Action{MudBlazor.Extensions.Components.ObjectEdit.Options.PropertyResetSettings})">
            <summary>
            Configures reset options for an ObjectEditPropertyMetaOf instance using a specified settings action.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="meta">The ObjectEditPropertyMetaOf instance to configure.</param>
            <param name="resetSettingsAction">An action to configure the reset settings.</param>
            <returns>The modified ObjectEditPropertyMetaOf instance.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.IsResettable``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0},System.Boolean)">
            <summary>
            Marks an ObjectEditPropertyMetaOf instance as resettable.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="meta">The ObjectEditPropertyMetaOf instance to modify.</param>
            <param name="resettable">A boolean indicating if the property is resettable. Defaults to true.</param>
            <returns>The modified ObjectEditPropertyMetaOf instance.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.NotResettable``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0})">
            <summary>
            Marks an ObjectEditPropertyMetaOf instance as not resettable.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="meta">The ObjectEditPropertyMetaOf instance to modify.</param>
            <returns>The modified ObjectEditPropertyMetaOf instance.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithSettings``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0},System.Action{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaSettings})">
            <summary>
            Applies custom settings to an ObjectEditPropertyMetaOf instance.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="meta">The ObjectEditPropertyMetaOf instance to configure.</param>
            <param name="settingsAction">An action to configure the settings.</param>
            <returns>The modified ObjectEditPropertyMetaOf instance.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithSeparateLabelComponent``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0})">
            <summary>
            Configures an ObjectEditPropertyMetaOf instance to use a separate label component.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="meta">The ObjectEditPropertyMetaOf instance to configure.</param>
            <returns>The modified ObjectEditPropertyMetaOf instance.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithSeparateValidationComponent``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0})">
            <summary>
            Configures an ObjectEditPropertyMetaOf instance to use a separate validation component.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="meta">The ObjectEditPropertyMetaOf instance to configure.</param>
            <returns>The modified ObjectEditPropertyMetaOf instance.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithoutLabel``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0})">
            <summary>
            Configures an ObjectEditPropertyMetaOf instance to have no label.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="meta">The ObjectEditPropertyMetaOf instance to configure.</param>
            <returns>The modified ObjectEditPropertyMetaOf instance.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithSeparateLabelComponentOnly``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0})">
            <summary>
            Configures an ObjectEditPropertyMetaOf instance to use a separate label component only, without integrating it into the main component.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="meta">The ObjectEditPropertyMetaOf instance to configure.</param>
            <returns>The modified ObjectEditPropertyMetaOf instance.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithDefaultLabeling``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0})">
            <summary>
            Configures an ObjectEditPropertyMetaOf instance to use default component labeling.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="meta">The ObjectEditPropertyMetaOf instance to configure.</param>
            <returns>The modified ObjectEditPropertyMetaOf instance.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithOrder``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0},System.Int32)">
            <summary>
            Sets the order of an ObjectEditPropertyMetaOf instance.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="meta">The ObjectEditPropertyMetaOf instance to modify.</param>
            <param name="order">The order to set.</param>
            <returns>The modified ObjectEditPropertyMetaOf instance.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithLabel``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0},System.String)">
            <summary>
            Sets a static label for an ObjectEditPropertyMetaOf instance.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="meta">The ObjectEditPropertyMetaOf instance to modify.</param>
            <param name="label">The label to set.</param>
            <returns>The modified ObjectEditPropertyMetaOf instance.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithDescription``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0},System.String)">
            <summary>
            Sets a static description for an ObjectEditPropertyMetaOf instance.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="meta">The ObjectEditPropertyMetaOf instance to modify.</param>
            <param name="description">The description to set.</param>
            <returns>The modified ObjectEditPropertyMetaOf instance.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithLabelResolver``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0},System.Func{System.Reflection.PropertyInfo,System.String})">
            <summary>
            Sets a dynamic label resolver for an ObjectEditPropertyMetaOf instance.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="meta">The ObjectEditPropertyMetaOf instance to modify.</param>
            <param name="resolverFunc">The function to resolve labels dynamically.</param>
            <returns>The modified ObjectEditPropertyMetaOf instance.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithDescriptionResolver``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0},System.Func{System.Reflection.PropertyInfo,System.String})">
            <summary>
            Sets a dynamic description resolver for an ObjectEditPropertyMetaOf instance.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="meta">The ObjectEditPropertyMetaOf instance to modify.</param>
            <param name="resolverFunc">The function to resolve descriptions dynamically.</param>
            <returns>The modified ObjectEditPropertyMetaOf instance.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithLabelLocalizerPattern``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0},System.String,Microsoft.Extensions.Localization.IStringLocalizer)">
            <summary>
            Configures localization patterns for labels in an ObjectEditPropertyMetaOf instance.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="meta">The ObjectEditPropertyMetaOf instance to configure.</param>
            <param name="pattern">The pattern to use for label localization. Defaults to "Label_{0}".</param>
            <param name="localizer">The IStringLocalizer instance to use for localization. Optional.</param>
            <returns>The modified ObjectEditPropertyMetaOf instance.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithDescriptionLocalizerPattern``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0},System.String,Microsoft.Extensions.Localization.IStringLocalizer)">
            <summary>
            Configures localization patterns for descriptions in an ObjectEditPropertyMetaOf instance.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="meta">The ObjectEditPropertyMetaOf instance to configure.</param>
            <param name="pattern">The pattern to use for description localization. Defaults to "Description_{0}".</param>
            <param name="localizer">The IStringLocalizer instance to use for localization. Optional.</param>
            <returns>The modified ObjectEditPropertyMetaOf instance.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithGroup``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0},System.String)">
            <summary>
            Adds a group to an ObjectEditPropertyMetaOf instance using a group name.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="meta">The ObjectEditPropertyMetaOf instance to modify.</param>
            <param name="groupName">The name of the group to add.</param>
            <returns>The modified ObjectEditPropertyMetaOf instance.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithGroup``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0},MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaGroupInfo)">
            <summary>
            Adds a group to an ObjectEditPropertyMetaOf instance using a group info object.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="meta">The ObjectEditPropertyMetaOf instance to modify.</param>
            <param name="groupInfo">The ObjectEditPropertyMetaGroupInfo instance representing the group to add.</param>
            <returns>The modified ObjectEditPropertyMetaOf instance.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithAdditionalAttributes``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0},System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Adds additional attributes to an ObjectEditPropertyMetaOf instance.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="meta">The ObjectEditPropertyMetaOf instance to modify.</param>
            <param name="attributes">The attributes to add.</param>
            <returns>The modified ObjectEditPropertyMetaOf instance.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithAdditionalAttributes``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0},System.Boolean,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Adds additional attributes to an ObjectEditPropertyMetaOf instance, with an option to overwrite existing attributes.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="meta">The ObjectEditPropertyMetaOf instance to modify.</param>
            <param name="overwriteExisting">A boolean indicating whether to overwrite existing attributes.</param>
            <param name="attributes">The attributes to add.</param>
            <returns>The modified ObjectEditPropertyMetaOf instance.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithAdditionalAttributes``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Adds additional attributes to an ObjectEditPropertyMetaOf instance, with an option to overwrite existing attributes.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="meta">The ObjectEditPropertyMetaOf instance to modify.</param>
            <param name="attributes">A dictionary of attributes to add.</param>
            <param name="overwriteExisting">A boolean indicating whether to overwrite existing attributes.</param>
            <returns>The modified ObjectEditPropertyMetaOf instance.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithAdditionalAttribute``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0},System.String,System.Object,System.Boolean)">
            <summary>
            Adds a single additional attribute to an ObjectEditPropertyMetaOf instance, with an option to overwrite existing attributes.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="meta">The ObjectEditPropertyMetaOf instance to modify.</param>
            <param name="key">The key of the attribute to add.</param>
            <param name="value">The value of the attribute to add.</param>
            <param name="overwriteExisting">A boolean indicating whether to overwrite existing attributes.</param>
            <returns>The modified ObjectEditPropertyMetaOf instance.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithAdditionalAttributes``2(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0},System.Boolean,System.Action{``1}[])">
            <summary>
            Adds additional attributes to an ObjectEditPropertyMetaOf instance using component options, with an option to overwrite existing attributes.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TComponent">The type of the component for attribute options.</typeparam>
            <param name="meta">The ObjectEditPropertyMetaOf instance to modify.</param>
            <param name="overwriteExisting">A boolean indicating whether to overwrite existing attributes.</param>
            <param name="options">The component options to convert into attributes.</param>
            <returns>The modified ObjectEditPropertyMetaOf instance.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithAdditionalAttributes``2(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0},System.Action{``1}[])">
            <summary>
            Adds additional attributes to an ObjectEditPropertyMetaOf instance using component options.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TComponent">The type of the component for attribute options.</typeparam>
            <param name="meta">The ObjectEditPropertyMetaOf instance to modify.</param>
            <param name="options">The component options to convert into attributes.</param>
            <returns>The modified ObjectEditPropertyMetaOf instance.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithAdditionalAttributes``2(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0},``1,System.Boolean)">
            <summary>
            Adds additional attributes to an ObjectEditPropertyMetaOf instance using an instance of a component for attribute options, with an option to overwrite existing attributes.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TComponent">The type of the component for attribute options.</typeparam>
            <param name="meta">The ObjectEditPropertyMetaOf instance to modify.</param>
            <param name="instanceForAttributes">The component instance to use for generating attribute values.</param>
            <param name="overwriteExisting">A boolean indicating whether to overwrite existing attributes.</param>
            <returns>The modified ObjectEditPropertyMetaOf instance.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.IgnoreIf``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0},System.Func{``0,System.Boolean})">
            <summary>
            Ignores an ObjectEditPropertyMetaOf instance if a specified condition is met.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="meta">The ObjectEditPropertyMetaOf instance to modify.</param>
            <param name="condition">The condition that determines if the property should be ignored.</param>
            <returns>The modified ObjectEditPropertyMetaOf instance.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.AsReadOnlyIf``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0},System.Func{``0,System.Boolean})">
            <summary>
            Sets an ObjectEditPropertyMetaOf instance as read-only if a specified condition is met.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="meta">The ObjectEditPropertyMetaOf instance to modify.</param>
            <param name="condition">The condition that determines if the property should be read-only.</param>
            <returns>The modified ObjectEditPropertyMetaOf instance.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithAttributesIf``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0},System.Func{``0,System.Boolean},System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Adds attributes to an ObjectEditPropertyMetaOf instance if a specified condition is met.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="meta">The ObjectEditPropertyMetaOf instance to modify.</param>
            <param name="condition">The condition that determines if the attributes should be added.</param>
            <param name="attributes">The attributes to add.</param>
            <returns>The modified ObjectEditPropertyMetaOf instance.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithAttributesIf``2(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0},System.Func{``0,System.Boolean},System.Action{``1}[])">
            <summary>
            Adds attributes to an ObjectEditPropertyMetaOf instance if a specified condition is met, using component options.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TComponent">The type of the component for attribute options.</typeparam>
            <param name="meta">The ObjectEditPropertyMetaOf instance to modify.</param>
            <param name="condition">The condition that determines if the attributes should be added.</param>
            <param name="options">The component options to convert into attributes.</param>
            <returns>The modified ObjectEditPropertyMetaOf instance.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.IgnoreOnExport``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0},System.Boolean)">
            <summary>
            Ignores an ObjectEditPropertyMetaOf instance during export operations if specified.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="meta">The ObjectEditPropertyMetaOf instance to modify.</param>
            <param name="ignore">A boolean indicating if the property should be ignored during export. Defaults to true.</param>
            <returns>The modified ObjectEditPropertyMetaOf instance.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.IgnoreOnImport``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0},System.Boolean)">
            <summary>
            Ignores an ObjectEditPropertyMetaOf instance during import operations if specified.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="meta">The ObjectEditPropertyMetaOf instance to modify.</param>
            <param name="ignore">A boolean indicating if the property should be ignored during import. Defaults to true.</param>
            <returns>The modified ObjectEditPropertyMetaOf instance.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.IgnoreOnExportAndImport``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0},System.Boolean)">
            <summary>
            Ignores an ObjectEditPropertyMetaOf instance during both export and import operations if specified.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="meta">The ObjectEditPropertyMetaOf instance to modify.</param>
            <param name="ignore">A boolean indicating if the property should be ignored during both export and import. Defaults to true.</param>
            <returns>The modified ObjectEditPropertyMetaOf instance.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.AsDisabledIf``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0},System.Func{``0,System.Boolean})">
            <summary>
            Disables an ObjectEditPropertyMetaOf instance if a specified condition is met.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="meta">The ObjectEditPropertyMetaOf instance to modify.</param>
            <param name="condition">The condition that determines if the property should be disabled.</param>
            <returns>The modified ObjectEditPropertyMetaOf instance.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithAdditionalAttributes``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0},System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Adds additional attributes to an ObjectEditPropertyMetaOf instance from a dictionary, with an option to overwrite existing attributes.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="meta">The ObjectEditPropertyMetaOf instance to modify.</param>
            <param name="attributes">A dictionary of attributes to add.</param>
            <param name="overwriteExisting">A boolean indicating whether to overwrite existing attributes.</param>
            <returns>The modified ObjectEditPropertyMetaOf instance.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithAttributesIf``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0},System.Func{``0,System.Boolean},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Adds attributes to an ObjectEditPropertyMetaOf instance if a specified condition is met, using a dictionary of attributes.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="meta">The ObjectEditPropertyMetaOf instance to modify.</param>
            <param name="condition">The condition that determines if the attributes should be added.</param>
            <param name="attributes">A dictionary of attributes to add.</param>
            <returns>The modified ObjectEditPropertyMetaOf instance.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithAttributesIf``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0},System.Func{``0,System.Boolean},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Adds attributes to an ObjectEditPropertyMetaOf instance if a specified condition is met, using a dictionary of attributes. This overload accepts a Dictionary specifically, offering the same functionality as the IDictionary overload.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="meta">The ObjectEditPropertyMetaOf instance to modify.</param>
            <param name="condition">The condition that determines if the attributes should be added.</param>
            <param name="attributes">A dictionary of attributes to add.</param>
            <returns>The modified ObjectEditPropertyMetaOf instance.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithEditConfirmation``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0},System.String,MudBlazor.Extensions.Components.ObjectEdit.Options.AdditionalComponentRenderPosition)">
            <summary>
            Protects the property from being edited by the user until a confirmation is received.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithEditConfirmation``1(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0},MudBlazor.Extensions.Components.ObjectEdit.Options.IConfirmationProtection,MudBlazor.Extensions.Components.ObjectEdit.Options.AdditionalComponentRenderPosition)">
            <summary>
            Protects the property from being edited by the user until a confirmation is received.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.RenderWith``3(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Action{``0},System.Func{``1,``2},System.Func{``2,``1})">
            <summary>
            Extends the collection of ObjectEditPropertyMeta to render with a specified component type, supporting conversion between property and field types and allowing for additional component configuration.
            <typeparam name="TComponent">The component type to render.</typeparam>
            <typeparam name="TPropertyType">The type of the property to render.</typeparam>
            <typeparam name="TFieldType">The field type used by the component.</typeparam>
            <param name="metas">The collection of property metadata to extend.</param>
            <param name="valueField">An expression identifying the component's value field.</param>
            <param name="options">An action for configuring the component instance.</param>
            <param name="toFieldTypeConverter">An optional converter from the property type to the field type.</param>
            <param name="toPropertyTypeConverter">An optional converter from the field type back to the property type.</param>
            <returns>The extended collection of ObjectEditPropertyMeta.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.RenderWith``3(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta},System.Linq.Expressions.Expression{System.Func{``0,``2}},``0,System.Func{``1,``2},System.Func{``2,``1})">
            <summary>
            Extends the collection of ObjectEditPropertyMeta to render with a specified component type, directly specifying instance attributes and supporting conversion between property and field types.
            <typeparam name="TComponent">The component type to render.</typeparam>
            <typeparam name="TPropertyType">The type of the property to render.</typeparam>
            <typeparam name="TFieldType">The field type used by the component.</typeparam>
            <param name="metas">The collection of property metadata to extend.</param>
            <param name="valueField">An expression identifying the component's value field.</param>
            <param name="instanceForAttributes">An instance of the component to specify attributes.</param>
            <param name="toFieldTypeConverter">An optional converter from the property type to the field type.</param>
            <param name="toPropertyTypeConverter">An optional converter from the field type back to the property type.</param>
            <returns>The extended collection of ObjectEditPropertyMeta.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.RenderWith``3(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Func{``1,``2},System.Func{``2,``1})">
            <summary>
            Extends the collection of ObjectEditPropertyMeta to render with a specified component type, supporting conversion between property and field types without additional configuration.
            <typeparam name="TComponent">The component type to render.</typeparam>
            <typeparam name="TPropertyType">The type of the property to render.</typeparam>
            <typeparam name="TFieldType">The field type used by the component.</typeparam>
            <param name="metas">The collection of property metadata to extend.</param>
            <param name="valueField">An expression identifying the component's value field.</param>
            <param name="toFieldTypeConverter">An optional converter from the property type to the field type.</param>
            <param name="toPropertyTypeConverter">An optional converter from the field type back to the property type.</param>
            <returns>The extended collection of ObjectEditPropertyMeta.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.RenderWith``2(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Action{``0})">
            <summary>
            Extends the collection of ObjectEditPropertyMeta to render with a specified component type, allowing for additional component configuration.
            <typeparam name="TComponent">The component type to render.</typeparam>
            <typeparam name="TPropertyType">The type of the property to render.</typeparam>
            <param name="metas">The collection of property metadata to extend.</param>
            <param name="valueField">An expression identifying the component's value field.</param>
            <param name="options">An action for configuring the component instance.</param>
            <returns>The extended collection of ObjectEditPropertyMeta.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.RenderWith``2(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta},System.Linq.Expressions.Expression{System.Func{``0,``1}},``0)">
            <summary>
            Extends the collection of ObjectEditPropertyMeta to render with a specified component type, directly specifying instance attributes.
            <typeparam name="TComponent">The component type to render.</typeparam>
            <typeparam name="TPropertyType">The type of the property to render.</typeparam>
            <param name="metas">The collection of property metadata to extend.</param>
            <param name="valueField">An expression identifying the component's value field.</param>
            <param name="instanceForAttributes">An instance of the component to specify attributes.</param>
            <returns>The extended collection of ObjectEditPropertyMeta.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.RenderWith``2(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Extends the collection of ObjectEditPropertyMeta to render with a specified component type without additional configuration or converters.
            <typeparam name="TComponent">The component type to render.</typeparam>
            <typeparam name="TPropertyType">The type of the property to render.</typeparam>
            <param name="metas">The collection of property metadata to extend.</param>
            <param name="valueField">An expression identifying the component's value field.</param>
            <returns>The extended collection of ObjectEditPropertyMeta.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.RenderWith``1(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta},System.Action{``0})">
            <summary>
            Extends the collection of ObjectEditPropertyMeta to render with a specified component type, allowing for additional configuration through options without specifying property or field types.
            <typeparam name="TComponent">The component type to render.</typeparam>
            <param name="metas">The collection of property metadata to extend.</param>
            <param name="options">An action for configuring the component instance.</param>
            <returns>The extended collection of ObjectEditPropertyMeta.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.RenderWith``1(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Extends the collection of ObjectEditPropertyMeta to render with a specified component type, applying custom attributes to the component.
            <typeparam name="TComponent">The component type to render.</typeparam>
            <param name="metas">The collection of property metadata to extend.</param>
            <param name="attributes">A dictionary of attributes to apply to the component.</param>
            <returns>The extended collection of ObjectEditPropertyMeta.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.RenderWith(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta},System.Type,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Extends the collection of ObjectEditPropertyMeta to render with a specified component type, applying custom attributes.
            <param name="metas">The collection of property metadata to extend.</param>
            <param name="componentType">The type of the component to render.</param>
            <param name="attributes">An optional dictionary of attributes to apply to the component.</param>
            <returns>The extended collection of ObjectEditPropertyMeta.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.RenderWith(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta},MudBlazor.Extensions.Components.ObjectEdit.Options.ICustomRenderer)">
            <summary>
            Extends the collection of ObjectEditPropertyMeta to render with a custom renderer implementation.
            <param name="metas">The collection of property metadata to extend.</param>
            <param name="renderer">The custom renderer to use for rendering.</param>
            <returns>The extended collection of ObjectEditPropertyMeta.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.AsReadOnly(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta},System.Boolean)">
            <summary>
            Sets the specified properties within the collection of ObjectEditPropertyMeta to read-only based on the provided condition.
            <param name="metas">The collection of property metadata to modify.</param>
            <param name="isReadOnly">Indicates whether the properties should be read-only.</param>
            <returns>The modified collection of ObjectEditPropertyMeta with read-only properties as specified.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.DisableUnderline(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta},System.Boolean)">
            <summary>
            Disables the underline for the specified properties within the collection of ObjectEditPropertyMeta.
            <param name="metas">The collection of property metadata to modify.</param>
            <param name="disableUnderline">Indicates whether the underline should be disabled.</param>
            <returns>The modified collection of ObjectEditPropertyMeta with underline disabled as specified.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.Ignore(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta},System.Boolean)">
            <summary>
            Ignores the specified properties within the collection of ObjectEditPropertyMeta based on the provided condition.
            <param name="metas">The collection of property metadata to modify.</param>
            <param name="ignore">Indicates whether the properties should be ignored.</param>
            <returns>The modified collection of ObjectEditPropertyMeta with properties ignored as specified.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithResetOptions(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta},System.Boolean,System.String,System.Boolean,System.String)">
            <summary>
            Configures reset options for the specified properties within the collection of ObjectEditPropertyMeta.
            <param name="metas">The collection of property metadata to modify.</param>
            <param name="allowReset">Indicates whether the reset functionality should be enabled.</param>
            <param name="resetIcon">The icon to use for the reset button.</param>
            <param name="showResetText">Indicates whether text should be shown next to the reset icon.</param>
            <param name="resetText">The text to display next to the reset icon.</param>
            <returns>The modified collection of ObjectEditPropertyMeta with reset options configured as specified.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithResetOptions(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta},MudBlazor.Extensions.Components.ObjectEdit.Options.PropertyResetSettings)">
            <summary>
            Configures reset options for the specified properties within the collection of ObjectEditPropertyMeta using a PropertyResetSettings object.
            <param name="metas">The collection of property metadata to modify.</param>
            <param name="resetSettings">The PropertyResetSettings object containing reset configuration.</param>
            <returns>The modified collection of ObjectEditPropertyMeta with reset options configured as specified.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithResetOptions(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta},System.Action{MudBlazor.Extensions.Components.ObjectEdit.Options.PropertyResetSettings})">
            <summary>
            Configures reset options for the specified properties within the collection of ObjectEditPropertyMeta using a delegate action.
            <param name="metas">The collection of property metadata to modify.</param>
            <param name="resetSettingsAction">An action delegate to configure the reset settings.</param>
            <returns>The modified collection of ObjectEditPropertyMeta with reset options configured as specified.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.AreResettable(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta},System.Boolean)">
            <summary>
            Marks the specified properties within the collection of ObjectEditPropertyMeta as resettable based on the provided condition.
            <param name="metas">The collection of property metadata to modify.</param>
            <param name="resettable">Indicates whether the properties should be resettable.</param>
            <returns>The modified collection of ObjectEditPropertyMeta marked as resettable as specified.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.NotResettable(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta})">
            <summary>
            Marks the specified properties within the collection of ObjectEditPropertyMeta as not resettable.
            <param name="metas">The collection of property metadata to modify.</param>
            <returns>The modified collection of ObjectEditPropertyMeta marked as not resettable.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithSettings(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta},System.Action{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaSettings})">
            <summary>
            Applies custom settings to the specified properties within the collection of ObjectEditPropertyMeta using a delegate action.
            <param name="metas">The collection of property metadata to modify.</param>
            <param name="settingsAction">An action delegate to configure the settings.</param>
            <returns>The modified collection of ObjectEditPropertyMeta with custom settings applied as specified.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithSeparateLabelComponent(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta})">
            <summary>
            Separates the label component for the specified properties within the collection of ObjectEditPropertyMeta.
            <param name="metas">The collection of property metadata to modify.</param>
            <returns>The modified collection of ObjectEditPropertyMeta with separate label components.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithSeparateValidationComponent(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta})">
            <summary>
            Separates the validation component for the specified properties within the collection of ObjectEditPropertyMeta.
            <param name="metas">The collection of property metadata to modify.</param>
            <returns>The modified collection of ObjectEditPropertyMeta with separate validation components.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithoutLabel(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta})">
            <summary>
            Removes the label for the specified properties within the collection of ObjectEditPropertyMeta.
            <param name="metas">The collection of property metadata to modify.</param>
            <returns>The modified collection of ObjectEditPropertyMeta without labels.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithSeparateLabelComponentOnly(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta})">
            <summary>
            Applies only a separate label component for the specified properties within the collection of ObjectEditPropertyMeta, excluding other configurations.
            <param name="metas">The collection of property metadata to modify.</param>
            <returns>The modified collection of ObjectEditPropertyMeta with only separate label components.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithDefaultLabeling(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta})">
            <summary>
            Applies default labeling for the specified properties within the collection of ObjectEditPropertyMeta.
            <param name="metas">The collection of property metadata to modify.</param>
            <returns>The modified collection of ObjectEditPropertyMeta with default labeling applied.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithOrder(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta},System.Int32)">
            <summary>
            Orders the specified properties within the collection of ObjectEditPropertyMeta.
            <param name="metas">The collection of property metadata to modify.</param>
            <param name="order">The order in which the properties should be displayed.</param>
            <returns>The modified collection of ObjectEditPropertyMeta ordered as specified.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithLabel(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta},System.String)">
            <summary>
            Labels the specified properties within the collection of ObjectEditPropertyMeta.
            <param name="metas">The collection of property metadata to modify.</param>
            <param name="label">The label to apply to the properties.</param>
            <returns>The modified collection of ObjectEditPropertyMeta with specified labels.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithDescription(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta},System.String)">
            <summary>
            Describes the specified properties within the collection of ObjectEditPropertyMeta.
            <param name="metas">The collection of property metadata to modify.</param>
            <param name="description">The description to apply to the properties.</param>
            <returns>The modified collection of ObjectEditPropertyMeta with specified descriptions.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithLabelResolver(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta},System.Func{System.Reflection.PropertyInfo,System.String})">
            <summary>
            Applies a label resolver for the specified properties within the collection of ObjectEditPropertyMeta.
            <param name="metas">The collection of property metadata to modify.</param>
            <param name="resolverFunc">The function to resolve labels dynamically.</param>
            <returns>The modified collection of ObjectEditPropertyMeta with dynamic label resolution.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithDescriptionResolver(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta},System.Func{System.Reflection.PropertyInfo,System.String})">
            <summary>
            Applies a description resolver for the specified properties within the collection of ObjectEditPropertyMeta.
            <param name="metas">The collection of property metadata to modify.</param>
            <param name="resolverFunc">The function to resolve descriptions dynamically.</param>
            <returns>The modified collection of ObjectEditPropertyMeta with dynamic description resolution.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithLabelLocalizerPattern(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta},System.String,Microsoft.Extensions.Localization.IStringLocalizer)">
            <summary>
            Applies a label localizer pattern for the specified properties within the collection of ObjectEditPropertyMeta.
            <param name="metas">The collection of property metadata to modify.</param>
            <param name="pattern">The pattern to use for localizing labels.</param>
            <param name="localizer">An optional IStringLocalizer to apply for localization.</param>
            <returns>The modified collection of ObjectEditPropertyMeta with localized labels based on the specified pattern.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithDescriptionLocalizerPattern(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta},System.String,Microsoft.Extensions.Localization.IStringLocalizer)">
            <summary>
            Applies a description localizer pattern for the specified properties within the collection of ObjectEditPropertyMeta.
            <param name="metas">The collection of property metadata to modify.</param>
            <param name="pattern">The pattern to use for localizing descriptions.</param>
            <param name="localizer">An optional IStringLocalizer to apply for localization.</param>
            <returns>The modified collection of ObjectEditPropertyMeta with localized descriptions based on the specified pattern.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithGroup(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta},System.String)">
            <summary>
            Groups the specified properties within the collection of ObjectEditPropertyMeta under a specified group name.
            <param name="metas">The collection of property metadata to modify.</param>
            <param name="groupName">The name of the group to assign the properties to.</param>
            <returns>The modified collection of ObjectEditPropertyMeta grouped as specified.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithGroup(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta},MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaGroupInfo)">
            <summary>
            Groups the specified properties within the collection of ObjectEditPropertyMeta under a specified group information object.
            <param name="metas">The collection of property metadata to modify.</param>
            <param name="groupInfo">The ObjectEditPropertyMetaGroupInfo object containing group information.</param>
            <returns>The modified collection of ObjectEditPropertyMeta grouped as specified.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WrapInValidationWrapper``1(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta},System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Wraps the collection of ObjectEditPropertyMeta within a MudExValidationWrapper component, binding it to a specific property.
            <typeparam name="TPropertyType">The type of the property to be validated.</typeparam>
            <param name="metas">The collection of property metadata to extend.</param>
            <param name="forExpression">An expression that identifies the property to be validated.</param>
            <returns>The extended collection of ObjectEditPropertyMeta wrapped within a MudExValidationWrapper.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WrapInValidationWrapper``1(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta},System.Action{MudBlazor.Extensions.Components.MudExValidationWrapper{``0}}[])">
            <summary>
            Wraps the collection of ObjectEditPropertyMeta within a MudExValidationWrapper component, configuring it with a set of options.
            <typeparam name="TPropertyType">The type of the property to be validated.</typeparam>
            <param name="metas">The collection of property metadata to extend.</param>
            <param name="options">A set of actions to configure the MudExValidationWrapper instance.</param>
            <returns>The extended collection of ObjectEditPropertyMeta wrapped within a MudExValidationWrapper.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WrapIn``1(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.IRenderData},System.Action{``0}[])">
            <summary>
            Wraps each IRenderData in the collection within a new instance of a specified wrapper component type, allowing for additional configuration through options.
            <typeparam name="TWrapperComponent">The component type to use as a wrapper.</typeparam>
            <param name="renderData">The collection of IRenderData to be wrapped.</param>
            <param name="options">A set of actions to configure each wrapper component instance.</param>
            <returns>The collection of IRenderData with each item wrapped in the specified component.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WrapIn``1(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta},System.Action{``0}[])">
            <summary>
            Wraps each ObjectEditPropertyMeta in the collection within a new instance of a specified wrapper component type, allowing for additional configuration through options.
            <typeparam name="TWrapperComponent">The component type to use as a wrapper.</typeparam>
            <param name="metas">The collection of ObjectEditPropertyMeta to be wrapped.</param>
            <param name="options">A set of actions to configure each wrapper component instance.</param>
            <returns>The collection of IRenderData with each ObjectEditPropertyMeta wrapped in the specified component.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WrapIn``1(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta},System.Action{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta,``0}[])">
            <summary>
            Wraps each ObjectEditPropertyMeta in the collection within a new instance of a specified wrapper component type, allowing for complex configuration involving both the meta and the component.
            <typeparam name="TWrapperComponent">The component type to use as a wrapper.</typeparam>
            <param name="metas">The collection of ObjectEditPropertyMeta to be wrapped.</param>
            <param name="options">A set of actions to configure each wrapper component instance with access to both meta and component.</param>
            <returns>The collection of IRenderData with each ObjectEditPropertyMeta wrapped in the specified component.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WrapInMudItem(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta},System.Action{MudBlazor.MudItem}[])">
            <summary>
            Wraps each ObjectEditPropertyMeta in the collection within a MudItem component, allowing for additional configuration through options.
            <param name="metas">The collection of ObjectEditPropertyMeta to be wrapped.</param>
            <param name="options">A set of actions to configure each MudItem wrapper component instance.</param>
            <returns>The collection of IRenderData with each ObjectEditPropertyMeta wrapped in a MudItem component.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithAdditionalAttributes(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta},System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Adds additional attributes to each ObjectEditPropertyMeta in the collection.
            <param name="metas">The collection of property metadata to extend.</param>
            <param name="attributes">Key-value pairs representing the additional attributes to add.</param>
            <returns>The modified collection of ObjectEditPropertyMeta with additional attributes.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithAdditionalAttributes(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta},System.Boolean,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Adds additional attributes to each ObjectEditPropertyMeta in the collection, with an option to overwrite existing attributes.
            <param name="metas">The collection of property metadata to extend.</param>
            <param name="overwriteExisting">Indicates whether to overwrite existing attributes.</param>
            <param name="attributes">Key-value pairs representing the additional attributes to add or overwrite.</param>
            <returns>The modified collection of ObjectEditPropertyMeta with additional attributes.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithAdditionalAttributes(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta},System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Adds additional attributes to each ObjectEditPropertyMeta in the collection from a dictionary, with an option to overwrite existing attributes.
            <param name="metas">The collection of property metadata to extend.</param>
            <param name="attributes">A dictionary of attributes to add or overwrite.</param>
            <param name="overwriteExisting">Indicates whether to overwrite existing attributes.</param>
            <returns>The modified collection of ObjectEditPropertyMeta with additional attributes.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithAdditionalAttributes(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta},System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Adds additional attributes to each ObjectEditPropertyMeta in the collection from a dictionary, with an option to overwrite existing attributes.
            <param name="metas">The collection of property metadata to extend.</param>
            <param name="attributes">A dictionary of attributes to add or overwrite.</param>
            <param name="overwriteExisting">Indicates whether to overwrite existing attributes.</param>
            <returns>The modified collection of ObjectEditPropertyMeta with additional attributes.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithAdditionalAttribute(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta},System.String,System.Object,System.Boolean)">
            <summary>
            Adds a single additional attribute to each ObjectEditPropertyMeta in the collection, with an option to overwrite an existing attribute of the same key.
            <param name="metas">The collection of property metadata to extend.</param>
            <param name="key">The key of the attribute to add or overwrite.</param>
            <param name="value">The value of the attribute.</param>
            <param name="overwriteExisting">Indicates whether to overwrite an existing attribute of the same key.</param>
            <returns>The modified collection of ObjectEditPropertyMeta with the additional attribute.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithAdditionalAttributes``1(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta},System.Boolean,System.Action{``0}[])">
            <summary>
            Adds additional attributes to each ObjectEditPropertyMeta in the collection using component-specific options, with an option to overwrite existing attributes.
            <typeparam name="TComponent">The component type for which the attributes are applicable.</typeparam>
            <param name="metas">The collection of property metadata to extend.</param>
            <param name="overwriteExisting">Indicates whether to overwrite existing attributes.</param>
            <param name="options">A set of actions to configure the component instance for additional attributes.</param>
            <returns>The modified collection of ObjectEditPropertyMeta with additional attributes.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithAdditionalAttributes``1(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta},System.Action{``0}[])">
            <summary>
            Adds additional attributes to each component in the collection of ObjectEditPropertyMeta, using specified options for configuration.
            <typeparam name="TComponent">The component type to which the attributes will be added.</typeparam>
            <param name="metas">The collection of ObjectEditPropertyMeta to be extended.</param>
            <param name="options">Actions to configure the attributes of the component.</param>
            <returns>The modified collection of ObjectEditPropertyMeta with additional attributes.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithAdditionalAttributes``1(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta},``0,System.Boolean)">
            <summary>
            Adds additional attributes to each component in the collection of ObjectEditPropertyMeta, using an instance for attribute specification and optionally overwriting existing attributes.
            <typeparam name="TComponent">The component type to which the attributes will be added.</typeparam>
            <param name="metas">The collection of ObjectEditPropertyMeta to be extended.</param>
            <param name="instanceForAttributes">The component instance used for specifying attributes.</param>
            <param name="overwriteExisting">Whether to overwrite existing attributes.</param>
            <returns>The modified collection of ObjectEditPropertyMeta with additional attributes.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.IgnoreIf``1(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta},System.Func{``0,System.Boolean})">
            <summary>
            Conditionally ignores properties in the collection of ObjectEditPropertyMeta based on a specified condition.
            <typeparam name="TModel">The model type used to evaluate the condition.</typeparam>
            <param name="metas">The collection of ObjectEditPropertyMeta to be filtered.</param>
            <param name="condition">The condition that determines if a property should be ignored.</param>
            <returns>The modified collection of ObjectEditPropertyMeta with certain properties ignored based on the condition.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.AsReadOnlyIf``1(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta},System.Func{``0,System.Boolean})">
            <summary>
            Conditionally sets properties in the collection of ObjectEditPropertyMeta to read-only based on a specified condition.
            <typeparam name="TModel">The model type used to evaluate the condition.</typeparam>
            <param name="metas">The collection of ObjectEditPropertyMeta to be modified.</param>
            <param name="condition">The condition that determines if a property should be set to read-only.</param>
            <returns>The modified collection of ObjectEditPropertyMeta with certain properties set to read-only based on the condition.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithAttributesIf``1(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta},System.Func{``0,System.Boolean},System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Adds attributes to properties in the collection of ObjectEditPropertyMeta based on a specified condition, using a set of key-value pairs.
            <typeparam name="TModel">The model type used to evaluate the condition.</typeparam>
            <param name="metas">The collection of ObjectEditPropertyMeta to be extended.</param>
            <param name="condition">The condition that determines if attributes should be added.</param>
            <param name="attributes">The attributes to add if the condition is met.</param>
            <returns>The modified collection of ObjectEditPropertyMeta with additional attributes based on the condition.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithAttributesIf``2(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta},System.Func{``0,System.Boolean},System.Action{``1}[])">
            <summary>
            Adds attributes to properties in the collection of ObjectEditPropertyMeta based on a specified condition, using configuration options for a component.
            <typeparam name="TModel">The model type used to evaluate the condition.</typeparam>
            <typeparam name="TComponent">The component type for which the attributes are being added.</typeparam>
            <param name="metas">The collection of ObjectEditPropertyMeta to be extended.</param>
            <param name="condition">The condition that determines if attributes should be added.</param>
            <param name="options">Actions to configure the component if the condition is met.</param>
            <returns>The modified collection of ObjectEditPropertyMeta with additional attributes based on the condition.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithAttributesIf``1(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta},System.Func{``0,System.Boolean},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Adds attributes to properties in the collection of ObjectEditPropertyMeta based on a specified condition, using a dictionary of attributes.
            <typeparam name="TModel">The model type used to evaluate the condition.</typeparam>
            <param name="metas">The collection of ObjectEditPropertyMeta to be extended.</param>
            <param name="condition">The condition that determines if attributes should be added.</param>
            <param name="attributes">The dictionary of attributes to add if the condition is met.</param>
            <returns>The modified collection of ObjectEditPropertyMeta with additional attributes based on the condition.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithAttributesIf``1(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta},System.Func{``0,System.Boolean},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Adds attributes to properties in the collection of ObjectEditPropertyMeta based on a specified condition, using a dictionary of attributes.
            <typeparam name="TModel">The model type used to evaluate the condition.</typeparam>
            <param name="metas">The collection of ObjectEditPropertyMeta to be extended.</param>
            <param name="condition">The condition that determines if attributes should be added.</param>
            <param name="attributes">The dictionary of attributes to add if the condition is met.</param>
            <returns>The modified collection of ObjectEditPropertyMeta with additional attributes based on the condition.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.IgnoreOnExport``1(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta},System.Boolean)">
            <summary>
            Ignores properties on export for the specified model type within the collection of ObjectEditPropertyMeta based on a boolean flag.
            <typeparam name="TModel">The model type for which properties may be ignored on export.</typeparam>
            <param name="metas">The collection of ObjectEditPropertyMeta to be modified.</param>
            <param name="ignore">A boolean flag indicating whether to ignore properties on export.</param>
            <returns>The modified collection of ObjectEditPropertyMeta with specified properties ignored on export.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.IgnoreOnImport``1(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta},System.Boolean)">
            <summary>
            Ignores properties on import for the specified model type within the collection of ObjectEditPropertyMeta based on a boolean flag.
            <typeparam name="TModel">The model type for which properties may be ignored on import.</typeparam>
            <param name="metas">The collection of ObjectEditPropertyMeta to be modified.</param>
            <param name="ignore">A boolean flag indicating whether to ignore properties on import.</param>
            <returns>The modified collection of ObjectEditPropertyMeta with specified properties ignored on import.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.IgnoreOnExportAndImport``1(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta},System.Boolean)">
            <summary>
            Ignores properties on both export and import for the specified model type within the collection of ObjectEditPropertyMeta based on a boolean flag.
            <typeparam name="TModel">The model type for which properties may be ignored on both export and import.</typeparam>
            <param name="metas">The collection of ObjectEditPropertyMeta to be modified.</param>
            <param name="ignore">A boolean flag indicating whether to ignore properties on both export and import.</param>
            <returns>The modified collection of ObjectEditPropertyMeta with specified properties ignored on both export and import.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.AsDisabledIf``1(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta},System.Func{``0,System.Boolean})">
            <summary>
            Conditionally sets properties as disabled within the collection of ObjectEditPropertyMeta based on a specified condition.
            <typeparam name="TModel">The model type used to evaluate the condition.</typeparam>
            <param name="metas">The collection of ObjectEditPropertyMeta to be modified.</param>
            <param name="condition">The condition that determines if a property should be disabled.</param>
            <returns>The modified collection of ObjectEditPropertyMeta with certain properties set as disabled based on the condition.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithEditConfirmation(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta},System.String,MudBlazor.Extensions.Components.ObjectEdit.Options.AdditionalComponentRenderPosition)">
            <summary>
            Protects the property from being edited by the user until a confirmation is received.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithEditConfirmation(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta},MudBlazor.Extensions.Components.ObjectEdit.Options.IConfirmationProtection,MudBlazor.Extensions.Components.ObjectEdit.Options.AdditionalComponentRenderPosition)">
            <summary>
            Protects the property from being edited by the user until a confirmation is received.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.RenderWith``4(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0}},System.Linq.Expressions.Expression{System.Func{``1,``3}},System.Action{``1},System.Func{``2,``3},System.Func{``3,``2})">
            <summary>
            Extends the collection of ObjectEditPropertyMetaOf with a component for rendering, providing custom options, field type converters, and the ability to specify instance attributes for the component.
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TComponent">The type of the component to render.</typeparam>
            <typeparam name="TPropertyType">The type of the property.</typeparam>
            <typeparam name="TFieldType">The field type of the component.</typeparam>
            <param name="metas">The collection of metadata definitions.</param>
            <param name="valueField">The expression to identify the component's value field.</param>
            <param name="options">An action to configure the component instance.</param>
            <param name="toFieldTypeConverter">An optional converter from the property type to the field type.</param>
            <param name="toPropertyTypeConverter">An optional converter from the field type back to the property type.</param>
            <returns>A modified IEnumerable of ObjectEditPropertyMetaOf including the specified rendering component.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.RenderWith``4(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0}},System.Linq.Expressions.Expression{System.Func{``1,``3}},``1,System.Func{``2,``3},System.Func{``3,``2})">
            <summary>
            Extends the collection of ObjectEditPropertyMetaOf with a component for rendering, specifying instance attributes directly on a component instance, and allowing for custom field type converters.
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TComponent">The type of the component to render.</typeparam>
            <typeparam name="TPropertyType">The type of the property.</typeparam>
            <typeparam name="TFieldType">The field type of the component.</typeparam>
            <param name="metas">The collection of metadata definitions.</param>
            <param name="valueField">The expression to identify the component's value field.</param>
            <param name="instanceForAttributes">An instance of the component for specifying attributes.</param>
            <param name="toFieldTypeConverter">An optional converter from the property type to the field type.</param>
            <param name="toPropertyTypeConverter">An optional converter from the field type back to the property type.</param>
            <returns>A modified IEnumerable of ObjectEditPropertyMetaOf including the specified rendering component with instance attributes.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.RenderWith``4(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0}},System.Linq.Expressions.Expression{System.Func{``1,``3}},System.Func{``2,``3},System.Func{``3,``2})">
            <summary>
            Extends the collection of ObjectEditPropertyMetaOf with a component for rendering, allowing for custom field type converters without specifying options or attributes.
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TComponent">The type of the component to render.</typeparam>
            <typeparam name="TPropertyType">The type of the property.</typeparam>
            <typeparam name="TFieldType">The field type of the component.</typeparam>
            <param name="metas">The collection of metadata definitions.</param>
            <param name="valueField">The expression to identify the component's value field.</param>
            <param name="toFieldTypeConverter">An optional converter from the property type to the field type.</param>
            <param name="toPropertyTypeConverter">An optional converter from the field type back to the property type.</param>
            <returns>A modified IEnumerable of ObjectEditPropertyMetaOf for rendering with the specified component and converters.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.RenderWith``3(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Action{``1})">
            <summary>
            Extends the collection of ObjectEditPropertyMetaOf with a component for rendering, providing custom options without specifying field type converters.
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TComponent">The type of the component to render.</typeparam>
            <typeparam name="TPropertyType">The type of the property.</typeparam>
            <param name="metas">The collection of metadata definitions.</param>
            <param name="valueField">The expression to identify the component's value field.</param>
            <param name="options">An action to configure the component instance.</param>
            <returns>A modified IEnumerable of ObjectEditPropertyMetaOf for rendering with the specified component and options.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.RenderWith``3(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0}},System.Linq.Expressions.Expression{System.Func{``1,``2}},``1)">
            <summary>
            Extends the collection of ObjectEditPropertyMetaOf with a component for rendering, specifying instance attributes directly without custom options or converters.
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TComponent">The type of the component to render.</typeparam>
            <typeparam name="TPropertyType">The type of the property.</typeparam>
            <param name="metas">The collection of metadata definitions.</param>
            <param name="valueField">The expression to identify the component's value field.</param>
            <param name="instanceForAttributes">An instance of the component for specifying attributes.</param>
            <returns>A modified IEnumerable of ObjectEditPropertyMetaOf for rendering with the specified component and instance attributes.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.RenderWith``3(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
            <summary>
            Extends the collection of ObjectEditPropertyMetaOf with a component for rendering without specifying options, attributes, or converters.
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TComponent">The type of the component to render.</typeparam>
            <typeparam name="TPropertyType">The type of the property.</typeparam>
            <param name="metas">The collection of metadata definitions.</param>
            <param name="valueField">The expression to identify the component's value field.</param>
            <returns>A modified IEnumerable of ObjectEditPropertyMetaOf for basic rendering with the specified component.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.RenderWith``2(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0}},System.Action{``1})">
            <summary>
            Extends the collection of ObjectEditPropertyMetaOf with generic component rendering, providing custom options.
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TComponent">The type of the component to render.</typeparam>
            <param name="metas">The collection of metadata definitions.</param>
            <param name="options">An action to configure the component instance.</param>
            <returns>A modified IEnumerable of ObjectEditPropertyMetaOf for rendering with any specified component and options.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.RenderWith``2(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0}},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Extends the collection of ObjectEditPropertyMetaOf with a generic component rendering, specifying custom attributes.
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TComponent">The type of the component to render.</typeparam>
            <param name="metas">The collection of metadata definitions.</param>
            <param name="attributes">A dictionary of attributes to apply to the component.</param>
            <returns>A modified IEnumerable of ObjectEditPropertyMetaOf for rendering with specified attributes.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.RenderWith``1(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0}},System.Type,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Extends the collection of ObjectEditPropertyMetaOf with a non-generic component rendering, specifying custom attributes.
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="metas">The collection of metadata definitions.</param>
            <param name="componentType">The type of the component to render.</param>
            <param name="attributes">An optional dictionary of attributes to apply to the component.</param>
            <returns>A modified IEnumerable of ObjectEditPropertyMetaOf for rendering with a specified non-generic component and attributes.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.RenderWith``1(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0}},MudBlazor.Extensions.Components.ObjectEdit.Options.ICustomRenderer)">
            <summary>
            Extends the collection of ObjectEditPropertyMetaOf with custom rendering using an ICustomRenderer interface implementation.
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="metas">The collection of metadata definitions.</param>
            <param name="renderer">The custom renderer to use.</param>
            <returns>A modified IEnumerable of ObjectEditPropertyMetaOf for rendering with a specified custom renderer.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.AsReadOnly``1(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0}},System.Boolean)">
            <summary>
            Sets the specified collection of ObjectEditPropertyMetaOf to read-only based on the provided condition.
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="metas">The collection of metadata definitions.</param>
            <param name="isReadOnly">A boolean indicating if the properties should be read-only.</param>
            <returns>A modified IEnumerable of ObjectEditPropertyMetaOf with the read-only setting applied.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.DisableUnderline``1(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0}},System.Boolean)">
            <summary>
            Disables the underline for the specified collection of ObjectEditPropertyMetaOf.
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="metas">The collection of metadata definitions.</param>
            <param name="disableUnderline">A boolean indicating if the underline should be disabled.</param>
            <returns>A modified IEnumerable of ObjectEditPropertyMetaOf with the underline disabled.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.Ignore``1(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0}},System.Boolean)">
            <summary>
            Ignores the specified collection of ObjectEditPropertyMetaOf from being rendered or processed.
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="metas">The collection of metadata definitions.</param>
            <param name="ignore">A boolean indicating if the properties should be ignored.</param>
            <returns>A modified IEnumerable of ObjectEditPropertyMetaOf with the specified properties ignored.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithResetOptions``1(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0}},System.Boolean,System.String,System.Boolean,System.String)">
            <summary>
            Configures reset options for the specified collection of ObjectEditPropertyMetaOf.
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="metas">The collection of metadata definitions.</param>
            <param name="allowReset">A boolean indicating if reset functionality should be enabled.</param>
            <param name="resetIcon">The icon to use for the reset button.</param>
            <param name="showResetText">A boolean indicating if text should be shown next to the reset icon.</param>
            <param name="resetText">The text to display next to the reset icon.</param>
            <returns>A modified IEnumerable of ObjectEditPropertyMetaOf with reset options configured.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithResetOptions``1(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0}},MudBlazor.Extensions.Components.ObjectEdit.Options.PropertyResetSettings)">
            <summary>
            Configures reset options for the specified collection of ObjectEditPropertyMetaOf using a PropertyResetSettings object.
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="metas">The collection of metadata definitions.</param>
            <param name="resetSettings">The PropertyResetSettings object containing reset configuration.</param>
            <returns>A modified IEnumerable of ObjectEditPropertyMetaOf with reset options configured.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithResetOptions``1(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0}},System.Action{MudBlazor.Extensions.Components.ObjectEdit.Options.PropertyResetSettings})">
            <summary>
            Configures reset options for the specified collection of ObjectEditPropertyMetaOf using a delegate action.
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="metas">The collection of metadata definitions.</param>
            <param name="resetSettingsAction">An action delegate to configure the reset settings.</param>
            <returns>A modified IEnumerable of ObjectEditPropertyMetaOf with reset options configured.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.AreResettable``1(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0}},System.Boolean)">
            <summary>
            Marks the specified collection of ObjectEditPropertyMetaOf as resettable based on the provided condition.
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="metas">The collection of metadata definitions.</param>
            <param name="resettable">A boolean indicating if the properties should be resettable.</param>
            <returns>A modified IEnumerable of ObjectEditPropertyMetaOf marked as resettable.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.NotResettable``1(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0}})">
            <summary>
            Marks the specified collection of ObjectEditPropertyMetaOf as not resettable.
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="metas">The collection of metadata definitions.</param>
            <returns>A modified IEnumerable of ObjectEditPropertyMetaOf marked as not resettable.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithSettings``1(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0}},System.Action{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaSettings})">
            <summary>
            Applies custom settings to the specified collection of ObjectEditPropertyMetaOf using a delegate action.
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="metas">The collection of metadata definitions.</param>
            <param name="settingsAction">An action delegate to configure the settings.</param>
            <returns>A modified IEnumerable of ObjectEditPropertyMetaOf with custom settings applied.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithSeparateLabelComponent``1(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0}})">
            <summary>
            Separates the label component for the specified collection of ObjectEditPropertyMetaOf.
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="metas">The collection of metadata definitions.</param>
            <returns>A modified IEnumerable of ObjectEditPropertyMetaOf with separate label components.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithSeparateValidationComponent``1(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0}})">
            <summary>
            Separates the validation component for the specified collection of ObjectEditPropertyMetaOf.
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="metas">The collection of metadata definitions.</param>
            <returns>A modified IEnumerable of ObjectEditPropertyMetaOf with separate validation components.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithoutLabel``1(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0}})">
            <summary>
            Removes the label for the specified collection of ObjectEditPropertyMetaOf.
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="metas">The collection of metadata definitions.</param>
            <returns>A modified IEnumerable of ObjectEditPropertyMetaOf without labels.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithSeparateLabelComponentOnly``1(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0}})">
            <summary>
            Applies only a separate label component for the specified collection of ObjectEditPropertyMetaOf, excluding other configurations.
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="metas">The collection of metadata definitions.</param>
            <returns>A modified IEnumerable of ObjectEditPropertyMetaOf with only separate label components.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithDefaultLabeling``1(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0}})">
            <summary>
            Applies default labeling for the specified collection of ObjectEditPropertyMetaOf.
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="metas">The collection of metadata definitions.</param>
            <returns>A modified IEnumerable of ObjectEditPropertyMetaOf with default labeling applied.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithOrder``1(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0}},System.Int32)">
            <summary>
            Orders the specified collection of ObjectEditPropertyMetaOf.
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="metas">The collection of metadata definitions.</param>
            <param name="order">The order in which the properties should be displayed.</param>
            <returns>A modified IEnumerable of ObjectEditPropertyMetaOf ordered as specified.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithLabel``1(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0}},System.String)">
            <summary>
            Labels the specified collection of ObjectEditPropertyMetaOf.
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="metas">The collection of metadata definitions.</param>
            <param name="label">The label to apply to the properties.</param>
            <returns>A modified IEnumerable of ObjectEditPropertyMetaOf with specified labels.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithDescription``1(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0}},System.String)">
            <summary>
            Describes the specified collection of ObjectEditPropertyMetaOf.
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="metas">The collection of metadata definitions.</param>
            <param name="description">The description to apply to the properties.</param>
            <returns>A modified IEnumerable of ObjectEditPropertyMetaOf with specified descriptions.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithLabelResolver``1(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0}},System.Func{System.Reflection.PropertyInfo,System.String})">
            <summary>
            Applies a label resolver for the specified collection of ObjectEditPropertyMetaOf.
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="metas">The collection of metadata definitions.</param>
            <param name="resolverFunc">The function to resolve labels dynamically.</param>
            <returns>A modified IEnumerable of ObjectEditPropertyMetaOf with dynamic label resolution.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithDescriptionResolver``1(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0}},System.Func{System.Reflection.PropertyInfo,System.String})">
            <summary>
            Applies a description resolver for the specified collection of ObjectEditPropertyMetaOf.
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="metas">The collection of metadata definitions.</param>
            <param name="resolverFunc">The function to resolve descriptions dynamically.</param>
            <returns>A modified IEnumerable of ObjectEditPropertyMetaOf with dynamic description resolution.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithLabelLocalizerPattern``1(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0}},System.String,Microsoft.Extensions.Localization.IStringLocalizer)">
            <summary>
            Applies a label localizer pattern for the specified collection of ObjectEditPropertyMetaOf.
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="metas">The collection of metadata definitions.</param>
            <param name="pattern">The pattern to use for localizing labels.</param>
            <param name="localizer">An optional IStringLocalizer to apply for localization.</param>
            <returns>A modified IEnumerable of ObjectEditPropertyMetaOf with localized labels based on the specified pattern.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithDescriptionLocalizerPattern``1(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0}},System.String,Microsoft.Extensions.Localization.IStringLocalizer)">
            <summary>
            Applies a description localizer pattern for the specified collection of ObjectEditPropertyMetaOf.
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="metas">The collection of metadata definitions.</param>
            <param name="pattern">The pattern to use for localizing descriptions.</param>
            <param name="localizer">An optional IStringLocalizer to apply for localization.</param>
            <returns>A modified IEnumerable of ObjectEditPropertyMetaOf with localized descriptions based on the specified pattern.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithGroup``1(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0}},System.String)">
            <summary>
            Groups the specified collection of ObjectEditPropertyMetaOf under a specified group name.
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="metas">The collection of metadata definitions.</param>
            <param name="groupName">The name of the group to assign the properties to.</param>
            <returns>A modified IEnumerable of ObjectEditPropertyMetaOf grouped as specified.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithGroup``1(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0}},MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaGroupInfo)">
            <summary>
            Groups the specified collection of ObjectEditPropertyMetaOf under a specified group information object.
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="metas">The collection of metadata definitions.</param>
            <param name="groupInfo">The ObjectEditPropertyMetaGroupInfo object containing group information.</param>
            <returns>A modified IEnumerable of ObjectEditPropertyMetaOf grouped as specified.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithAdditionalAttributes``1(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0}},System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Adds additional attributes to the specified collection of ObjectEditPropertyMetaOf.
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="metas">The collection of metadata definitions.</param>
            <param name="attributes">An array of key-value pairs representing additional attributes to add.</param>
            <returns>A modified IEnumerable of ObjectEditPropertyMetaOf with additional attributes added.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithAdditionalAttributes``1(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0}},System.Boolean,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Adds additional attributes to the specified collection of ObjectEditPropertyMetaOf, with an option to overwrite existing attributes.
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="metas">The collection of metadata definitions.</param>
            <param name="overwriteExisting">A boolean indicating if existing attributes should be overwritten.</param>
            <param name="attributes">An array of key-value pairs representing additional attributes to add.</param>
            <returns>A modified IEnumerable of ObjectEditPropertyMetaOf with additional attributes added or overwritten as specified.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithAdditionalAttributes``1(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0}},System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Adds additional attributes to the specified collection of ObjectEditPropertyMetaOf, with an option to overwrite existing attributes.
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="metas">The collection of metadata definitions.</param>
            <param name="attributes">A dictionary of attributes to add.</param>
            <param name="overwriteExisting">A boolean indicating if existing attributes should be overwritten.</param>
            <returns>A modified IEnumerable of ObjectEditPropertyMetaOf with additional attributes added or overwritten as specified.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithAdditionalAttributes``1(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0}},System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Adds additional attributes to the specified collection of ObjectEditPropertyMetaOf, with an option to overwrite existing attributes.
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="metas">The collection of metadata definitions.</param>
            <param name="attributes">A dictionary of attributes to add.</param>
            <param name="overwriteExisting">A boolean indicating if existing attributes should be overwritten.</param>
            <returns>A modified IEnumerable of ObjectEditPropertyMetaOf with additional attributes added or overwritten as specified.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithAdditionalAttribute``1(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0}},System.String,System.Object,System.Boolean)">
            <summary>
            Adds a single additional attribute to the specified collection of ObjectEditPropertyMetaOf, with an option to overwrite existing attributes.
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="metas">The collection of metadata definitions.</param>
            <param name="key">The key of the attribute to add.</param>
            <param name="value">The value of the attribute to add.</param>
            <param name="overwriteExisting">A boolean indicating if the attribute should overwrite an existing attribute with the same key.</param>
            <returns>A modified IEnumerable of ObjectEditPropertyMetaOf with the additional attribute added or overwritten as specified.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithAdditionalAttributes``2(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0}},System.Boolean,System.Action{``1}[])">
            <summary>
            Adds additional attributes to the specified collection of ObjectEditPropertyMetaOf using component options, with an option to overwrite existing attributes.
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TComponent">The type of the component for which attributes are being added.</typeparam>
            <param name="metas">The collection of metadata definitions.</param>
            <param name="overwriteExisting">A boolean indicating if existing attributes should be overwritten.</param>
            <param name="options">An array of actions to configure the component instances.</param>
            <returns>A modified IEnumerable of ObjectEditPropertyMetaOf with additional attributes added or overwritten as specified.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithAdditionalAttributes``2(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0}},System.Action{``1}[])">
            <summary>
            Adds additional attributes to the specified collection of ObjectEditPropertyMetaOf using component options.
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TComponent">The type of the component for which attributes are being added.</typeparam>
            <param name="metas">The collection of metadata definitions.</param>
            <param name="options">An array of actions to configure the component instances.</param>
            <returns>A modified IEnumerable of ObjectEditPropertyMetaOf with additional attributes added as specified.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithAdditionalAttributes``2(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0}},``1,System.Boolean)">
            <summary>
            Adds additional attributes to the specified collection of ObjectEditPropertyMetaOf using a component instance, with an option to overwrite existing attributes.
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TComponent">The type of the component for which attributes are being added.</typeparam>
            <param name="metas">The collection of metadata definitions.</param>
            <param name="instanceForAttributes">The component instance for specifying attributes.</param>
            <param name="overwriteExisting">A boolean indicating if existing attributes should be overwritten.</param>
            <returns>A modified IEnumerable of ObjectEditPropertyMetaOf with additional attributes added or overwritten as specified.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.IgnoreIf``1(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Ignores properties in the specified collection of ObjectEditPropertyMetaOf based on a condition.
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="metas">The collection of metadata definitions.</param>
            <param name="condition">A function that determines whether a property should be ignored.</param>
            <returns>A modified IEnumerable of ObjectEditPropertyMetaOf with properties ignored based on the specified condition.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.AsReadOnlyIf``1(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Sets properties in the specified collection of ObjectEditPropertyMetaOf to read-only based on a condition.
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="metas">The collection of metadata definitions.</param>
            <param name="condition">A function that determines whether a property should be read-only.</param>
            <returns>A modified IEnumerable of ObjectEditPropertyMetaOf with properties set to read-only based on the specified condition.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithAttributesIf``1(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0}},System.Func{``0,System.Boolean},System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Adds attributes to the specified collection of ObjectEditPropertyMetaOf based on a condition.
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="metas">The collection of metadata definitions.</param>
            <param name="condition">A function that determines whether attributes should be added.</param>
            <param name="attributes">An array of key-value pairs representing attributes to add.</param>
            <returns>A modified IEnumerable of ObjectEditPropertyMetaOf with attributes added based on the specified condition.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithAttributesIf``2(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0}},System.Func{``0,System.Boolean},System.Action{``1}[])">
            <summary>
            Adds attributes to the specified collection of ObjectEditPropertyMetaOf based on a condition, using component options.
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TComponent">The type of the component for which attributes are being added.</typeparam>
            <param name="metas">The collection of metadata definitions.</param>
            <param name="condition">A function that determines whether attributes should be added.</param>
            <param name="options">An array of actions to configure the component instances.</param>
            <returns>A modified IEnumerable of ObjectEditPropertyMetaOf with attributes added based on the specified condition.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithAttributesIf``1(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0}},System.Func{``0,System.Boolean},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Adds attributes to the specified collection of ObjectEditPropertyMetaOf based on a condition, using a dictionary of attributes.
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="metas">The collection of metadata definitions.</param>
            <param name="condition">A function that determines whether attributes should be added.</param>
            <param name="attributes">A dictionary of attributes to add.</param>
            <returns>A modified IEnumerable of ObjectEditPropertyMetaOf with attributes added based on the specified condition.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithAttributesIf``1(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0}},System.Func{``0,System.Boolean},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Adds attributes to the specified collection of ObjectEditPropertyMetaOf based on a condition, using a dictionary of attributes.
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="metas">The collection of metadata definitions.</param>
            <param name="condition">A function that determines whether attributes should be added.</param>
            <param name="attributes">A dictionary of attributes to add.</param>
            <returns>A modified IEnumerable of ObjectEditPropertyMetaOf with attributes added based on the specified condition.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.IgnoreOnExport``1(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0}},System.Boolean)">
            <summary>
            Ignores properties in the specified collection of ObjectEditPropertyMetaOf during export based on the provided boolean.
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="metas">The collection of metadata definitions.</param>
            <param name="ignore">A boolean indicating if the properties should be ignored during export.</param>
            <returns>A modified IEnumerable of ObjectEditPropertyMetaOf with specified properties ignored during export.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.IgnoreOnImport``1(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0}},System.Boolean)">
            <summary>
            Ignores properties in the specified collection of ObjectEditPropertyMetaOf during import based on the provided boolean.
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="metas">The collection of metadata definitions.</param>
            <param name="ignore">A boolean indicating if the properties should be ignored during import.</param>
            <returns>A modified IEnumerable of ObjectEditPropertyMetaOf with specified properties ignored during import.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.IgnoreOnExportAndImport``1(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0}},System.Boolean)">
            <summary>
            Ignores properties in the specified collection of ObjectEditPropertyMetaOf during both export and import based on the provided boolean.
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="metas">The collection of metadata definitions.</param>
            <param name="ignore">A boolean indicating if the properties should be ignored during both export and import.</param>
            <returns>A modified IEnumerable of ObjectEditPropertyMetaOf with specified properties ignored during both export and import.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.AsDisabledIf``1(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Disables properties in the specified collection of ObjectEditPropertyMetaOf based on a condition.
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="metas">The collection of metadata definitions.</param>
            <param name="condition">A function that determines whether a property should be disabled.</param>
            <returns>A modified IEnumerable of ObjectEditPropertyMetaOf with properties disabled based on the specified condition.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithEditConfirmation``1(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0}},System.String,MudBlazor.Extensions.Components.ObjectEdit.Options.AdditionalComponentRenderPosition)">
            <summary>
            Protects the property from being edited by the user until a confirmation is received.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithEditConfirmation``1(System.Collections.Generic.IEnumerable{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf{``0}},MudBlazor.Extensions.Components.ObjectEdit.Options.IConfirmationProtection,MudBlazor.Extensions.Components.ObjectEdit.Options.AdditionalComponentRenderPosition)">
            <summary>
            Protects the property from being edited by the user until a confirmation is received.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WrapIn``1(MudBlazor.Extensions.Components.ObjectEdit.Options.IRenderData,System.Action{``0}[])">
            <summary>
            Wraps the current render data within a new component of type <typeparamref name="TWrapperComponent"/>, allowing for additional configuration through options.
            <typeparam name="TWrapperComponent">The component type to wrap around the current render data.</typeparam>
            <param name="renderData">The current render data to be wrapped.</param>
            <param name="options">A set of actions to configure the wrapper component.</param>
            <returns>The modified render data wrapped inside the specified component.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WrapIn(MudBlazor.Extensions.Components.ObjectEdit.Options.IRenderData,MudBlazor.Extensions.Components.ObjectEdit.Options.IRenderData)">
            <summary>
            Wraps the current render data with another provided render data as its wrapper.
            <param name="renderData">The current render data to be wrapped.</param>
            <param name="wrappingRenderData">The render data to use as a wrapper.</param>
            <returns>The wrapper render data, now containing the original render data within it.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.AddComponentAfter``1(MudBlazor.Extensions.Components.ObjectEdit.Options.IRenderData,System.Action{``0}[])">
            <summary>
            Adds a component of type <typeparamref name="TComponent"/> after the current render data, allowing for additional configuration through options.
            <typeparam name="TComponent">The component type to add.</typeparam>
            <param name="renderData">The current render data before which the new component is to be added.</param>
            <param name="options">A set of actions to configure the added component.</param>
            <returns>The newly added component's render data.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.AddComponentBefore``1(MudBlazor.Extensions.Components.ObjectEdit.Options.IRenderData,System.Action{``0}[])">
            <summary>
            Adds a component of type <typeparamref name="TComponent"/> before the current render data, allowing for additional configuration through options.
            <typeparam name="TComponent">The component type to add.</typeparam>
            <param name="renderData">The current render data after which the new component is to be added.</param>
            <param name="options">A set of actions to configure the added component.</param>
            <returns>The newly added component's render data.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.AddComponentAfter(MudBlazor.Extensions.Components.ObjectEdit.Options.IRenderData,MudBlazor.Extensions.Components.ObjectEdit.Options.IRenderData)">
            <summary>
            Adds an existing render data component after the current render data.
            <param name="renderData">The current render data before which the new render data is to be added.</param>
            <param name="afterRenderData">The render data to add after the current one.</param>
            <returns>The added render data.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.AddComponentBefore(MudBlazor.Extensions.Components.ObjectEdit.Options.IRenderData,MudBlazor.Extensions.Components.ObjectEdit.Options.IRenderData)">
            <summary>
            Adds an existing render data component before the current render data.
            <param name="renderData">The current render data after which the new render data is to be added.</param>
            <param name="afterRenderData">The render data to add before the current one.</param>
            <returns>The added render data.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithAdditionalComponent(MudBlazor.Extensions.Components.ObjectEdit.Options.IRenderData,MudBlazor.Extensions.Components.ObjectEdit.Options.IRenderData,System.Boolean)">
            <summary>
            Adds an additional component (either before or after) to the current render data.
            <param name="renderData">The current render data to which the additional component is to be added.</param>
            <param name="additionalRenderData">The additional render data to add.</param>
            <param name="renderAfter">Boolean indicating whether the additional component should be rendered after (true) or before (false) the current render data.</param>
            <returns>The added render data component.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithAdditionalComponent(MudBlazor.Extensions.Components.ObjectEdit.Options.IRenderData,MudBlazor.Extensions.Components.ObjectEdit.Options.IRenderData,MudBlazor.Extensions.Components.ObjectEdit.Options.AdditionalComponentRenderPosition)">
            <summary>
            Adds an additional component (either before or after) to the current render data.
            <param name="renderData">The current render data to which the additional component is to be added.</param>
            <param name="additionalRenderData">The additional render data to add.</param>
            <param name="position">Enum indicating whether the additional component should be rendered after or before the current render data.</param>
            <returns>The added render data component.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithAdditionalComponent``1(MudBlazor.Extensions.Components.ObjectEdit.Options.IRenderData,MudBlazor.Extensions.Components.ObjectEdit.Options.AdditionalComponentRenderPosition,System.Action{``0}[])">
            <summary>
            Adds a component of type <typeparamref name="TComponent"/> at the specified position to the current render data, allowing for additional configuration through options.
            <typeparam name="TComponent">The component type to add.</typeparam>
            <param name="renderData">The current render data before which the new component is to be added.</param>
            <param name="options">A set of actions to configure the added component.</param>
            <returns>The newly added component's render data.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WrapInMudItem(MudBlazor.Extensions.Components.ObjectEdit.Options.IRenderData,System.Action{MudBlazor.MudItem}[])">
            <summary>
            Wraps the current render data within a MudItem component, allowing for additional configuration through options.
            <param name="renderData">The current render data to be wrapped.</param>
            <param name="options">A set of actions to configure the MudItem wrapper component.</param>
            <returns>The modified render data wrapped inside a MudItem component.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditExtensions.WithoutValueBinding(MudBlazor.Extensions.Components.ObjectEdit.Options.IRenderData)">
            <summary>
            Disables value binding for the current render data.
            <param name="renderData">The render data for which value binding should be disabled.</param>
            <returns>The render data with value binding disabled.</returns>
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditForm`1">
            <summary>
            Powerful component to edit an object and its properties.
            </summary>
            <typeparam name="T">Type of object being edited</typeparam>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditForm`1.HasErrors">
            <summary>
            Returns true if there are any errors in the edit form fields
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditForm`1.Validated">
            <summary>
            Returns true if both FluentValidation and DataAnnotation validation have been completed successfully
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditForm`1.CancelButtonVariant">
            <summary>
            The variant of the cancel button
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditForm`1.SaveButtonVariant">
            <summary>
            The variant of the save button
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditForm`1.CancelButtonColor">
            <summary>
            The color of the cancel button
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditForm`1.SaveButtonColor">
            <summary>
            The color of the save button
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditForm`1.CancelButtonIcon">
            <summary>
            The icon of the cancel button
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditForm`1.SaveButtonIcon">
            <summary>
            The icon of the save button
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditForm`1.SaveButtonIconAlignment">
            <summary>
            The alignment of the icon for the save button
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditForm`1.CancelButtonIconAlignment">
            <summary>
            The alignment of the icon for the cancel button
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditForm`1.CancelButtonAsIconButton">
            <summary>
            If true, display the cancel button as an icon button
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditForm`1.SaveButtonAsIconButton">
            <summary>
            If true, display the save button as an icon button
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditForm`1.OnValidSubmit">
            <summary>
            An event callback for when the form is successfully submitted
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditForm`1.OnCancel">
            <summary>
            An event callback for when the cancel button is pressed
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditForm`1.Elevation">
            <summary>
            The elevation of the card containing the form
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditForm`1.ActionBarColor">
            <summary>
            The color of the action bar
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditForm`1.StickyActionBar">
            <summary>
            If true, the action bar is sticky
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditForm`1.StickyStickyActionBarBottom">
            <summary>
            The distance from the bottom of the viewport to the bottom of the sticky action bar
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditForm`1.ActionBarStyle">
            <summary>
            The style of the action bar
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditForm`1.ActionBarClass">
            <summary>
            The class of the action bar
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditForm`1.FormClass">
            <summary>
            The class of the form itself
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditForm`1.FormStyle">
            <summary>
            The class of the form itself
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditForm`1.CardClass">
            <summary>
            The class of the card containing the form
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditForm`1.SaveButtonText">
            <summary>
            The text displayed on the save button
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditForm`1.CancelButtonText">
            <summary>
            The text displayed on the cancel button
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditForm`1.ShowSaveButton">
            <summary>
            If true, display the save button
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditForm`1.ShowCancelButton">
            <summary>
            If true, display the cancel button
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditForm`1.ActionBarActionAlignment">
            <summary>
            The alignment of the action bar buttons
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditForm`1.ActionContent">
            <summary>
            RenderFragment of action content
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditForm`1.RenderActionContentFirst">
            <summary>
            If true, render action content before the form
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditForm`1.RenderFormActionsInToolBar">
            <summary>
            If true, renders form actions (submit, cancel) in a tool bar
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditForm`1.Form">
            <summary>
            Reference to EditForm
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditForm`1.OverwriteActionBar">
            <summary>
            Returns true if OverwriteActionBar is false, otherwise returns false
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditForm`1.UseFormSubmit">
            <summary>
            If true, submit the form on button click. Otherwise, do not submit until validation is complete
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditForm`1.SubmitButtonType">
            <summary>
            Returns the button type of the submit button
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditForm`1._dataValidations">
            <summary>
            Returns a list of validation results produced by DataAnnotation validation
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditForm`1.OnSubmitButtonClick">
            <summary>
            Handles form submission when UseFormSubmit is false
            </summary>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditForm`1.OnSubmit(Microsoft.AspNetCore.Components.Forms.EditContext)">
            <summary>
            Called when the form is submitted
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditForm`1.Cancel">
            <summary>
            Resets the form
            </summary>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditForm`1.GetErrors">
            <summary>
            Returns a list of all errors in the form fields
            </summary>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditForm`1.GetFluentValidationErrors">
            <summary>
            Returns a list of validation errors produced by FluentValidation validation
            </summary>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditForm`1.GetDataAnnotationErrors">
            <summary>
            Returns a list of validation errors produced by DataAnnotation validation
            </summary>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditForm`1.GetActionBarStyle">
            <summary>
            Applies styles to the action bar based on properties
            </summary>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditForm`1.GetActionBarClass">
            <summary>
            Returns the class of the action bar based on properties
            </summary>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditForm`1.OnPropertyChange(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta)">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditForm`1.Validate">
            <summary>
            Validates the form
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.ToStringFunc">
            <summary>
            Function to display a string representation of the object
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.MetaInformation">
            <summary>
            The object edit metadata for the component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.MultiSearch">
            <summary>
            Set to true to allow multiple values
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.RenderIgnoredReferences">
            <summary>
            If you need the reference for dynamic ignored fields for example because of Model Validation or resets you should set this to true
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.IsLoading">
            <summary>
            Whether the component should show a loading indicator.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.AutoUpdateConditions">
            <summary>
            Whether the component should automatically update all registered Conditions.
            Otherwise you need to call UpdateAllConditions on your own.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.Height">
            <summary>
            The height of the component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.MaxHeight">
            <summary>
            The maximum height of the component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.SizeUnit">
            <summary>
            The size unit of the component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.ImportNeedsConfirmation">
            <summary>
            Whether the import action needs confirmation.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.RemoveIgnoredFromImport">
            <summary>
            If this setting is true, all properties which are ignored by meta config will be removed
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.SetPropertiesAfterImport">
            <summary>
            If this setting is true, after import all properties are set instead of full value assignment
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.StateKey">
            <summary>
            The state key for saving and restoring the component state.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.ImportConfirmText">
            <summary>
            The text for confirming an import action.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.ImportCancelText">
            <summary>
            The text for cancelling an import action.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.Virtualize">
            <summary>
            Whether the component should be virtualized.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.LightOverlayLoadingBackground">
            <summary>
            Whether the component should have a light overlay loading background.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.AutoOverlay">
            <summary>
            Whether the component should automatically display an overlay when loading.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.ToolbarButtonColor">
            <summary>
            The color of the toolbar buttons.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.AddScrollToTop">
            <summary>
            Whether the component should add a scroll to top button.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.ScrollToTopPosition">
            <summary>
            The position of the scroll to top button.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.AllowSearch">
            <summary>
            Whether search functionality is enabled.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.AllowExport">
            <summary>
            Whether export functionality is enabled.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.AllowImport">
            <summary>
            Whether import functionality is enabled.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.AutoSaveRestoreState">
            <summary>
            Whether the component should automatically save and restore its state.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.StoreAndReadValueFromUrl">
            <summary>
            If this is true, the component adds the value if possible to url and reads it automatically if its present in Url
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.StateTargetStorage">
            <summary>
            The storage location for saving and restoring component state.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.ExportFileName">
            <summary>
            The file name for exporting the component data.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.ImportIcon">
            <summary>
            The icon to display for the import action.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.SearchIcon">
            <summary>
            The icon to display for the search action.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.ExpandCollapseIcon">
            <summary>
            The icon to display for expanding and collapsing.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.ExportIcon">
            <summary>
            The icon to display for the export action.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.AutoSkeletonOnLoad">
            <summary>
            Whether to automatically display the skeleton loading state on component load.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.ToolbarColor">
            <summary>
            The color of the toolbar.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.GroupLineColor">
            <summary>
            The color of the group lines in the component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.GroupElevation">
            <summary>
            The elevation of the group.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.ToolBarElevation">
            <summary>
            The elevation of the toolbar.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.ToolBarClassObjectEdit">
            <summary>
            A CSS class for the component toolbar.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.ToolBarPaperClass">
            <summary>
            A CSS class for the component toolbar paper.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.StickyToolbar">
            <summary>
            Whether the toolbar should be sticky to the top of the component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.StickyToolbarTop">
            <summary>
            The positioning CSS value for a sticky toolbar.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.AfterImport">
            <summary>
            Called after the component has imported data.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.AfterExport">
            <summary>
            Called after the component has exported data.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.BeforeExport">
            <summary>
            Called before the component export's data. Provides the export data to be manipulated.
            If you need to change content of parameter to manipulate export data you can do it here
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.BeforeImport">
            <summary>
            Called before the component import's data. Provides the import data to be manipulated.
            Here you can change content of parameter to manipulate import data
            For example you can remove some properties or change the values
            This is called before the import is executed
            importData.Json = "{\"FirstName\": \"Changed Test\"}";
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.PropertyChanged">
            <summary>
            Called when a property of the edited object is changed.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.ShowPathAsTitleForEachProperty">
            <summary>
            Whether to show the property path as title for each property.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.PathDisplayMode">
            <summary>
            The path display mode for the component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.GroupingStyle">
            <summary>
            The grouping style for the component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.FilterMode">
            <summary>
            The filter mode for the component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.SearchActiveChanged">
            <summary>
            Event callback if filter input is toggled
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.SearchActive">
            <summary>
            Search is active
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.Filter">
            <summary>
            The filter value for the component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.Filters">
            <summary>
            The filter values for the component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.AutoHideDisabledFields">
            <summary>
            Whether to automatically hide disabled fields.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.DisableGrouping">
            <summary>
            Whether to disable grouping.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.DefaultGroupName">
            <summary>
            The default group name for the component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.DisableFieldFallback">
            <summary>
            Whether to disable field fallback.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.WrapInMudGrid">
            <summary>
            Whether to wrap the component in a MudGrid component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.GroupsCollapsible">
            <summary>
            Whether groups are collapsible in the component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.GlobalResetSettings">
            <summary>
            The global reset settings for the component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.DefaultPropertyResetSettings">
            <summary>
            The default property reset settings for the component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.ResetConfirmationMessageBoxOptions">
            <summary>
            The message box options for reset confirmation.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.ResetConfirmationDialogOptions">
            <summary>
            The dialog options for reset confirmation.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.MetaConfiguration">
            <summary>
            The action to perform for object metadata configuration.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.MetaConfigurationAsync">
            <summary>
            The async action to perform for object metadata configuration.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.ToolBarActionAlignment">
            <summary>
            The alignment of actions in the component toolbar.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.ToolBarContent">
            <summary>
            The content to display in the component toolbar.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.ConfigureBehaviourForRegisteredConfigurations">
            <summary>
            The behaviour how registered Meta and configured meta should applied
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.ConfigureMetaInformationAlways">
            If this setting is true a manual passed MetaInformation will also re configured
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.ErrorMessage">
            <summary>
            Error message to display
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.CustomResetFunction">
            <summary>
            Set this to handle Reset on your own
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.OnPickerClosedAsync">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditPicker`1.AfterValueChanged(`0,`0)">
            <inheritdoc />
        </member>
        <member name="T:MudBlazor.Extensions.Components.ObjectEdit.MudExPropertyEdit">
            <summary>
            Editor for a property of an object. Used internally inside the MudExObjectEdit
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExPropertyEdit.AutoFocus">
            <summary>
            Editor should be focused on load
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExPropertyEdit.ReadOnlyOverwrite">
            <summary>
            If this is set all properties will be readonly depending on the value otherwise the property settings for meta configuration will be used
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExPropertyEdit.StoreAndReadValueFromUrl">
            <summary>
            If this is true, the component adds the value if possible to url and reads it automatically if its present in Url
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExPropertyEdit.UriPrefixForKey">
            <summary>
            A prefix that is used for the key in the url
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExPropertyEdit.ShowPathAsTitle">
            <summary>
            Set this to true to display whole property path as title
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExPropertyEdit.IsLoading">
            <summary>
            Gets or sets the IsLoading state
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExPropertyEdit.AutoSkeletonOnLoad">
            <summary>
            Creates a skeleton while loading if this is true
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExPropertyEdit.ActiveFilterTerm">
            <summary>
            ActiveFiler string
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExPropertyEdit.PropertyResetSettings">
            <summary>
            Settings for the property reset behavior
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExPropertyEdit.PropertyMeta">
            <summary>
            PropertyMeta from ObjectEdit where Value is present in
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExPropertyEdit.PropertyValueChanged">
            <summary>
            EventCallback if value changed
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExPropertyEdit.DisableFieldFallback">
            <summary>
            If this setting is true and no RenderData is available there will no fallback in a textedit rendered
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExPropertyEdit.Editor">
            <summary>
            The rendered component
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExPropertyEdit.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExPropertyEdit.OnFinishedRenderAsync">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExPropertyEdit.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExPropertyEdit.RaiseValueChanged">
            <summary>
            Raises the ValueChanged Event
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExPropertyEdit.RenderAs(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder,MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta)">
            <summary>
            Renders the editor with a CustomRenderer
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExPropertyEdit.ResetAsync">
            <summary>
            Resets the Editor
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExPropertyEdit.ClearAsync">
            <summary>
            Clears the Editor
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExPropertyEdit.Invalidate(System.Boolean)">
            <summary>
            Refreshes the UI
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExPropertyEdit.GetCurrentValue">
            <summary>
            Returns the current Value independent of the PropertyMeta for example if binding is disabled
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExPropertyEdit.SetValue(System.Object)">
            <summary>
            Sets a Value independent of the PropertyMeta for example if binding is disabled
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.ObjectEdit.MudExStructuredDataEditor">
            <summary>
            A powerful editor that can handle json, xml or yaml content
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.ObjectEdit.MudExStructuredDataEditor.TempProperty">
            <summary>
            Data strings that only represent an array or list will be converted to an object with this property name
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExStructuredDataEditor.DataType">
            <summary>
            Input type of your data string
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExStructuredDataEditor.FormatJson">
            <summary>
            If true and type for data is json, the editor will format the json string
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExStructuredDataEditor.InvalidDataMessage">
            <summary>
            Error Message that is shown when data is invalid for the given DataType
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExStructuredDataEditor.Data">
            <summary>
            The data string to edit
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExStructuredDataEditor.ReadOnly">
            <summary>
            Editor is read only
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.MudExStructuredDataEditor.DataChanged">
            <summary>
            Event when data changed
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExStructuredDataEditor.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExStructuredDataEditor.OnPropertyChange(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta)">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExStructuredDataEditor.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.MudExStructuredDataEditor.ConfigureMetaBase(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta{Nextended.Core.Helper.IStructuredDataObject})">
            <inheritdoc />
        </member>
        <member name="T:MudBlazor.Extensions.Components.ObjectEdit.Options.AdditionalComponentRenderPosition">
            <summary>
            The position at which to render an additional component.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.ObjectEdit.Options.AdditionalComponentRenderPosition.Before">
            <summary>
            Render the additional component before the current component.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.ObjectEdit.Options.AdditionalComponentRenderPosition.After">
            <summary>
            Render the additional component after the current component.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.ObjectEdit.Options.BooleanInputProtectionBase`1">
            <summary>
            Base class for a boolean input protection instance, providing a set of properties and methods to configure the boolean input protection.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.BooleanInputProtectionBase`1.#ctor(System.String,System.Action{`0})">
            <summary>
            Constructor for a boolean input protection instance.
            </summary>
            <param name="tooltip"></param>
            <param name="configure"></param>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.BooleanInputProtectionBase`1.AdditionalRenderData">
            <inheritdoc />
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.BooleanInputProtectionBase`1.ConfirmationCallback">
            <inheritdoc />
        </member>
        <member name="T:MudBlazor.Extensions.Components.ObjectEdit.Options.CheckBoxConfirmationProtection">
            <inheritdoc />
        </member>
        <member name="T:MudBlazor.Extensions.Components.ObjectEdit.Options.ConfirmationProtection">
            <summary>
            Provides a set of static factory options to protect a component with a confirmation.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.ObjectEdit.Options.ICustomRenderer">
            <summary>
            Interface can implemented and used in object edit RenderWith to completely create an own property renderer
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.ICustomRenderer.Render(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder,Microsoft.AspNetCore.Components.IHandleEvent,MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta)">
            <summary>
            If attached as setting in ObjectEditPropertyMeta.RenderData this is called by MudExPropertyEdit
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.ObjectEdit.Options.DialogConfirmationProtection">
            <summary>
            Base class for a boolean input protection instance, providing a set of properties and methods to configure the boolean input protection.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.DialogConfirmationProtection.OnButtonSet(MudBlazor.MudToggleIconButton)">
            <inheritdoc />
        </member>
        <member name="T:MudBlazor.Extensions.Components.ObjectEdit.Options.IConfirmationProtection">
            <summary>
            Interface for a confirmation protection instance, providing a set of properties and methods to configure the confirmation protection.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.IConfirmationProtection.AdditionalRenderData">
            <summary>
            Additional render data to be used for the confirmation protection.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.IConfirmationProtection.ConfirmationCallback">
            <summary>
            Callback to be invoked when the confirmation protection is triggered.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta">
            <summary>
            Base class for ObjectEditMeta instances, providing a set of properties and methods to configure the meta instance.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta.Parent">
            <summary>
            Parent ObjectEditMeta instance, if any.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta.AllProperties">
            <summary>
            All properties of the object to be edited.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta.AllIgnored">
            <summary>
            All ignored properties of the object to be edited.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta.AllRenderedWith``1">
            <summary>
            Returns all properties that are rendered with a component of type <typeparamref name="TComponent"/>.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta.AllRenderedWith(System.Type)">
            <summary>
            Returns all properties that are rendered with a component of the given type.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta.BindingFlags">
            <summary>
            Binding flags to be used when reflecting over the object to be edited.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta.Property(System.String)">
            <summary>
            Returns the ObjectEditPropertyMeta instance for the property with the given name.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta.Properties(System.String[])">
            <summary>
            Returns the ObjectEditPropertyMeta instances for the properties with the given names.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta.Property(System.Reflection.MemberInfo[])">
            <summary>
            Returns the ObjectEditPropertyMeta instance for the property with the given path.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta.Create``1(``0,System.Action{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta{``0}}[])">
            <summary>
            Creates a new ObjectEditMeta instance for the given object, with the given configuration actions applied.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta.IsEditableComponentParameter(System.Reflection.PropertyInfo)">
            <summary>
            Returns whether the given property is editable.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta`1">
            <summary>
            Object edit metadata for a specific object type.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta`1.Value">
            <summary>
            Value of the object to be edited.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta`1.PropertyResolverFunctions">
            <summary>
            Property resolver functions to be used to determine which properties to include in the edit.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta`1.#ctor(`0)">
            <summary>
            Creates a new instance of ObjectEditMeta for the given object.
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta`1.AllProperties">
            <summary>
            All properties of the object to be edited.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta`1.PropertiesExcept(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            All properties of the object to be edited with excepting the given.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta`1.Properties(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Returns the properties of the object to be edited with given expression.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta`1.Properties``1">
            <summary>
            All properties of the object to be edited with given type.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Returns the property of the object to be edited with given expression.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta`1.UpdateAllConditionalSettings(`0)">
            <summary>
            Updates the conditional settings of all properties of the object to be edited.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta`1.UpdateAllConditionalSettings">
            <summary>
            Updates the conditional settings of all properties of the object to be edited.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta">
            <summary>
            Metadata for a property of an object to be edited.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta.MainEditMeta">
            <summary>
            Reference to the main edit meta data.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta.Style">
            <summary>
            Style
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta.Class">
            <summary>
            Class
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta.Parent">
            <summary>
            Parent property meta data.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta.PropertyName">
            <summary>
            Property name as full path.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta.Children">
            <summary>
            Children property metadata of this property.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta.HasChildren">
            <summary>
            Returns true if the property has children.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta.Settings">
            <summary>
            Settings for the property metadata.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta.GroupInfo">
            <summary>
            Group information for the property metadata.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta.ReferenceHolder">
            <summary>
            Original reference holder of the property.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta.PropertyInfo">
            <summary>
            Property information of the property.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta.#ctor(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Creates a new instance of ObjectEditPropertyMeta.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta.#ctor(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Creates a new instance of ObjectEditPropertyMeta.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta.Value">
            <summary>
            Value of the property.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta.RenderData">
            <summary>
            Render data for the property.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta.ShouldRender">
            <summary>
            Returns true if the property should be rendered.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta.UpdateConditionalSettings``1(``0)">
            <summary>
            Updates all conditional settings for this property metadata.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta.ForceUpdate">
            <summary>
            Forces an update of the property metadata and the containing editor.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaGroupInfo">
            <summary>
            Group information for a set of ObjectEditPropertyMeta instances.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaGroupInfo.Name">
            <summary>
            Name of the group.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf`1">
            <summary>
            ObjectEditPropertyMetaOf is a generic version of ObjectEditPropertyMeta, used to store metadata about the model object.
            </summary>
            <typeparam name="T">Type of the main model (not the property type)</typeparam>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf`1.ModelType">
            <summary>
            ModelType is the type of the main model 
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf`1.MainEditMeta">
            <summary>
            MainEditMeta is the main ObjectEditMeta instance that contains this property.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf`1.#ctor(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Creates a new ObjectEditPropertyMetaOf instance.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaOf`1.#ctor(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Creates a new ObjectEditPropertyMetaOf instance.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaSettings">
            <summary>
            Property settings for an ObjectEditPropertyMeta instance.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaSettings.DefaultLabelResolverFn">
            <summary>
            Default Function to resolve the label for the property.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaSettings.DefaultDescriptionResolverFn">
            <summary>
            Default Function to resolve the description for the property.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaSettings.Owner">
            <summary>
            Owner of the settings.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaSettings.#ctor(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta)">
            <summary>
            Creates a new instance of ObjectEditPropertyMetaSettings.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaSettings.Order">
            <summary>
            Order of the property.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaSettings.Localizer">
            <summary>
            Localizer to use for the property.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaSettings.IsEditable">
            <summary>
            Determines if the property is editable.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaSettings.AutoFocus">
            <summary>
            Should have Auto focus.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaSettings.Ignored">
            <summary>
            Determines if the property is ignored.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaSettings.IgnoreOnExport">
            <summary>
            Determines if the property is ignored on export.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaSettings.IgnoreOnImport">
            <summary>
            Determines if the property is ignored on import.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaSettings.ResetSettings">
            <summary>
            Settings for resetting the property.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaSettings.ValidationComponent">
            <summary>
            Should the property be validated by a separate validation component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaSettings.LabelBehaviour">
            <summary>
            Behaviour of the label.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaSettings.LabelResolverFn">
            <summary>
            Function to resolve the label for the property.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaSettings.DescriptionResolverFn">
            <summary>
            function to resolve the description for the property.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaSettings.AddCondition``1(System.Func{``0,System.Boolean},System.Action{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaSettings},System.Action{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMetaSettings})">
            <summary>
            Adds a condition to the settings.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.ObjectEdit.Options.LabelBehaviour">
            <summary>
            Label behaviour for a property.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.ObjectEdit.Options.LabelBehaviour.DefaultComponentLabeling">
            <summary>
            Default component labeling.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.ObjectEdit.Options.LabelBehaviour.SeparateLabelComponentOnly">
            <summary>
            Separate label component only.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.ObjectEdit.Options.LabelBehaviour.Both">
            <summary>
            Default component labeling and separate label component.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.ObjectEdit.Options.LabelBehaviour.NoLabel">
            <summary>
            Render no label.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.ObjectEdit.Options.PropertyValueWrapper`1">
            <summary>
            Wraps the value of a property to be edited, allowing for additional configuration through options.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.PropertyValueWrapper`1.Value">
            <summary>
            Value of the property to be edited.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.ObjectEdit.Options.PropertyValueWrapper">
            <summary>
            Wraps the value of a property to be edited, allowing for additional configuration through options.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.ObjectEdit.Options.PropertyValueWrapper.Meta">
            <summary>
            Metadata of the property to be edited.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.PropertyValueWrapper.Value">
            <summary>
            Value of the property to be edited.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderData">
            <summary>
            Render data for a component to be rendered.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderData.PropertyMeta">
            <summary>
            Property meta for the current render data.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderData.Wrapper">
            <summary>
            Wrapper component as IRenderData for the current render data.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderData.RenderDataBeforeComponent">
            <summary>
            Render data to be rendered before the current component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderData.RenderDataAfterComponent">
            <summary>
            Render data to be rendered after the current component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderData.ComponentType">
            <summary>
            Type of the component to be rendered.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderData.Attributes">
            <summary>
            Attributes to be passed to the component to be rendered.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderData.CustomRenderer">
            <summary>
            Custom renderer for the component to be rendered.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderData.InitValueBinding(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta,System.Func{System.Threading.Tasks.Task})">
            <summary>
            Initializes the value binding for the current render data.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderData.OneTimeBinding">
            <summary>
            If this is set to true, the binding will only be done once at first render otherwise StateChange updates binding as well.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderData.AlwaysMapToField">
            <summary>
            If this is set to true and field and property type are equal it will anyhow map the propertyType to the fieldType what creates a clone of an object.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderData.AlwaysMapToProperty">
            <summary>
            If this is set to true and field and property type are equal it will anyhow map the fieldType to the propertyType what creates a clone of an object.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderData.ComponentReference">
            <summary>
            Component reference for the current render data.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderData.OnRendered``1(System.Action{``0})">
            <summary>
            Action to be executed when the component reference is set.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderData.IsValidParameterAttribute(System.String,System.Object)">
            <summary>
            Returns whether the given key and value are valid parameters for the current component type.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderData.ValidAttributes">
            <summary>
            Set of valid attributes for the current component type.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderData.TrySetAttributeIfAllowed(System.String,System.Func{System.Object},System.Boolean)">
            <summary>
            Try to set the given attribute if it is allowed for the current component type.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderData.ConvertToPropertyValue(System.Object)">
            <summary>
            Convert the given value to a property value.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderData.DisableValueBinding">
            <summary>
            Set to true to disable value binding for the current render data.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderData.SetValue(System.Object)">
            <summary>
            Set the value for the current render data.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderData.ValueField">
            <summary>
            Value field for the component used in current render data.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderData.Conditions">
            <summary>
            Added conditions for the current render data.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderData.#ctor(System.Type,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Create a new render data for the given component type with the given attributes.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderData.SetAttributes(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Set the attributes for the current render data.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderData.AddAttributes(System.Boolean,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Add the given attributes to the current render data.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderData.TrySetAttributeIfAllowed(System.String,System.Object,System.Boolean)">
            <summary>
            Try to set the given attribute if it is allowed for the current component type.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderData.Clone">
            <summary>
            Clone the current render data.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderData.UpdateConditionalSettings``1(``0)">
            <summary>
            Update the conditional settings for the current render data.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderData.AddCondition``1(System.Func{``0,System.Boolean},System.Action{MudBlazor.Extensions.Components.ObjectEdit.Options.IRenderData},System.Action{MudBlazor.Extensions.Components.ObjectEdit.Options.IRenderData})">
            <summary>
            Add a condition for the current render data.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderData.AddAttributesIf``1(System.Func{``0,System.Boolean},System.Boolean,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Adds an attribute to the current render data if the given condition becomes true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderData.SetAttributesIf``1(System.Func{``0,System.Boolean},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Sets the given attributes for the current render data if the given condition becomes true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderData.For``3(System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Action{``0},System.Func{``1,``2},System.Func{``2,``1})">
            <summary>
            Returns a new RenderData instance for the given component type, with the specified options.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderData.For``3(System.Linq.Expressions.Expression{System.Func{``0,``2}},``0,System.Func{``1,``2},System.Func{``2,``1})">
            <summary>
            Returns a new RenderData instance for the given component type, with the specified options.
            </summary>    
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderData.For``3(System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Func{``1,``2},System.Func{``2,``1})">
            <summary>
            Returns a new RenderData instance for the given component type, with the specified options.
            </summary>    
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderData.For``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Action{``0})">
            <summary>
            Returns a new RenderData instance for the given component type, with the specified options.
            </summary>    
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderData.For``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},``0)">
            <summary>
            Returns a new RenderData instance for the given component type, with the specified options.
            </summary>    
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderData.For``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Returns a new RenderData instance for the given component type, with the specified options.
            </summary>    
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderData.For``1(System.Action{``0})">
            <summary>
            Returns a new RenderData instance for the given component type, with the specified options.
            </summary>    
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderData.For``1(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Returns a new RenderData instance for the given component type, with the specified options.
            </summary>    
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderData.For(System.Type,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Returns a new RenderData instance for the given component type, with the specified options.
            </summary>    
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderData.For(MudBlazor.Extensions.Components.ObjectEdit.Options.ICustomRenderer)">
            <summary>
            Returns a new RenderData instance for the given component type, with the specified options.
            </summary>    
        </member>
        <member name="T:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderData`2">
            <summary>
            Render data for a component to be used in the ObjectEdit component.
            </summary>
            <typeparam name="TPropertyType">Property type</typeparam>
            <typeparam name="TFieldType">Filed type in the component</typeparam>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderData`2.ToFieldTypeConverterFn">
            <summary>
            Converter function to convert the property type to the field type.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderData`2.ToPropertyTypeConverterFn">
            <summary>
            Converter function to convert the field type to the property type.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderData`2.#ctor(System.String,System.Type,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Constructor for the RenderData class.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderData`2.UpdateConditionalSettings``1(``0)">
            <summary>
            Updates the conditional settings for the current render data.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderData`2.ConvertToPropertyValue(System.Object)">
            <summary>
            Converts the field type to the property type.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderData`2.InitValueBinding(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta,System.Func{System.Threading.Tasks.Task})">
            <summary>
            Initializes the value binding for the current render data.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderData`2.AddAttributesIf(System.Func{`0,System.Boolean},System.Boolean,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Adds the given attributes to the current render data if the condition returns true.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderData`2.ValueWrapper">
            <summary>
            Reference to the value field.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderData`2.SetValue(System.Object)">
            <summary>
            Sets the value of the current property for this render data.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderDataDefaults">
            <summary>
            Class containing default render data for various types of properties.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderDataDefaults.AddRenderDataProvider(System.IServiceProvider)">
            <summary>
            Adds a default render data providers to the list of providers.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderDataDefaults.AddRenderDataProvider(MudBlazor.Extensions.Components.ObjectEdit.IDefaultRenderDataProvider[])">
            <summary>
            Adds a default render data providers to the list of providers.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderDataDefaults.RemoveRenderDataProvider(MudBlazor.Extensions.Components.ObjectEdit.IDefaultRenderDataProvider[])">
            <summary>
            Removes a default render data providers from the list of providers.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderDataDefaults.RegisterMudExColorEditForColors">
            <summary>
            Registers the MudExColorEdit component for various color types.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderDataDefaults.RegisterMudColorPickerForColors">
            <summary>
            Registers the MudColorPicker component for various color types.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderDataDefaults.ColorFromStringOptions``1(System.Collections.Generic.KeyValuePair{System.String,MudBlazor.Utilities.MudColor}[])">
            <summary>
            Returns the meta configuration for rendering a color picker for a string property.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderDataDefaults.GetRenderData(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta)">
            <summary>
            Returns the render data for the given property meta.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderDataDefaults.RegisterDefault``2(System.Action{``1})">
            <summary>
             Registers a default RenderData configuration for a property type using a component with additional options.
             <typeparam name="TPropertyType">The type of the property to register the default for.</typeparam>
             <typeparam name="TComponent">The component type to use for rendering.</typeparam>
             <param name="options">An action to configure the component.</param>
             <returns>A RenderData instance configured with the specified component and options.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderDataDefaults.RegisterDefault``3(System.Linq.Expressions.Expression{System.Func{``2,``1}},System.Func{``0,``1},System.Func{``1,``0})">
            <summary>
             Registers a default RenderData configuration for a property type using a component and field with converters.
             <typeparam name="TPropertyType">The type of the property.</typeparam>
             <typeparam name="TFieldType">The field type within the component.</typeparam>
             <typeparam name="TComponent">The component type for rendering.</typeparam>
             <param name="valueField">An expression pointing to the component's field to bind.</param>
             <param name="toFieldTypeConverter">Optional converter from property type to field type.</param>
             <param name="toPropertyTypeConverter">Optional converter from field type back to property type.</param>
             <returns>A RenderData instance configured with the specified component, field, and converters.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderDataDefaults.RegisterDefault``3(System.Linq.Expressions.Expression{System.Func{``2,``1}},System.Action{``2},System.Func{``0,``1},System.Func{``1,``0})">
            <summary>
             Registers a default RenderData configuration for a property type using a component and field with additional options and converters.
             <typeparam name="TPropertyType">The type of the property.</typeparam>
             <typeparam name="TFieldType">The field type within the component.</typeparam>
             <typeparam name="TComponent">The component type for rendering.</typeparam>
             <param name="valueField">An expression pointing to the component's field to bind.</param>
             <param name="options">An action to configure the component.</param>
             <param name="toFieldTypeConverter">Optional converter from property type to field type.</param>
             <param name="toPropertyTypeConverter">Optional converter from field type back to property type.</param>
             <returns>A RenderData instance configured with the specified component, field, options, and converters.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderDataDefaults.RegisterDefault``3(System.Linq.Expressions.Expression{System.Func{``2,``1}},System.Collections.Generic.IDictionary{System.String,System.Object},System.Func{``0,``1},System.Func{``1,``0})">
            <summary>
             Registers a default RenderData configuration for a property type using a component and field with additional options specified as a dictionary and converters.
             <typeparam name="TPropertyType">The type of the property.</typeparam>
             <typeparam name="TFieldType">The field type within the component.</typeparam>
             <typeparam name="TComponent">The component type for rendering.</typeparam>
             <param name="valueField">An expression pointing to the component's field to bind.</param>
             <param name="options">A dictionary of additional options to configure the component.</param>
             <param name="toFieldTypeConverter">Optional converter from property type to field type.</param>
             <param name="toPropertyTypeConverter">Optional converter from field type back to property type.</param>
             <returns>A RenderData instance configured with the specified component, field, options, and converters.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderDataDefaults.RegisterDefault``2(System.Linq.Expressions.Expression{System.Func{``1,``0}})">
            <summary>
             Registers a default RenderData configuration for a property type using a component with a direct field binding.
             <typeparam name="TPropertyType">The type of the property.</typeparam>
             <typeparam name="TComponent">The component type for rendering.</typeparam>
             <param name="valueField">An expression pointing to the component's field to bind directly to the property type.</param>
             <returns>A RenderData instance configured with the specified component and direct field binding.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderDataDefaults.RegisterDefault``2(System.Linq.Expressions.Expression{System.Func{``1,``0}},``1)">
            <summary>
             Adds a property type registration to the global defaults, associating it with a specific rendering component, field, and instance for attributes configuration.
             <typeparam name="TPropertyType">The property type for which the default is registered.</typeparam>
             <typeparam name="TComponent">The component type used for rendering.</typeparam>
             <param name="valueField">An expression identifying the component's field that binds to the property.</param>
             <param name="instanceForAttributes">An instance of the component used to derive additional attributes.</param>
             <returns>The registered RenderData instance for the specified property type.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderDataDefaults.RegisterDefault(System.Type,MudBlazor.Extensions.Components.ObjectEdit.Options.IRenderData)">
            <summary>
             Adds or updates a default RenderData association for a given property type.
             <param name="propertyType">The type of the property for which the default RenderData is being registered or updated.</param>
             <param name="renderData">The RenderData instance to associate with the property type.</param>
             <returns>The registered or updated RenderData instance.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderDataDefaults.RegisterDefault``2(System.Linq.Expressions.Expression{System.Func{``1,``0}},System.Action{``1})">
            <summary>
             Registers a default RenderData configuration for a property type using a component with a direct field binding and additional component configuration options.
             <typeparam name="TPropertyType">The type of the property.</typeparam>
             <typeparam name="TComponent">The component type for rendering.</typeparam>
             <param name="valueField">An expression pointing to the component's field to bind directly to the property type.</param>
             <param name="options">An action to configure additional options on the component.</param>
             <returns>A RenderData instance configured with the specified component, direct field binding, and additional options.</returns>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderDataDefaults.RegisterDefault``2(System.Linq.Expressions.Expression{System.Func{``1,``0}},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
             Registers a default RenderData configuration for a property type using a component with a direct field binding and additional options specified as a dictionary.
             <typeparam name="TPropertyType">The type of the property.</typeparam>
             <typeparam name="TComponent">The component type for rendering.</typeparam>
             <param name="valueField">An expression pointing to the component's field to bind directly to the property type.</param>
             <param name="options">A dictionary of additional options to configure the component.</param>
             <returns>A RenderData instance configured with the specified component, direct field binding, and additional options provided as a dictionary.</returns>
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.ObjectEdit.Options.IRenderData">
            <summary>
            The interface for a render data instance, providing a set of properties and methods to configure the render data.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.IRenderData.Wrapper">
            <summary>
            Wrapper component for the current render data.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.IRenderData.RenderDataBeforeComponent">
            <summary>
            Render data for the component to be added before the current render data.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.IRenderData.RenderDataAfterComponent">
            <summary>
            Render data for the component to be added after the current render data.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.IRenderData.IsValidParameterAttribute(System.String,System.Object)">
            <summary>
            Returns true if the given key is a valid parameter attribute for the current component type.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.IRenderData.ComponentType">
            <summary>
            Component type to be rendered.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.IRenderData.OneTimeBinding">
            <summary>
            If this is set to true, the binding will only be done once at first render otherwise StateChange updates binding as well.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.IRenderData.AlwaysMapToField">
            <summary>
            If this is set to true and field and property type are equal it will anyhow map the propertyType to the fieldType what creates a clone of an object.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.IRenderData.AlwaysMapToProperty">
            <summary>
            If this is set to true and field and property type are equal it will anyhow map the fieldType to the propertyType what creates a clone of an object.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.IRenderData.Attributes">
            <summary>
            Attributes to be used when rendering the component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.IRenderData.ValidAttributes">
            <summary>
            Valid attributes for the current component type.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.IRenderData.InitValueBinding(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta,System.Func{System.Threading.Tasks.Task})">
            <summary>
            Initializes the value binding for the current render data.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.IRenderData.CustomRenderer">
            <summary>
            A custom renderer to be used when rendering the component.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.IRenderData.UpdateConditionalSettings``1(``0)">
            <summary>
            Updates all conditional settings for the current render data.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.IRenderData.AddCondition``1(System.Func{``0,System.Boolean},System.Action{MudBlazor.Extensions.Components.ObjectEdit.Options.IRenderData},System.Action{MudBlazor.Extensions.Components.ObjectEdit.Options.IRenderData})">
            <summary>
            Adds a condition to the current render data.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.IRenderData.TrySetAttributeIfAllowed(System.String,System.Func{System.Object},System.Boolean)">
            <summary>
            Try to set the given attribute if it is allowed for the current component type.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.IRenderData.TrySetAttributeIfAllowed(System.String,System.Object,System.Boolean)">
            <summary>
            Try to set the given attribute if it is allowed for the current component type.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.IRenderData.SetAttributes(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Set the given attributes for the current render data.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.IRenderData.AddAttributes(System.Boolean,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Adds the given attributes to the current render data.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.IRenderData.AddAttributesIf``1(System.Func{``0,System.Boolean},System.Boolean,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Adds the given attributes to the current render data if the given condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.IRenderData.SetAttributesIf``1(System.Func{``0,System.Boolean},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Sets the given attributes for the current render data if the given condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.IRenderData.ConvertToPropertyValue(System.Object)">
            <summary>
            Converts the given value to a property value.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.IRenderData.DisableValueBinding">
            <summary>
            Disables value binding for the current render data.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.IRenderData.SetValue(System.Object)">
            <summary>
            Set the value for the current render data.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.IRenderData.ValueField">
            <summary>
            Value field to be used on the component for the current render data.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.IRenderData.OnRendered``1(System.Action{``0})">
            <summary>
            Callback to be used when the reference is rendered.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderWithAttribute">
            <summary>
            Attribute to specify how the property should be rendered inside a mud ex object edit.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderWithAttribute.Apply(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta)">
            <summary>
            Applies the attribute to the given ObjectEditPropertyMeta instance.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.RenderWithAttribute`1.Apply(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditPropertyMeta)">
            <summary>
            Applies the attribute to the given ObjectEditPropertyMeta instance.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.ObjectEdit.Options.PropertyResetSettings">
            <summary>
            Reset settings for a property.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.PropertyResetSettings.AllowReset">
            <summary>
            Reset is allowed for this property.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.PropertyResetSettings.ResetIcon">
            <summary>
            Icon to use for the reset button.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.PropertyResetSettings.ResetText">
            <summary>
            Tooltip text to display when hovering over the reset button.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.PropertyResetSettings.ShowResetText">
            <summary>
            Show the reset text.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.ObjectEdit.Options.GlobalResetSettings">
            <summary>
            Reset settings for the whole object.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.GlobalResetSettings.#ctor">
            <summary>
            Create a new instance of GlobalResetSettings.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.GlobalResetSettings.RequiresConfirmation">
            <summary>
            Requires confirmation before resetting the object.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.ObjectEdit.Options.SwitchConfirmationProtection">
            <inheritdoc />
        </member>
        <member name="T:MudBlazor.Extensions.Components.ObjectEdit.Options.ToggleButtonConfirmationProtection">
            <summary>
            Protection with a toggle button that requires confirmation before changing the value.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.ToggleButtonConfirmationProtection.Button">
            <summary>
            The button instance.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.ObjectEdit.Options.ToggleButtonConfirmationProtection.#ctor(System.String,System.Action{MudBlazor.MudToggleIconButton})">
            <summary>
            Constructor for a boolean input protection instance.
            </summary>
            <param name="tooltip"></param>
            <param name="configure"></param>
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.ToggleButtonConfirmationProtection.AdditionalRenderData">
            <inheritdoc />
        </member>
        <member name="P:MudBlazor.Extensions.Components.ObjectEdit.Options.ToggleButtonConfirmationProtection.ConfirmationCallback">
            <inheritdoc />
        </member>
        <member name="T:MudBlazor.Extensions.Components.FilterHighlighting">
            <summary>
            Controls how the highlighting of the filter is displayed
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.FilterHighlighting.ActiveFilterOnly">
            <summary>
            Only the current active filter is highlighted
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.FilterHighlighting.AllFilters">
            <summary>
            All filters are highlighted
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.FilterHighlighting.None">
            <summary>
            No highlighting at all
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.HierarchicalFilter`1">
            <summary>
            Filter for hierarchical data
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.HierarchicalFilter`1.Items">
            <summary>
            Items to filter
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.HierarchicalFilter`1.Filters">
            <summary>
            Filters to apply
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.HierarchicalFilter`1.Filter">
            <summary>
            Filter to apply
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.HierarchicalFilter`1.FilterBehaviour">
            <summary>
            Filter behaviour
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.HierarchicalFilter`1.TextFunc">
            <summary>
            Text function
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.HierarchicalFilter`1.MatchFunc">
            <summary>
            Match function for filter
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.HierarchicalFilter`1.HasFilters">
            <summary>
            Returns true if a filter is present
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.HierarchicalFilter`1.FilteredItems">
            <summary>
            Returns filtered items only if FilterBehaviour is Flat and there are filters
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.HierarchicalFilter`1.GetMatchedSearch(`0)">
            <summary>
            Returns a tuple with a boolean indicating if the node matches the search and the term that matched
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.HierarchicalFilterBehaviour">
            <summary>
            The behaviour of the hierarchical filter
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.HierarchicalFilterBehaviour.Default">
            <summary>
            Default behaviour will not change the tree structure
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.HierarchicalFilterBehaviour.Flat">
            <summary>
            Flat behaviour will flatten the tree structure and only show the nodes that match the filter
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Components.MudExTreeView`1">
            <summary>
            TreeView component that renders a tree structure of items.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeView`1.RenderedTreeComponent">
            <summary>
            Inner component that renders the tree.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeView`1.ViewMode">
            <summary>
            Mode controls how the tree view will be rendered.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeView`1.ViewModeChanged">
            <summary>
            Invoked when the view mode changes.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeView`1.ToggleableViewModes">
            <summary>
            Here you can specify between which view modes the user can toggle.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeView`1.TreeViewModeToggleComponent">
            <summary>
            Specify if and how the view mode can be toggled.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeView`1.Parameters">
            <summary>
            Parameters for the component based on ViewMode. 
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExTreeView`1.ExpandAll">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExTreeView`1.ExpandAllLoaded">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExTreeView`1.ExpandAllNotLoaded">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExTreeView`1.ToggleExpand(`0)">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExTreeView`1.SetExpanded(`0,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExTreeView`1.Update">
            <inheritdoc />
        </member>
        <member name="T:MudBlazor.Extensions.Components.TreeViewItemContext`1">
            <summary>
            Context for the tree view item.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.TreeViewItemContext`1.Focused">
            <summary>
            Is true if the item is focused.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.TreeViewItemContext`1.Search">
            <summary>
            The string that was used to search for this item.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.TreeViewItemContext`1.Highlight">
            <summary>
            The recommended string to highlight in the item.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.TreeViewItemContext`1.Tag">
            <summary>
            The tag of the item.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.TreeViewItemContext`1.TreeView">
            <summary>
            The owning tree view.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.MudExTreeViewBase`1.FilterManager">
            <summary>
            Filter manager
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewBase`1.FilteredItems">
            <summary>
            Returns the filtered items as a collection of <see cref="T:MudBlazor.Extensions.Components.TreeViewItemContext`1"/>
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewBase`1.BackgroundColor">
            <summary>
            Gets or Sets MudExColor BackgroundColor Property.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewBase`1.FilterPlaceholder">
            <summary>
            Placeholder for the filter box
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewBase`1.FilterBoxStyle">
            <summary>
            Style for the filter box
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewBase`1.FilterBoxClass">
            <summary>
            Css class for the filter box
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewBase`1.ItemBackgroundColor">
            <summary>
            Background color for the item
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewBase`1.SelectedItemBackgroundColor">
            <summary>
            Background color for the selected item
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewBase`1.SelectedItemColor">
            <summary>
            Foreground color for the selected item
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewBase`1.SelectedItemBorderColor">
            <summary>
            Border color for the selected item
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewBase`1.ItemWidth">
            <summary>
            Width for the item
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewBase`1.ItemContentTypo">
            <summary>
            Typographic style for the item content only used if <see cref="P:MudBlazor.Extensions.Components.MudExTreeViewBase`1.ItemContentTemplate"/> and <see cref="P:MudBlazor.Extensions.Components.MudExTreeViewBase`1.ItemTemplate"/> are not set
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewBase`1.FilterMode">
            <summary>
            Filter mode for the filter box
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewBase`1.FilterHighlighting">
            <summary>
            Behaviour for the highlighting of an applied filter
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewBase`1.FilterChipsPlacedRight">
            <summary>
            If true the chips will be placed to the right in the input
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewBase`1.FilterMultiple">
            <summary>
            Set to false to disable multiple filters
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewBase`1.ExpandButtonDirection">
            <summary>
            Controls if the expand button is at the start or end 
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewBase`1.Dense">
            <summary>
            Dense mode for the treeview
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewBase`1.ExpandOnFilter">
            <summary>
            If true the treeview will expand all nodes on filter
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewBase`1.ItemStyle">
            <summary>
            Style for Item itself this only is used if <see cref="P:MudBlazor.Extensions.Components.MudExTreeViewBase`1.ItemContentTemplate"/> and <see cref="P:MudBlazor.Extensions.Components.MudExTreeViewBase`1.ItemTemplate"/> are not set
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewBase`1.ItemClass">
            <summary>
            Class for Item itself this only is used if <see cref="P:MudBlazor.Extensions.Components.MudExTreeViewBase`1.ItemContentTemplate"/> and <see cref="P:MudBlazor.Extensions.Components.MudExTreeViewBase`1.ItemTemplate"/> are not set
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewBase`1.ItemContentStyle">
            <summary>
            Style for Item content this only is used if <see cref="P:MudBlazor.Extensions.Components.MudExTreeViewBase`1.ItemContentTemplate"/> and <see cref="P:MudBlazor.Extensions.Components.MudExTreeViewBase`1.ItemTemplate"/> are not set
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewBase`1.ItemContentClass">
            <summary>
            Class for Item content this only is used if <see cref="P:MudBlazor.Extensions.Components.MudExTreeViewBase`1.ItemContentTemplate"/> and <see cref="P:MudBlazor.Extensions.Components.MudExTreeViewBase`1.ItemTemplate"/> are not set
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewBase`1.Items">
            <summary>
            Items to display in the treeview
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewBase`1.TextFunc">
            <summary>
            Function to get the text of an item this is used for the filter and the item content if <see cref="P:MudBlazor.Extensions.Components.MudExTreeViewBase`1.ItemContentTemplate"/> and <see cref="P:MudBlazor.Extensions.Components.MudExTreeViewBase`1.ItemTemplate"/> are not set
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewBase`1.IsSeparatorDetectFunc">
            <summary>
            This function controls how a separator will be detected. Default is if the item ToString() equals '-'
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewBase`1.AllowedToSelectFunc">
            <summary>
            Here you can specify a function to determine if a node is allowed to be selected
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewBase`1.FilterBehaviour">
            <summary>
            Behaviour for the filtering
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewBase`1.ToolBarContent">
            <summary>
            Additional content for the toolbar
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewBase`1.ItemTemplate">
            <summary>
            Full item template if this is set you need to handle the outer items based on ViewMode on your own. 
            Also, the expand/collapse buttons, and you need to decide on your own if and how you use the <see cref="P:MudBlazor.Extensions.Components.MudExTreeViewBase`1.ItemContentTemplate"/>
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewBase`1.ItemContentTemplate">
            <summary>
            Item content template for the item itself without the requirement to change outer element like to control the expand button etc.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewBase`1.ExpandedIcon">
            <summary>
            The expand/collapse icon.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewBase`1.SelectedNodeChanged">
            <summary>
            Callback when the selected node changes
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewBase`1.FilterChanged">
            <summary>
            Callback when the filter changes
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewBase`1.FiltersChanged">
            <summary>
            Callback when the filters change
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewBase`1.SelectedNode">
            <summary>
            Selected node
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExTreeViewBase`1.ExpandTo(`0)">
            <summary>
            Expand the treeview to the given value
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Components.MudExTreeViewBase`1.LastSelectedNode">
            <summary>
            The last selected node independent of <see cref="M:MudBlazor.Extensions.Components.MudExTreeViewBase`1.IsAllowedToSelect(`0)"/>
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewBase`1.Filter">
            <summary>
            Filter for the treeview
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewBase`1.Filters">
            <summary>
            Filters for the treeview
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExTreeViewBase`1.FlattedItems">
            <summary>
            All items flatted
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExTreeViewBase`1.IsExpanded(`0)">
            <summary>
            Returns true if the given node is expanded
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExTreeViewBase`1.ExpandAll">
            <summary>
            Expand all nodes
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExTreeViewBase`1.ExpandAllLoaded">
            <summary>
            Expand all nodes their children are loaded
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExTreeViewBase`1.ExpandAllNotLoaded">
            <summary>
            Expand all nodes their children aren't loaded yet
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExTreeViewBase`1.CollapseAll">
            <summary>
            Collapse all nodes
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExTreeViewBase`1.IsSelected(`0)">
            <summary>
            Returns true if the given node is selected
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExTreeViewBase`1.IsFocused(`0)">
            <summary>
            Returns true if the given node is selected
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExTreeViewBase`1.IsSeparator(`0)">
            <summary>
            Returns true if the given node is a separator
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExTreeViewBase`1.CreateContext(`0,System.String,System.Object)">
            <summary>
            Creates a context for the given item
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewBase`1.ExpandOnClick">
            <summary>
            Set to true to automatically expand the node when clicked and is not expanded
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewBase`1.CollapseOnClick">
            <summary>
            Set to true to automatically collapse the node when clicked and is already expanded
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewBase`1.AllowSelectionOfNonEmptyNodes">
            <summary>
            Set to true to allow selection of nodes with children
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewBase`1.InitiallyExpanded">
            <summary>
            Set to true to allow selection of nodes with children
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExTreeViewBase`1.OnAfterRender(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExTreeViewBase`1.NodeClick(`0)">
            <summary>
            On node click
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExTreeViewBase`1.IsAllowedToSelect(`0)">
            <summary>
            Returns true if the given node is allowed to be selected
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExTreeViewBase`1.Path">
            <summary>
            The current path
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExTreeViewBase`1.IsInPath(`0)">
            <summary>
            Returns true if the given node is in the current path
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExTreeViewBase`1.SetAllExpanded(System.Boolean,System.Func{`0,System.Boolean})">
            <summary>
            Set all nodes expanded where the predicate returns true
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExTreeViewBase`1.ToggleExpand(`0)">
            <summary>
            Toggle the expanded state of the given node
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExTreeViewBase`1.SetExpanded(`0,System.Boolean)">
            <summary>
            Set the expanded state of the given node
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExTreeViewBase`1.GetFilterClassStr">
            <summary>
            Class for use in the filter box
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExTreeViewBase`1.ItemContentClassStr(MudBlazor.Extensions.Components.TreeViewItemContext{`0})">
            <summary>
            Css class for item content
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExTreeViewBase`1.ItemContentStyleStr(MudBlazor.Extensions.Components.TreeViewItemContext{`0})">
            <summary>
            Style for item content
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExTreeViewBase`1.ItemClassStr(MudBlazor.Extensions.Components.TreeViewItemContext{`0})">
            <summary>
            Css class for item container
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExTreeViewBase`1.ItemStyleStr(`0,System.String)">
            <summary>
            Style for item container
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExTreeViewBase`1.ItemClassStr(`0)">
            <summary>
            Css class for item container
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExTreeViewBase`1.ItemStyleStr(MudBlazor.Extensions.Components.TreeViewItemContext{`0},System.String)">
            <summary>
            Style for item container
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExTreeViewBase`1.StyleStr(System.Action{MudBlazor.Extensions.Helper.MudExStyleBuilder})">
            <summary>
            Style for main control
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExTreeViewBase`1.GetTermToHighlight(System.String)">
            <summary>
            Get the term to highlight
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExTreeViewBase`1.ToolBarClassStr">
            <summary>
            returns the class for the toolbar
            </summary>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExTreeViewBase`1.ToolBarStyleStr">
            <summary>
            Returns the style for the toolbar
            </summary>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExTreeViewBase`1.Update">
            <summary>
            Updates the state of the component
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewBreadcrumb`1.MenuAnchorOrigin">
            <summary>
            Set the anchor origin point to determine where the popover will open from.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewBreadcrumb`1.MenuTransformOrigin">
            <summary>
            Sets the transform origin point for the popover.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewBreadcrumb`1.MenuMaxHeight">
            <summary>
            Max height of the menu when this is reached overflow will be scrollable
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExTreeViewBreadcrumb`1.GetFilterClassStr">
            <summary>
            Class for use in the filter box
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExTreeViewBreadcrumb`1.OnInitialized">
            <inheritdoc />
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewCardGrid`1.HoverColor">
            <summary>
            Gets or Sets MudExColor HoverColor Property.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewCardGrid`1.Justify">
            <summary>
            Gets or Sets Justify Property.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewCardGrid`1.Spacing">
            <summary>
            Gets or Sets Spacing Property.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewCardGrid`1.LightBulbSize">
            <summary>
            Gets or Sets Light Bulb Size Property.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewCardGrid`1.LightBulbSizeUnit">
            <summary>
            Gets or Sets Light Bulb Size Unit Property.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewCardGrid`1.MaxItemWidth">
            <summary>
            Max width of the item
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExTreeViewCardGrid`1.ItemStyleStr(MudBlazor.Extensions.Components.TreeViewItemContext{`0},System.String)">
            <inheritdoc />
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewDefault`1.ExpandBehaviour">
            <summary>
            This behaviour controls how the tree view will be expanded.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExTreeViewDefault`1.IsExpanded(`0)">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExTreeViewDefault`1.SetExpanded(`0,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewFlatList`1.ShowPath">
            <summary>
            Set to true to show the item path under the item name.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewFlatList`1.PathSeparator">
            <summary>
            Separator for the path.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewHorizontal`1.SkipSeparator">
            <summary>
            Set to false if you want to break keyboard or wheel navigation on a separator
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewHorizontal`1.AllowColumnSizeChange">
            <summary>
            If true, the <see cref="P:MudBlazor.Extensions.Components.MudExTreeViewHorizontal`1.ColumnWidth"/> can be changed by dragging the splitter
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewHorizontal`1.NodeBorderRadius">
            <summary>
            Border radius of the node leave null to use the default value from theme
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewHorizontal`1.ColumnWidth">
            <summary>
            Width of the tree column
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewHorizontal`1.NodePadding">
            <summary>
            Padding of the node
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewHorizontal`1.LineWidth">
            <summary>
            Strength of the line between nodes
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewHorizontal`1.LineColor">
            <summary>
            Color of the line between nodes
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExTreeViewHorizontal`1.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExTreeViewHorizontal`1.ItemStyleStr(MudBlazor.Extensions.Components.TreeViewItemContext{`0},System.String)">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExTreeViewHorizontal`1.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewList`1.AnimationIn">
            <summary>
            The Animation to use when navigating through the tree. Default is Slide.
            Set this to AnimationType.Default to disable animations.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewList`1.AnimationOut">
            <summary>
            The Animation to use when navigating back through the tree. Default is Slide.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewList`1.AnimationInPosition">
            <summary>
            The position of the animation.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewList`1.AnimationOutPosition">
            <summary>
            The position of the out animation.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewList`1.AnimationInDirection">
            <summary>
            The direction of the animation when navigating deeper in the tree. Default is In.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewList`1.AnimationOutDirection">
            <summary>
            The direction of the animation when navigating back in the tree. Default is Out.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewList`1.AnimationInDuration">
            <summary>
            Duration of the in animation.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewList`1.AnimationOutDuration">
            <summary>
            Duration of the out animation.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewList`1.RootName">
            <summary>
            Name of the root node.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewList`1.BackLinkLabel">
            <summary>
            Label for the back link.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewList`1.RenderBackLink">
            <summary>
            Set false to hide the back link.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewList`1.RenderHomeLink">
            <summary>
            Set false to hide the home link.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewList`1.NavigationLinkBarClass">
            <summary>
            Css class for the toolbar where back and home link are located in
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExTreeViewList`1.NavigationLinkBarStyle">
            <summary>
            Style for the toolbar where back and home link are located in
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExTreeViewList`1.GetBackNodeTarget">
            <summary>
            Context and label of back node
            </summary>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExTreeViewList`1.LevelNodes">
            <summary>
            Returns the root node and its children if the current node is null.
            Otherwise, returns the children of the current node.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExTreeViewList`1.NodeClick(`0)">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExTreeViewList`1.AnimationStyleStr">
            <summary>
            Creates the style with animation styles included.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExIconButton.ServiceProvider">
            <summary>
            Gets or sets the <see cref="T:System.IServiceProvider"/> to be used for dependency injection.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExIconButton.LocalizerToUse">
            <summary>
            Gets the <see cref="T:Microsoft.Extensions.Localization.IStringLocalizer"/> to be used for localizing strings.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Components.MudExIconButton.TryLocalize(System.String,System.Object[])">
            <summary>
            Tries to localize given text if localizer and translation is available
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExIconButton.Localizer">
            <summary>
            Gets or sets the <see cref="T:Microsoft.Extensions.Localization.IStringLocalizer"/> to be used for localizing strings.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExIconButton.ToolTip">
            <summary>
            Tooltip
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExIconButton.ToolTipStyle">
            <summary>
            Tooltip style
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExIconButton.Visible">
            <summary>
            Is false control isn't rendered at all
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Components.MudExValidationWrapper`1.Value">
            <summary>
            The value of the ValidationWrapper component. This will be passed to the set validation function.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.Capture.CaptureId">
            <summary>
            Id for a capture.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.Capture.CaptureId.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:MudBlazor.Extensions.Core.Capture.CaptureId"/>.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.Capture.CaptureOptions">
            <summary>
            Options for capturing video and audio.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.Capture.CaptureOptions.ShowNotificationWhileRecording">
            <summary>
            If this is true a notification toast will be shown while recording.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.Capture.CaptureOptions.ContentType">
            <summary>
            The content type for video.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.Capture.CaptureOptions.AudioContentType">
            <summary>
            The content type for audio.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.Capture.CaptureOptions.TakePhoto">
            <summary>
            If this is true a photo will be taken instead of a video.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.Capture.CaptureOptions.ScreenCapture">
            <summary>
            The screen capture options.
            Provide a boolean to capture a screen or a <see cref="T:MudBlazor.Extensions.Core.W3C.MediaStreamTrack"/> to capture a specific preselected screen or a <see cref="T:MudBlazor.Extensions.Core.W3C.DisplayMediaOptions"/> to capture the screen with options.
            Set false to not capture the screen.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.Capture.CaptureOptions.VideoDevice">
            <summary>
            The video device to record.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.Capture.CaptureOptions.AudioDevices">
            <summary>
            The audio devices to record audio.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.Capture.CaptureOptions.MaxCaptureTime">
            <summary>
            If set, the recording will stop after the specified time.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.Capture.CaptureOptions.StartDelay">
            <summary>
            If set, the recording will start after the specified time.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.Capture.CaptureOptions.OverlaySource">
            <summary>
            The source for the overlay default is camera as overlay over screen.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.Capture.CaptureOptions.OverlayPosition">
            <summary>
            Position of the overlay.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.Capture.CaptureOptions.OverlaySize">
            <summary>
            Size of the overlay.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.Capture.CaptureOptions.OverlayCustomPosition">
            <summary>
            For the Overlay you can set <see cref="P:MudBlazor.Extensions.Core.Capture.CaptureOptions.OverlayPosition"/> to <see cref="F:MudBlazor.DialogPosition.Custom"/> and set the custom position for the overlay here.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.Capture.CaptureOptions.Valid">
            <summary>
            Returns true when anything to capture is set.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.Capture.CaptureOptions.GetOverlayPosition(MudBlazor.Extensions.Core.MudExDimension,System.Nullable{MudBlazor.Extensions.Core.MudExDimension})">
            <summary>
            returns the position for the overlay based on given containerDimension.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.Capture.CaptureOptions.GetOverlayPosition(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            returns the position for the overlay based on given reference sizes.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.Capture.CaptureOptions.ScreenOnly">
            <summary>
            Creates a new instance of <see cref="T:MudBlazor.Extensions.Core.Capture.CaptureOptions"/> setting to capture the screen only.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.Capture.CaptureOptions.CameraOnly">
            <summary>
            Creates a new instance of <see cref="T:MudBlazor.Extensions.Core.Capture.CaptureOptions"/> setting to capture the camera only.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.Capture.CaptureOptions.AudioOnly">
            <summary>
            Creates a new instance of <see cref="T:MudBlazor.Extensions.Core.Capture.CaptureOptions"/> setting to capture audio only.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.Capture.CaptureOptions.ScreenAndCamera">
            <summary>
            Creates a new instance of <see cref="T:MudBlazor.Extensions.Core.Capture.CaptureOptions"/> setting to capture the screen and camera.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.Capture.CaptureOptions.ScreenAndAudio">
            <summary>
            Creates a new instance of <see cref="T:MudBlazor.Extensions.Core.Capture.CaptureOptions"/> setting to capture the screen and audio.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.Capture.CaptureOptions.CameraAndAudio">
            <summary>
            Creates a new instance of <see cref="T:MudBlazor.Extensions.Core.Capture.CaptureOptions"/> setting to capture the camera and audio.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.Capture.CaptureOptions.ScreenCameraAndAudio">
            <summary>
            Creates a new instance of <see cref="T:MudBlazor.Extensions.Core.Capture.CaptureOptions"/> setting to capture the screen, camera and audio.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.Capture.CaptureOptions.CameraAndScreen">
            <summary>
            Creates a new instance of <see cref="T:MudBlazor.Extensions.Core.Capture.CaptureOptions"/> setting to capture the screen and camera with the screen as overlay over the camera.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.Capture.CaptureOptions.CameraScreenAndAudio">
            <summary>
            Creates a new instance of <see cref="T:MudBlazor.Extensions.Core.Capture.CaptureOptions"/> setting to capture the screen, camera and audio with the screen as overlay over the camera.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.Capture.CaptureOptionsEditMode">
            <summary>
            The edit mode for the capture options dialog.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Capture.CaptureOptionsEditMode.Full">
            <summary>
            The full edit mode.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Capture.CaptureOptionsEditMode.Simple">
            <summary>
            The simple edit mode.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.Capture.CaptureResult">
            <summary>
            The result of a capture.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.Capture.CaptureResult.CaptureId">
            <summary>
            Id of the capture.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.Capture.CaptureResult.Options">
            <summary>
            The options used for the capture.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.Capture.CaptureResult.Bytes">
            <summary>
            The captured data of the combined result.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.Capture.CaptureResult.BlobUrl">
            <summary>
            Blob URL of the captured data for combined.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.Capture.CaptureResult.CaptureData">
            <summary>
            Captured data of the screen.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.Capture.CaptureResult.CameraData">
            <summary>
            The captured data of the camera.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.Capture.CaptureResult.AudioData">
            <summary>
            recorded audio data.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.Capture.CaptureResult.SystemAudioData">
            <summary>
            recorded system audio data.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.Capture.CaptureResult.CombinedData">
            <summary>
            Combined data of all captures.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.Capture.CaptureResult.AllData">
            <summary>
            All data of the capture.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.Capture.OverlaySource">
            <summary>
            The source for the overlay.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Capture.OverlaySource.VideoDevice">
            <summary>
            Use the camera as overlay over screen.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Capture.OverlaySource.CapturedScreen">
            <summary>
            Use the screen as overlay over camera.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.Capture.SimpleCaptureOptions">
            <summary>
            This class represents the simple capture options that can then converted to real <see cref="T:MudBlazor.Extensions.Core.Capture.CaptureOptions"/>.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.Capture.SimpleCaptureOptions.RecordScreen">
            <summary>
            Set to true to record the screen.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.Capture.SimpleCaptureOptions.RecordAudio">
            <summary>
            Set to true to record audio.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.Capture.SimpleCaptureOptions.RecordCamera">
            <summary>
            Set to true to record the camera.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.Capture.SimpleCaptureOptions.Valid">
            <summary>
            Is true when anything can be recorded.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.Extensions.Core.Capture.SimpleCaptureOptions.ToCaptureOptions">
            <summary>
            Converts the simple options to real <see cref="T:MudBlazor.Extensions.Core.Capture.CaptureOptions"/>.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.Capture.SimpleCaptureOptions.From(MudBlazor.Extensions.Core.Capture.CaptureOptions)">
            <summary>
            Creates a new instance of <see cref="T:MudBlazor.Extensions.Core.Capture.SimpleCaptureOptions"/> from the specified <see cref="T:MudBlazor.Extensions.Core.Capture.CaptureOptions"/>.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.CssVariable">
            <summary>
            Represents a CSS variable
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.CssVariable.Key">
            <summary>
            Key of the CSS variable
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.CssVariable.Value">
            <summary>
            Value of the CSS variable
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.Css.AlignItems">
            <summary>
            Enum representing CSS 'align-items' property values.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.AlignItems.Stretch">
            <summary>
            Align items to stretch.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.AlignItems.Center">
            <summary>
            Align items to the center.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.AlignItems.Start">
            <summary>
            Align items to the start.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.AlignItems.End">
            <summary>
            Align items to the end.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.AlignItems.FlexStart">
            <summary>
            Align items to the flex-start.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.AlignItems.FlexEnd">
            <summary>
            Align items to the flex-end.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.AlignItems.Baseline">
            <summary>
            Baseline alignment.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.AlignItems.Inherit">
            <summary>
            Inherit the value from the parent element.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.Css.BorderStyle">
            <summary>
            Specifies various styles for the border of an element in CSS.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.BorderStyle.None">
            <summary>
            No border; the computed border width is zero.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.BorderStyle.Hidden">
            <summary>
            Same as `None`, except in border conflict resolution for table elements.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.BorderStyle.Dotted">
            <summary>
            The border is a series of dots.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.BorderStyle.Dashed">
            <summary>
            The border is a series of short lines.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.BorderStyle.Solid">
            <summary>
            The border is a single, solid line.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.BorderStyle.Double">
            <summary>
            The border is two solid lines. The sum of the two lines and the space between them equals the value of 'border-width'.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.BorderStyle.Groove">
            <summary>
            The border looks as though it were carved into the canvas.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.BorderStyle.Ridge">
            <summary>
            The opposite of 'groove': the border looks as though it were coming out of the canvas.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.BorderStyle.Inset">
            <summary>
            The border makes the box look as though it were embedded in the canvas.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.BorderStyle.Outset">
            <summary>
            The opposite of 'inset': the border makes the box look as though it were coming out of the canvas.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.BorderStyle.Initial">
            <summary>
            Sets this property to its default value.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.BorderStyle.Inherit">
            <summary>
            Inherits this property from its parent element.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.BorderStyle.Revert">
            <summary>
            Resets the property to its inherited value if it inherits from its parent, and to its initial value if not.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.BorderStyle.Unset">
            <summary>
            Can be used on any CSS property, including 'border-style', and takes the same values as inherit. It acts like inherit if the property is inherited and like initial if not.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.Css.Clear">
            <summary>
            Enum representing CSS 'clear' property values.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.Clear.None">
            <summary>
            No clearing is applied.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.Clear.Left">
            <summary>
            Left side is cleared.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.Clear.Right">
            <summary>
            Right side is cleared.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.Clear.Both">
            <summary>
            Clearing is applied to both sides.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.Clear.Inherit">
            <summary>
            Inherit the value from the parent element.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.Css.Cursor">
            <summary>
            Enum representing CSS 'cursor' property values.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.Cursor.Pointer">
            <summary>
            Pointer cursor.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.Cursor.Default">
            <summary>
            Default cursor.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.Cursor.Auto">
            <summary>
            Auto cursor.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.Cursor.Crosshair">
            <summary>
            Crosshair cursor.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.Cursor.Move">
            <summary>
            Move cursor.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.Cursor.Text">
            <summary>
            Text cursor.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.Css.Direction">
            <summary>
            Enum representing CSS 'direction' property values.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.Direction.LTR">
            <summary>
            Left-to-right direction.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.Direction.RTL">
            <summary>
            Right-to-left direction.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.Direction.Inherit">
            <summary>
            Inherit direction from parent element.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.Css.Display">
            <summary>
            Enum representing CSS 'display' property values.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.Display.Block">
            <summary>
            Display as a block element.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.Display.Inline">
            <summary>
            Display as an inline element.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.Display.Flex">
            <summary>
            Display as a flex container.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.Display.Grid">
            <summary>
            Display as a grid container.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.Display.None">
            <summary>
            No specified display value. element will not be rendered.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.Display.Inherit">
            <summary>
            Inherit display value from parent element.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.Css.FlexFlow">
            <summary>
            Enum representing CSS 'flex-flow' property values.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.FlexFlow.NoWrap">
            <summary>
            Set flex to nowrap.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.FlexFlow.Wrap">
            <summary>
            Set flex direction to row and wrap to wrap-reverse.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.FlexFlow.WrapReverse">
            <summary>
            Set flex direction to row and wrap to wrap-reverse.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.FlexFlow.Row">
            <summary>
            Set flex direction to row
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.FlexFlow.RowReverse">
            <summary>
            Set flex direction to row reverse
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.FlexFlow.RowNowrap">
            <summary>
            Set flex direction to row and wrap to nowrap.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.FlexFlow.RowWrap">
            <summary>
            Set flex direction to row and wrap to wrap.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.FlexFlow.RowWrapReverse">
            <summary>
            Set flex direction to row and wrap to wrap-reverse.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.FlexFlow.RowReverseNowrap">
            <summary>
            Set flex direction to row-reverse and wrap to nowrap.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.FlexFlow.RowReverseWrap">
            <summary>
            Set flex direction to row-reverse and wrap to wrap.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.FlexFlow.RowReverseWrapReverse">
            <summary>
            Set flex direction to row-reverse and wrap to wrap-reverse.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.FlexFlow.Column">
            <summary>
            Set flex direction to column and wrap to nowrap.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.FlexFlow.ColumnReverse">
            <summary>
            Set flex direction to column and wrap to nowrap.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.FlexFlow.ColumnNowrap">
            <summary>
            Set flex direction to column and wrap to nowrap.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.FlexFlow.ColumnWrap">
            <summary>
            Set flex direction to column and wrap to wrap.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.FlexFlow.ColumnWrapReverse">
            <summary>
            Set flex direction to column and wrap to wrap-reverse.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.FlexFlow.ColumnReverseNowrap">
            <summary>
            Set flex direction to column-reverse and wrap to nowrap.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.FlexFlow.ColumnReverseWrap">
            <summary>
            Set flex direction to column-reverse and wrap to wrap.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.FlexFlow.ColumnReverseWrapReverse">
            <summary>
            Set flex direction to column-reverse and wrap to wrap-reverse.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.FlexFlow.Inherit">
            <summary>
            Inherit the value from the parent element.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.FlexFlow.Initial">
            <summary>
            Use the initial value.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.FlexFlow.Revert">
            <summary>
            Revert
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.FlexFlow.RevertLayer">
            <summary>
            RevertLayer
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.FlexFlow.Unset">
            <summary>
            Unset the value.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.Css.Float">
            <summary>
            Enum representing CSS 'float' property values.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.Float.None">
            <summary>
            No float value.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.Float.Left">
            <summary>
            Float to the left.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.Float.Right">
            <summary>
            Float to the right.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.Float.Inherit">
            <summary>
            Use the parent's float value.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.Css.FontStyle">
            <summary>
            Specifies the font style for a text.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.FontStyle.Normal">
            <summary>
            The text is shown in a normal font style. This is default.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.FontStyle.Italic">
            <summary>
            The text is shown in an italic font style.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.FontStyle.Oblique">
            <summary>
            The text is shown in an oblique font style.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.FontStyle.Initial">
            <summary>
            Sets this property to its default value (i.e., 'normal').
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.FontStyle.Inherit">
            <summary>
            Inherits this property from its parent element.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.Css.FontVariant">
            <summary>
            Specifies the font variant for a text.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.FontVariant.Normal">
            <summary>
            The text is shown in a normal font variant. This is default.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.FontVariant.SmallCaps">
            <summary>
            The text is transformed to use small capitals for lower case letters.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.FontVariant.Initial">
            <summary>
            Sets this property to its default value (i.e., 'normal').
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.FontVariant.Inherit">
            <summary>
            Inherits this property from its parent element.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.Css.FontWeight">
            <summary>
            Specifies the weight or thickness of the font.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.FontWeight.Normal">
            <summary>
            Defines normal characters. This is default.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.FontWeight.Bold">
            <summary>
            Defines thick characters.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.FontWeight.Bolder">
            <summary>
            Defines thicker characters.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.FontWeight.Lighter">
            <summary>
            Defines lighter characters.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.FontWeight.Initial">
            <summary>
            Sets this property to its default value (i.e., 'normal').
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.FontWeight.Inherit">
            <summary>
            Inherits this property from its parent element.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.Css.JustifyContent">
            <summary>
            Enum representing CSS 'justify-content' property values.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.JustifyContent.FlexStart">
            <summary>
            Justify content to flex-start.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.JustifyContent.FlexEnd">
            <summary>
            Justify content to flex-end.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.JustifyContent.Center">
            <summary>
            Justify content to the center.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.JustifyContent.SpaceBetween">
            <summary>
            Justify content to space-between.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.JustifyContent.SpaceAround">
            <summary>
            Justify content to space-around.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.JustifyContent.SpaceEvenly">
            <summary>
            Justify content to space-evenly.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.JustifyContent.Start">
            <summary>
            Justify content to the start.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.JustifyContent.End">
            <summary>
            Justify content to the end.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.JustifyContent.Inherit">
            <summary>
            Inherit the value from the parent element.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.Css.Overflow">
            <summary>
            Enum representing CSS 'overflow' property values.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.Overflow.Visible">
            <summary>
            Overflow is not clipped. It renders outside the element's box.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.Overflow.Hidden">
            <summary>
            Overflow is hidden, and the rest of the content is clipped.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.Overflow.Scroll">
            <summary>
            Overflow is clipped, and a scrollbar is added to see the rest of the content.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.Overflow.Auto">
            <summary>
            Auto value is used to allow the browser to automatically manage the overflow.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.Overflow.Inherit">
            <summary>
            Use the parent's overflow value.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.Css.Position">
            <summary>
            Enum representing CSS 'position' property values.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.Position.Static">
            <summary>
            Static positioning.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.Position.Relative">
            <summary>
            Relative positioning.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.Position.Fixed">
            <summary>
            fixed positioning.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.Position.Absolute">
            <summary>
            Absolute positioning.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.Position.Sticky">
            <summary>
            Sticky positioning.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.Position.Inherit">
            <summary>
            Use the value of the 'position' property from the parent element.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.Css.TextDecoration">
            <summary>
            Specifies the type of text decoration to use.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.TextDecoration.None">
            <summary>
            Default value. Specifies that text should not have a decoration.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.TextDecoration.Underline">
            <summary>
            Specifies that text should be underlined.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.TextDecoration.Overline">
            <summary>
            Specifies that text should be overlined.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.TextDecoration.LineThrough">
            <summary>
            Specifies that text should have a line through the middle.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.TextDecoration.Initial">
            <summary>
            Sets this property to its default value (i.e., 'none').
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.TextDecoration.Inherit">
            <summary>
            Inherits this property from its parent element.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.Css.TextTransform">
            <summary>
            Enum representing CSS 'text-transform' property values.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.TextTransform.None">
            <summary>
            Text will not be transformed.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.TextTransform.Uppercase">
            <summary>
            Text will be transformed to uppercase.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.TextTransform.Lowercase">
            <summary>
            Text will be transformed to lowercase.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.TextTransform.Capitalize">
            <summary>
            Text will be transformed to capitalize.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.TextTransform.Inherit">
            <summary>
            Text will inherit the text-transform value from the parent element.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.Css.Visibility">
            <summary>
            Enum representing CSS 'visibility' property values.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.Visibility.Visible">
            <summary>
            Visible.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.Visibility.Hidden">
            <summary>
            Hidden.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.Visibility.Collapse">
            <summary>
            Collapse.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.Visibility.Inherit">
            <summary>
            Inherit.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.Css.WhiteSpace">
            <summary>
            Enum representing CSS 'white-space' property values.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.WhiteSpace.Normal">
            <summary>
            Normal white-space behavior.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.WhiteSpace.Nowrap">
            <summary>
            No wrapping of text.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.WhiteSpace.Pre">
            <summary>
            Preformatted text.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.WhiteSpace.PreLine">
            <summary>
            Preformatted text with preserved line breaks.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.WhiteSpace.PreWrap">
            <summary>
            Preformatted text with preserved line breaks and white space.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Css.WhiteSpace.Inherit">
            <summary>
            Inherit the 'white-space' property from the parent element.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.CssUnit">
            <summary>
            Represents units of measure in CSS.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.CssUnit.Percentage">
            <summary>
            Represents a percentage of a base value in CSS.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.CssUnit.Pixels">
            <summary>
            Represents pixels in CSS.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.CssUnit.Em">
            <summary>
            Represents the font size of the parent element in CSS.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.CssUnit.Rem">
            <summary>
            Represents the font size of the root element in CSS.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.CssUnit.ViewportWidth">
            <summary>
            Represents a percentage of the viewport's width in CSS.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.CssUnit.ViewportHeight">
            <summary>
            Represents a percentage of the viewport's height in CSS.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.CssUnit.ViewportMinimum">
            <summary>
            Represents the smaller dimension of the viewport in CSS.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.CssUnit.ViewportMaximum">
            <summary>
            Represents the larger dimension of the viewport in CSS.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.CssUnit.Centimeters">
            <summary>
            Represents centimeters in CSS.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.CssUnit.Millimeters">
            <summary>
            Represents millimeters in CSS.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.CssUnit.Inches">
            <summary>
            Represents inches in CSS.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.CssUnit.Points">
            <summary>
            Represents points in CSS. One point is equal to 1/72 of an inch.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.CssUnit.Picas">
            <summary>
            Represents picas in CSS. One pica is equal to 12 points.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.Enums.TreeViewExpandBehaviour">
            <summary>
            Controls how the tree view will expand.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Enums.TreeViewExpandBehaviour.Default">
            <summary>
            Default behaviour.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Enums.TreeViewExpandBehaviour.SingleExpand">
            <summary>
            Only one node can be expanded at a time.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Enums.TreeViewExpandBehaviour.None">
            <summary>
            All nodes are expanded and cannot be collapsed.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.Enums.TreeViewMode">
            <summary>
            TreeView mode determines how the tree view will be rendered.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Enums.TreeViewMode.Default">
            <summary>
            Render tree view in default mode.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Enums.TreeViewMode.Horizontal">
            <summary>
            Render tree view in horizontal mode.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Enums.TreeViewMode.Breadcrumb">
            <summary>
            Render tree view as breadcrumb.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Enums.TreeViewMode.List">
            <summary>
            Render tree view as list.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Enums.TreeViewMode.FlatList">
            <summary>
            Render tree view as flat list.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.Enums.TreeViewMode.CardGrid">
            <summary>
            Render tree view as flat list.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.ICaptureService">
            <summary>
            Service for capturing the screen or camera and audio.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.ICaptureService.EditCaptureOptionsAsync(MudBlazor.Extensions.Core.Capture.CaptureOptionsEditMode,MudBlazor.Extensions.Core.Capture.CaptureOptions)">
            <summary>
            Shows a dialog where the user can specify or edit the capture options.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.ICaptureService.StartCaptureAsync(MudBlazor.Extensions.Core.Capture.CaptureOptions,System.Action{MudBlazor.Extensions.Core.Capture.CaptureResult},System.Action{MudBlazor.Extensions.Core.Capture.CaptureId})">
            <summary>
            Starts capturing the screen or camera and audio.
            </summary>
            <returns>Id to stop recording</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Core.ICaptureService.StopCaptureAsync(MudBlazor.Extensions.Core.W3C.MediaStreamTrack)">
            <summary>
            Stops the preview capture for the specified track.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.ICaptureService.StopCaptureAsync(MudBlazor.Extensions.Core.Capture.CaptureId)">
            <summary>
            Stops the capture with the specified ID.
            </summary>
            <param name="captureId">The id for the capture recording to stop</param>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.Extensions.Core.ICaptureService.StopAllCapturesAsync">
            <summary>
            Stops all captures.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.Extensions.Core.ICaptureService.GetAudioDevicesAsync">
            <summary>
            Gets the available audio devices.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.Extensions.Core.ICaptureService.GetVideoDevicesAsync">
            <summary>
            Gets the available video devices.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.Extensions.Core.ICaptureService.SelectCaptureSourceAsync(MudBlazor.Extensions.Core.W3C.DisplayMediaOptions,OneOf.OneOf{Microsoft.AspNetCore.Components.ElementReference,System.String})">
            <summary>
            Selects the capture source.
            </summary>
            <param name="displayMediaOptions">The media options for capturing</param>
            <param name="elementForPreview">Specify an element to show preview. This should be a ElementReference of a videoElement or a selector for a videoElement</param>
            <returns></returns>
        </member>
        <member name="T:MudBlazor.Extensions.Core.IDialogEventService">
            <summary>
            Dialog event service
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.IDialogEventService.Subscribe``1(System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Subscribe to a dialog event
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.IDialogEventService.Unsubscribe``1(System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Unsubscribe from a dialog event
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.IDialogEventService.Publish``1(``0)">
            <summary>
            Publish a dialog event
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.IMudExClassAppearance">
            <summary>
            IMudExClassAppearance holds an applicable class string
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.IMudExClassAppearance.Class">
            <summary>
            Class to apply
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.IMudExComponent">
            <summary>
            Interface for all MudExComponents
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.IJsMudExComponent`1">
            <summary>
            Interface for components with js imports
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:MudBlazor.Extensions.Core.IJsMudExComponent`1.JsRuntime">
            <summary>
            JsRuntime
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.IJsMudExComponent`1.JsReference">
            <summary>
            Reference to the js
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.IJsMudExComponent`1.ModuleReference">
            <summary>
            Reference to imported module
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.IJsMudExComponent`1.ElementReference">
            <summary>
            Reference to rendered element
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.IJsMudExComponent`1.GetJsArguments">
            <summary>
            Returns the object that is passed to js
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.IJsMudExComponent`1.CreateDotNetObjectReference">
            <summary>
            DotNetObjectReference for callbacks
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.IJsMudExComponent`1.ImportModuleAndCreateJsAsync(System.String)">
            <summary>
            Imports the required module and calls the initialize method 
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.IJsMudExComponent`1.DisposeModulesAsync">
            <summary>
            Disposes all modules and references
            </summary>
            <returns></returns>
        </member>
        <member name="T:MudBlazor.Extensions.Core.IMudExDialogReference`1">
            <summary>
            Interface for a MudBlazor dialog reference.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.IMudExDialogReference`1.DialogComponent">
            <summary>
            Gets the dialog component.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.IMudExDialogReference`1.ExecuteOnDialogComponent(System.Action{`0})">
            <summary>
            Executes an action on the dialog component.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.IMudExDialogReference`1.CallStateHasChanged">
            <summary>
            Updates the state of the dialog component.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.IMudExDialogReference`1.DialogReference">
            <summary>
            Gets the dialog reference.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.MudExDialogReferenceExtensions">
            <summary>
            Extension methods for IMudExDialogReference.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExDialogReferenceExtensions.AsMudExDialogReference``1(MudBlazor.IDialogReference)">
            <summary>
            Converts a regular dialog reference to a MudBlazor dialog reference.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExDialogReferenceExtensions.AsMudExDialogReferenceAsync``1(System.Threading.Tasks.Task{MudBlazor.IDialogReference})">
            <summary>
            Converts a regular dialog reference to a MudBlazor dialog reference asynchronously.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExDialogReferenceExtensions.GetDialogComponent``1(MudBlazor.IDialogReference)">
            <summary>
            Gets the dialog component from a dialog reference.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.MudExDialogRef`1">
            <summary>
            Implementation of a MudBlazor dialog reference.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.MudExDialogRef`1.DialogReference">
            <summary>
            The DialogReference
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.MudExDialogRef`1._synchronizationContext">
            <summary>
            The synchronization context to ensure thread safety.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExDialogRef`1.#ctor(MudBlazor.IDialogReference)">
            <summary>
            Constructor for MudExDialogRef.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExDialogRef`1.Close">
            <summary>
            Closes the dialog.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExDialogRef`1.Close(MudBlazor.DialogResult)">
            <summary>
            Closes the dialog with a specific result.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExDialogRef`1.Dismiss(MudBlazor.DialogResult)">
            <summary>
            Dismisses the dialog with a specific result.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExDialogRef`1.InjectRenderFragment(Microsoft.AspNetCore.Components.RenderFragment)">
            <summary>
            Injects a RenderFragment into the dialog.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExDialogRef`1.InjectDialog(System.Object)">
            <summary>
            Injects a dialog instance into the dialog.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExDialogRef`1.GetReturnValueAsync``1">
            <summary>
            Gets the return value of the dialog asynchronously.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.MudExDialogRef`1.Id">
            <summary>
            Gets the ID of the dialog.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExDialogRef`1.Invoke(System.Action)">
            <summary>
            Invokes an action on the synchronization context.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExDialogRef`1.ExecuteOnDialogComponent(System.Action{`0})">
            <summary>
            Executes an action on the dialog component and updates its state.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExDialogRef`1.CallStateHasChanged">
            <summary>
            Invokes the StateHasChanged method of the dialog.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.IMudExDialogService">
            <summary>
            Interface for a service that provides dialog functionality.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.IMudExDialogService.JSRuntime">
            <summary>
            Gets the JavaScript runtime instance.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.IMudExDialogService.ServiceProvider">
            <summary>
            Gets the service provider instance.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.IMudExDialogService.AppearanceService">
            <summary>
            Gets the appearance service instance.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.IMudExDialogService.GetDialogReference(System.Guid)">
            <summary>
            Returns a dialog reference for the dialog with the specified GUID.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.IMudExDialogService.GetDialogUsedDialogOptions(System.Guid)">
            <summary>
            Returns the dialog options for the dialog with the specified GUID.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.IMudExExternalFilePicker">
            <summary>
            External file picker
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.IMudExExternalFilePicker.Image">
            <summary>
            Image
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.IMudExExternalFilePicker.PickAsync(System.Threading.CancellationToken)">
            <summary>
            Forces the picker to open and return files
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.IMudExFileService">
            <summary>
            FileService 
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.IMudExFileService.ReadExcelFile(System.IO.Stream,System.String)">
            <summary>
            Reads a stream as excel file
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.IMudExFileService.ToAbsoluteUrlAsync(System.String)">
            <summary>
            Converts a url to an absolute url
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.Extensions.Core.IMudExFileService.ToBlobUrlAsync(System.String,System.String)">
            <summary>
            Converts a url to a blob url
            </summary>
            <param name="url"></param>
            <param name="mimeType"></param>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.Extensions.Core.IMudExFileService.ToDataUrlAsync(System.String,System.String)">
            <summary>
            Converts a url to a data url
            </summary>
            <param name="url"></param>
            <param name="mimeType"></param>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.Extensions.Core.IMudExFileService.ReadAsStringFromStream(System.IO.Stream)">
            <summary>
            Returns the content of a file as string
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.IMudExFileService.ReadAsStringFromFileDisplayInfosAsync(MudBlazor.Extensions.Components.IMudExFileDisplayInfos)">
            <summary>
            Returns the content of a file as string
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.IMudExFileService.ReadAsStringFromUrlAsync(System.String)">
            <summary>
            Reads a string from an url
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.IMudExFileService.ReadStreamAsync(MudBlazor.Extensions.Components.IMudExFileDisplayInfos)">
            <summary>
            Reads filedisplay info as stream. this stream is a copy and needs to be disposed and closed.
            </summary>
            <param name="fileDisplayInfos"></param>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.Extensions.Core.IMudExFileService.ReadStreamAsync(System.String)">
            <summary>
            Reads a stream from an url
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.IMudExFileService.ReadDataUrlForStreamAsync(System.IO.Stream,System.String,System.Boolean)">
            <summary>
            Reads a data url for a stream
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.IMudExFileService.CreateDataUrlAsync(System.Byte[],System.String,System.Boolean)">
            <summary>
            Creates a data url from bytes this can be a blob url or a data url
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.IMudExFileService.CreateDataUrlAsync(Microsoft.AspNetCore.Components.Forms.IBrowserFile,System.Boolean)">
            <summary>
            Creates an url from a file this can be a blob url or a data url
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.IMudExFileService.ReadBytesAsync(System.String)">
            <summary>
            Read bytes from a file
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.Extensions.Core.IMudExFileService.ReadArchiveAsync(System.Byte[],System.String,System.String)">
            <summary>
            Reads an archive with SharpCompress
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.IMudExFileService.ReadArchiveAsync(System.IO.Stream,System.String,System.String)">
            <summary>
            Reads an archive with SharpCompress
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.IMudExFileService.ReadArchiveWithSystemCompressionAsync(System.IO.Stream,System.String,System.String)">
            <summary>
            Reads an archive with system compression
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.IMudExStyleAppearance">
            <summary>
            IMudExStyleAppearance holds an applicable style string
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.IMudExStyleAppearance.Style">
            <summary>
            CSS Style string to apply
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.IMudExAppearance">
            <summary>
            IMudExAppearance is used to know an applicable style or class holder
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.ISpeechRecognitionService">
            <summary>
            Defines a service interface for speech recognition functionalities, allowing for asynchronous recording and processing of speech input.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.ISpeechRecognitionService.StartRecordingAsync(MudBlazor.Extensions.Core.SpeechRecognitionOptions,System.Action{MudBlazor.Extensions.Core.SpeechRecognitionResult},System.Action{System.String})">
            <summary>
            Starts recording speech asynchronously with specified options, registering callbacks for recognition results and stop events.
            </summary>
            <param name="options">Configuration options for speech recognition.</param>
            <param name="callback">Callback invoked with the speech recognition result.</param>
            <param name="stoppedCallback">Optional callback invoked when recording is stopped.</param>
            <returns>A Task representing the asynchronous operation, containing the recording ID.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Core.ISpeechRecognitionService.StartRecordingAsync(System.Action{MudBlazor.Extensions.Core.SpeechRecognitionResult},System.Action{System.String})">
            <summary>
            Starts recording speech asynchronously, registering callbacks for recognition results and stop events.
            </summary>
            <param name="callback">Callback invoked with the speech recognition result.</param>
            <param name="stoppedCallback">Optional callback invoked when recording is stopped.</param>
            <returns>A Task representing the asynchronous operation, containing the recording ID.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Core.ISpeechRecognitionService.StopRecordingAsync(System.String)">
            <summary>
            Stops the recording asynchronously using the specified recording ID.
            </summary>
            <param name="recordingId">The ID of the recording to be stopped.</param>
            <returns>A Task representing the asynchronous operation.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Core.ISpeechRecognitionService.StopAllRecordingsAsync">
            <summary>
            Stops all ongoing recordings asynchronously.
            </summary>
            <returns>A Task representing the asynchronous operation.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Core.ISpeechRecognitionService.GetAudioDevicesAsync">
            <summary>
            Returns a collection of available audio devices for input.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.MudExAppearance">
            <summary>
            The `MudExAppearance` class is a powerful tool that helps to manage CSS and styles of MudBlazor components dynamically. 
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.MudExAppearance.Class">
            <summary>
            Class to apply
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.MudExAppearance.Style">
            <summary>
            CSS Style string to apply
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.MudExAppearance.KeepExisting">
            <summary>
            Set to false to overwrite all existing classes and styles
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExAppearance.Empty">
            <summary>
            Factory method for an empty instance
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExAppearance.FromCss(MudBlazor.Extensions.Helper.MudExCss.Classes,MudBlazor.Extensions.Helper.MudExCss.Classes[])">
            <summary>
            Factory method for an instance filled with some classes
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExAppearance.FromCss(MudBlazor.Extensions.Helper.MudExCssBuilder)">
            <summary>
            Factory method for an instance filled with some classes from a MudExCssBuilder
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExAppearance.FromStyle(System.Object)">
            <summary>
            Factory method for an instance filled with some styles
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExAppearance.FromStyle(System.String)">
            <summary>
            Factory method for an instance filled with some styles
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExAppearance.FromStyle(MudBlazor.Extensions.Helper.MudExStyleBuilder)">
            <summary>
            Factory method for an instance filled with some styles
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExAppearance.FromStyle(System.Action{MudBlazor.Extensions.Helper.MudExStyleBuilder})">
            <summary>
            Factory method for an instance filled with some styles
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExAppearance.WithStyle(MudBlazor.Extensions.Core.IMudExStyleAppearance)">
            <summary>
            Adds style to this appearance from given appearance
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExAppearance.WithStyle(System.Object,MudBlazor.Extensions.Core.CssUnit)">
            <summary>
            Adds style to this appearance from given styleObj
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExAppearance.WithStyle(System.Object,System.String,MudBlazor.Extensions.Core.CssUnit)">
            <summary>
            Adds style to this appearance from given styleObj
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExAppearance.WithStyle(System.String)">
            <summary>
            Adds style to this appearance from given styleString
            </summary>    
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExAppearance.WithStyle(System.Action{MudBlazor.Extensions.Helper.MudExStyleBuilder})">
            <summary>
            Adds style to this appearance with passing a fluent Action with a MudExStyleBuilder
            </summary>    
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExAppearance.WithStyle(System.Func{MudBlazor.Extensions.Helper.MudExStyleBuilder,System.Threading.Tasks.Task})">
            <summary>
            Adds style to this appearance with passing a async Func with a MudExStyleBuilder
            </summary>    
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExAppearance.WithCss(System.String,System.String[])">
            <summary>
            Adds class to this appearance
            </summary>    
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExAppearance.WithCss(System.String,System.Boolean)">
            <summary>
            Adds class to this appearance
            </summary>    
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExAppearance.WithCss(MudBlazor.Extensions.Helper.MudExCss.Classes,System.Boolean)">
            <summary>
            Adds class to this appearance
            </summary>    
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExAppearance.WithCss(MudBlazor.Extensions.Helper.MudExCss.Classes,MudBlazor.Extensions.Helper.MudExCss.Classes[])">
            <summary>
            Adds class to this appearance
            </summary>    
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExAppearance.WithCss(MudBlazor.Extensions.Core.IMudExClassAppearance)">
            <summary>
            Adds class to this appearance
            </summary>    
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExAppearance.WithCss(System.Action{MudBlazor.Extensions.Helper.MudExCssBuilder})">
            <summary>
            Adds class to this appearance
            </summary>    
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExAppearance.WithCss(System.Func{MudBlazor.Extensions.Helper.MudExCssBuilder,System.Threading.Tasks.Task})">
            <summary>
            Adds class to this appearance
            </summary>    
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExAppearance.Clone">
            <summary>
            Clone this instance
            </summary>
            <returns></returns>
        </member>
        <member name="T:MudBlazor.Extensions.Core.MudExArchivedBrowserFile">
            Represents a file entry inside of an archive as BrowserFile
        </member>
        <member name="T:MudBlazor.Extensions.Core.MudExArchiveStructure">
            <summary>
            Represents the structure of an archive file or directory, used to render a file browser.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.MudExArchiveStructure.Icon">
            <summary>
            Icon to be used for the file or directory.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.MudExArchiveStructure.Color">
            <summary>
            Color to be used for the file or directory.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.MudExColor">
            <summary>
            MudExColor is a readonly struct that provides a convenient and type-safe way to deal with color values in the context of MudBlazor.Extensions components.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExColor.#ctor(OneOf.OneOf{MudBlazor.Color,MudBlazor.Utilities.MudColor,System.Drawing.Color,System.String,System.UInt32})">
            <summary>
            MudExColor constructor, builds the color from various potential inputs.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.MudExColor.SuggestedFormat">
            <summary>
            The suggested output format for the color.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.MudExColor.Value">
            <summary>
            The color value.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.MudExColor.IsColor">
            <summary>
            Determines if the value is of type Color.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.MudExColor.IsMudColor">
            <summary>
            Determines if the value is of type MudColor.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.MudExColor.IsDrawingColor">
            <summary>
            Determines if the value is of type DrawingColor.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.MudExColor.IsString">
            <summary>
            Determines if the value is of type String.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.MudExColor.IsInt">
            <summary>
            Determines if the value is of type Integer.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.MudExColor.AsColor">
            <summary>
            Returns the value as Color type.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.MudExColor.AsMudColor">
            <summary>
            Returns the value as MudColor type.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.MudExColor.AsDrawingColor">
            <summary>
            Returns the value as DrawingColor type.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.MudExColor.AsString">
            <summary>
            Returns the value as String type.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.MudExColor.AsInt">
            <summary>
            Returns the value as Integer type.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExColor.Match``1(System.Func{MudBlazor.Color,``0},System.Func{MudBlazor.Utilities.MudColor,``0},System.Func{System.Drawing.Color,``0},System.Func{System.String,``0},System.Func{System.UInt32,``0})">
            <summary>
            Executes a function depending on the type of the value.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExColor.Switch(System.Action{MudBlazor.Color},System.Action{MudBlazor.Utilities.MudColor},System.Action{System.Drawing.Color},System.Action{System.String},System.Action{System.UInt32})">
            <summary>
            Executes an action depending on the type of the value.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExColor.op_Implicit(MudBlazor.Color)~MudBlazor.Extensions.Core.MudExColor">
            <summary>
            Implicit conversion from Color type to MudExColor.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExColor.op_Implicit(MudBlazor.Utilities.MudColor)~MudBlazor.Extensions.Core.MudExColor">
            <summary>
            Implicit conversion from MudColor type to MudExColor.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExColor.op_Implicit(System.Drawing.Color)~MudBlazor.Extensions.Core.MudExColor">
            <summary>
            Implicit conversion from DC type to MudExColor.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExColor.op_Implicit(System.String)~MudBlazor.Extensions.Core.MudExColor">
            <summary>
            Implicit conversion from String type to MudExColor.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExColor.op_Implicit(System.UInt32)~MudBlazor.Extensions.Core.MudExColor">
            <summary>
            Implicit conversion from Integer type to MudExColor.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.MudExColor.Transparent">
            <summary>
            Transparant color.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.MudExColor.Default">
            <summary>
            Default color.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.MudExColor.Info">
            <summary>
            Info color.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.MudExColor.Warning">
            <summary>
            Warning color.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.MudExColor.Error">
            <summary>
            Error color.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.MudExColor.Success">
            <summary>
            Success color.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.MudExColor.Inherit">
            <summary>
            Inherit color.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.MudExColor.Dark">
            <summary>
            Dark color.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.MudExColor.Primary">
            <summary>
            Primary color.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.MudExColor.Secondary">
            <summary>
            Secondary color.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.MudExColor.Tertiary">
            <summary>
            Tertiary color.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.MudExColor.Surface">
            <summary>
            Surface color.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.MudExColor.AppBarBackground">
            <summary>
            Appbar background color.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.MudExColor.HoverBackground">
            <summary>
            Background color when hovered.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.MudExColor.DrawerBackground">
            <summary>
            Drawer background color.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.MudExColor.TextPrimary">
            <summary>
            Text primary color.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.MudExColor.TextSecondary">
            <summary>
            Text secondary color.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.MudExColor.TextDrawer">
            <summary>
            Text drawer color.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.MudExColor.TextDisabled">
            <summary>
            Text disabled color.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.MudExColor.TextActionDisabled">
            <summary>
            Text action disabled color.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.MudExColor.ActionDisabledBackground">
            <summary>
            Disabled background color for actions.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExColor.Is(MudBlazor.Color)">
            <summary>
            Determines if the value equals the provided Color.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExColor.Is(System.String)">
            <summary>
            Determines if the value equals the provided String.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExColor.Is(MudBlazor.Utilities.MudColor)">
            <summary>
            Determines if the value equals the provided MudColor.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExColor.Is(System.UInt32)">
            <summary>
            Determines if the value equals the provided Integer.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExColor.Is(System.Drawing.Color)">
            <summary>
            Determines if the value equals the provided MudColor.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExColor.ToString">
            <summary>
            Converts this MudExColor object to its string representation.
            </summary>
            <returns>A string that represents this MudExColor object.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExColor.ToCssStringValue">
            <summary>
            Converts this MudExColor object to a CSS string.
            </summary>
            <returns>A CSS string that represents this MudExColor object.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExColor.ToCssStringValue(MudBlazor.Utilities.MudColorOutputFormats)">
            <summary>
            Creates a css compatible string representation of the color.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExColor.ToMudColorAsync(Microsoft.JSInterop.IJSRuntime)">
            <summary>
            Creates a MudColor independent of what the underlying type is.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExColor.ToMudColor">
            <summary>
            Creates a MudColor independent of what the underlying type is.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExColor.GetColorsFromThemeAsync(Microsoft.JSInterop.IJSRuntime,System.Int32)">
            <summary>
            Static helper method to list colors from current Theme
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExColor.GetSuggestedFormat(System.String)">
            <summary>
            returns the suggested format for a color string
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:MudBlazor.Extensions.Core.MudExDimension">
            <summary>
            Holds two sizes one for height and one for width and their units
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExDimension.#ctor(MudBlazor.Extensions.Core.MudExSize{System.Double})">
            <summary>
            Creates a new instance of <see cref="T:MudBlazor.Extensions.Core.MudExDimension"/>
            </summary>
            <param name="widthAndHeight"></param>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExDimension.#ctor(MudBlazor.Extensions.Core.MudExSize{System.Double},MudBlazor.Extensions.Core.MudExSize{System.Double})">
            <summary>
            Creates a new instance of <see cref="T:MudBlazor.Extensions.Core.MudExDimension"/>
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExDimension.#ctor(System.String)">
            <summary>
            Creates a new size dimension by parsing an string like 3px or 10% etc
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.MudExDimension.Width">
            <summary>
            Width
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.MudExDimension.Height">
            <summary>
            Height
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExDimension.op_Implicit(System.Double)~MudBlazor.Extensions.Core.MudExDimension">
            <summary>
            Implicit conversion from double to <see cref="T:MudBlazor.Extensions.Core.MudExDimension"/>
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExDimension.op_Implicit(System.String)~MudBlazor.Extensions.Core.MudExDimension">
            <summary>
            Implicit conversion from String to MudExDimension type.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExDimension.ToString">
            <inheritdoc />
        </member>
        <member name="T:MudBlazor.Extensions.Core.MudExIcons">
            <summary>
            Set of custom icons for MudBlazor components.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.MudExIcons.Custom">
            <summary>
            Custom icons for MudBlazor components.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.MudExIcons.Custom.Brands">
            <summary>
            Brand icons for MudBlazor components.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.MudExIcons.Custom.Brands.Nuget">
            <summary>
            Nuget brand icon.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.MudExIcons.Custom.Brands.DropBox">
            <summary>
            DropBox brand icon.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.MudExIcons.Custom.Brands.OneDrive">
            <summary>
            OneDrive brand icon.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.MudExIcons.Custom.Brands.GoogleDrive">
            <summary>
            GoogleDrive brand icon.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.MudExIcons.Custom.Brands.ColorFull">
            <summary>
            ColorFull brand icon.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.MudExIcons.Custom.Brands.ColorFull.Nuget">
            <summary>
            Nuget brand icon.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.MudExIcons.Custom.Brands.ColorFull.DropBox">
            <summary>
            DropBox brand icon.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.MudExIcons.Custom.Brands.ColorFull.OneDrive">
            <summary>
            OneDrive brand icon.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.MudExIcons.Custom.Brands.ColorFull.GoogleDrive">
            <summary>
            GoogleDrive brand icon.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.MudExPosition">
            <summary>
            Holds two position one for left and one for top and their units
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExPosition.#ctor(MudBlazor.Extensions.Core.MudExSize{System.Double})">
            <summary>
            Creates a new instance of <see cref="T:MudBlazor.Extensions.Core.MudExDimension"/>
            </summary>
            <param name="leftAndTop"></param>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExPosition.#ctor(MudBlazor.Extensions.Core.MudExSize{System.Double},MudBlazor.Extensions.Core.MudExSize{System.Double})">
            <summary>
            Creates a new instance of <see cref="T:MudBlazor.Extensions.Core.MudExDimension"/>
            </summary>
            <param name="left"></param>
            <param name="top"></param>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExPosition.#ctor(System.String)">
            <summary>
            Creates a new position by parsing a string like 3px or 10% etc
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.MudExPosition.Left">
            <summary>
            Left
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.MudExPosition.Top">
            <summary>
            Top
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExPosition.op_Implicit(System.Double)~MudBlazor.Extensions.Core.MudExPosition">
            <summary>
            Implicit conversion from double to <see cref="T:MudBlazor.Extensions.Core.MudExDimension"/>
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExPosition.op_Implicit(System.String)~MudBlazor.Extensions.Core.MudExPosition">
            <summary>
            Implicit conversion from String to MudExDimension type.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExPosition.ToString">
            <inheritdoc />
        </member>
        <member name="T:MudBlazor.Extensions.Core.MudExSize`1">
            <summary>
            MudExSize is a readonly struct that provides a convenient and type-safe way to deal with size values in the context of MudBlazor components.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.MudExSize`1.Value">
            <summary>
            The value of the size.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.MudExSize`1.SizeUnit">
            <summary>
            The unit of the size.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.MudExSize`1.CssValue">
            <summary>
            String representation of the size that is fully compatible with all css sizes.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExSize`1.#ctor(System.String)">
            <summary>
            Creates a new size by parsing an string like 3px or 10% etc
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExSize`1.#ctor(`0,MudBlazor.Extensions.Core.CssUnit)">
            <summary>
            Creates a new size
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExSize`1.ToString">
            <summary>
            Returns the string representation that is fully compatible with all css sizes
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExSize`1.IsZero">
            <summary>
            Returns true if the size is zero
            </summary>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExSize`1.op_Implicit(MudBlazor.Extensions.Core.MudExSize{`0})~`0">
            <summary>
            Implicit conversion from MudExSize type to Generic Type T.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExSize`1.op_Implicit(`0)~MudBlazor.Extensions.Core.MudExSize{`0}">
            <summary>
            Implicit conversion from Generic Type T to MudExSize.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExSize`1.op_Implicit(MudBlazor.Extensions.Core.MudExSize{`0})~System.String">
            <summary>
            Implicit conversion from MudExSize type to String.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.MudExSize`1.op_Implicit(System.String)~MudBlazor.Extensions.Core.MudExSize{`0}">
            <summary>
            Implicit conversion from String to MudExSize type.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.SpeechRecognitionOptions">
            <summary>
            Defines configuration options for speech recognition services.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.SpeechRecognitionOptions.CultureInfo">
            <summary>
            Gets or sets the culture information for the speech recognition, derived from the language code.
            </summary>
            <remarks>
            This property is marked with attributes to be ignored during JSON serialization.
            </remarks>
        </member>
        <member name="P:MudBlazor.Extensions.Core.SpeechRecognitionOptions.MaxCaptureTime">
            <summary>
            If set, the recording will stop after the specified time.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.SpeechRecognitionOptions.ShowNotificationWhileRecording">
            <summary>
            If this is true a notification toast will be shown while recording.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.SpeechRecognitionOptions.Device">
            <summary>
            DeviceId for audio input, used for selecting the appropriate microphone.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.SpeechRecognitionOptions.Lang">
            <summary>
            Language code used for speech recognition, corresponding to the specific culture.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.SpeechRecognitionOptions.FinalResultsOnly">
            <summary>
            Specifies whether only final results should be returned, ignoring interim results.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.SpeechRecognitionOptions.Continuous">
            <summary>
            Indicates if the recognition should process continuously rather than stopping after a single utterance.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.SpeechRecognitionOptions.InterimResults">
            <summary>
            Indicates whether interim results should be included in the recognition results.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.SpeechRecognitionResult">
            <summary>
            Represents the result of a speech recognition operation.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.SpeechRecognitionResult.Transcript">
            <summary>
            The transcript of the recognized speech.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.SpeechRecognitionResult.TranscriptChanges">
            <summary>
            Detailed changes between interim and final transcripts if interim results are provided.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.SpeechRecognitionResult.IsFinalResult">
            <summary>
            Indicates whether the result is the final transcript of the speech recognition.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.SpeechRecognitionResult.Options">
            <summary>
            The options used for this particular instance of speech recognition.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.SpeechRecognitionResult.AudioData">
            <summary>
            The audio data used for speech recognition.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.StateChangeMode">
            <summary>
            Mode for state changes
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.StateChangeMode.Auto">
            <summary>
            Auto is always asynchronous on server side and synchronous on client side
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.StateChangeMode.Asynchronous">
            <summary>
            Equals InvokeAsync(StateHasChanged)
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.StateChangeMode.Synchronous">
            <summary>
            Equals StateHasChanged()
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.W3C.AudioConstraints">
            <summary>
            Represents constraints for capturing audio, including settings like device ID, echo cancellation, and sample rate.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.W3C.AudioConstraints.DeviceId">
            <summary>
            Gets or sets the device ID for the audio source.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.W3C.AudioConstraints.GroupId">
            <summary>
            Gets or sets the group ID for the audio source.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.W3C.AudioConstraints.SuppressLocalAudioPlayback">
            <summary>
            Indicates whether local audio playback should be suppressed.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.W3C.AudioConstraints.EchoCancellation">
            <summary>
            Indicates whether echo cancellation is enabled.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.W3C.AudioConstraints.AutoGainControl">
            <summary>
            Indicates whether auto gain control is enabled.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.W3C.AudioConstraints.NoiseSuppression">
            <summary>
            Indicates whether noise suppression is enabled.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.W3C.AudioConstraints.SampleRate">
            <summary>
            Gets or sets the desired sample rate for audio capture.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.W3C.AudioConstraints.SampleSize">
            <summary>
            Gets or sets the desired sample size for audio capture.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.W3C.AudioConstraints.ChannelCount">
            <summary>
            Gets or sets the number of audio channels.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.W3C.AudioConstraints.Latency">
            <summary>
            Gets or sets the desired latency for audio capture.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.W3C.AudioConstraints.VoiceIsolation">
            <summary>
            Gets or sets the voice isolation mode.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.W3C.AudioDevice">
            <summary>
            Represents an audio device.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.W3C.AudioDevice.Default">
            <summary>
            Default audio device.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.W3C.CaptureCursor">
            <summary>
            Specifies how the cursor should be captured during video recording.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.W3C.CaptureCursor.Always">
            <summary>
            Always capture the cursor.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.W3C.CaptureCursor.Motion">
            <summary>
            Capture the cursor only when it moves.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.W3C.CaptureCursor.Never">
            <summary>
            Never capture the cursor.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.W3C.CaptureDisplaySurface">
            <summary>
            Defines types of display surfaces for video capture.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.W3C.CaptureDisplaySurface.Monitor">
            <summary>
            Capture the entire monitor display.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.W3C.CaptureDisplaySurface.Window">
            <summary>
            Capture a specific window.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.W3C.CaptureDisplaySurface.Application">
            <summary>
            Capture an application view.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.W3C.CaptureDisplaySurface.Browser">
            <summary>
            Capture the browser display.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.W3C.CaptureExposureMode">
            <summary>
            Defines the exposure modes for a camera.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.W3C.CaptureExposureMode.None">
            <summary>
            No specific exposure mode.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.W3C.CaptureExposureMode.Manual">
            <summary>
            Manual exposure control.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.W3C.CaptureExposureMode.Single">
            <summary>
            Single-shot exposure adjustment.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.W3C.CaptureExposureMode.Continuous">
            <summary>
            Continuous exposure adjustment.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.W3C.CaptureFacingMode">
            <summary>
            Specifies the facing mode for the camera (e.g., front-facing or rear-facing).
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.W3C.CaptureFacingMode.User">
            <summary>
            The camera is user-facing.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.W3C.CaptureFacingMode.Environment">
            <summary>
            The camera is environment-facing (e.g., rear camera).
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.W3C.CaptureFacingMode.Left">
            <summary>
            The camera faces the left side.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.W3C.CaptureFacingMode.Right">
            <summary>
            The camera faces the right side.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.W3C.CaptureFocusMode">
            <summary>
            Specifies focus modes for camera devices.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.W3C.CaptureFocusMode.None">
            <summary>
            No specific focus mode.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.W3C.CaptureFocusMode.Manual">
            <summary>
            Manual focus control.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.W3C.CaptureFocusMode.Single">
            <summary>
            Single focus adjustment.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.W3C.CaptureFocusMode.Continuous">
            <summary>
            Continuous focus adjustment.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.W3C.CapturePoint">
            <summary>
            Represents a point in 2D space, used for specifying areas of interest in video capture.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.W3C.CapturePoint.X">
            <summary>
            The X-coordinate of the point.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.W3C.CapturePoint.Y">
            <summary>
            The Y-coordinate of the point.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.W3C.CaptureResizeMode">
            <summary>
            Defines resize modes for video capture.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.W3C.CaptureResizeMode.None">
            <summary>
            No specific resize mode.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.W3C.CaptureResizeMode.CropAndScale">
            <summary>
            Crop the captured video and scale it to fit.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.W3C.CaptureVoiceIsolationMode">
            <summary>
            Specifies voice isolation modes for audio capture.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.W3C.CaptureVoiceIsolationMode.Off">
            <summary>
            No voice isolation.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.W3C.CaptureVoiceIsolationMode.Standard">
            <summary>
            Standard voice isolation.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.W3C.CaptureVoiceIsolationMode.High">
            <summary>
            High level of voice isolation.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.W3C.CaptureWhiteBalanceMode">
            <summary>
            Specifies white balance modes for camera devices.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.W3C.CaptureWhiteBalanceMode.None">
            <summary>
            No specific white balance mode.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.W3C.CaptureWhiteBalanceMode.Manual">
            <summary>
            Manual white balance adjustment.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.W3C.CaptureWhiteBalanceMode.Single">
            <summary>
            Single-shot white balance adjustment.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.W3C.CaptureWhiteBalanceMode.Continuous">
            <summary>
            Continuous white balance adjustment.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.W3C.DeviceKind">
            <summary>
            HardwareDeviceKind
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.W3C.DeviceKind.VideoInput">
            <summary>
            Video input device.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.W3C.DeviceKind.AudioInput">
            <summary>
            Audio input device.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.W3C.DeviceKind.AudioOutput">
            <summary>
            Audio output device.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.W3C.DeviceKind.Video">
            <summary>
            Video device.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.W3C.DisplayMediaOptions">
            <summary>
            Represents the options for capturing display media, including video and audio constraints, 
            preferences for capturing the current tab, and settings for system audio and browser surfaces.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.W3C.DisplayMediaOptions.PreferCurrentTab">
            <summary>
            Indicates whether the current tab is preferred for capture.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.W3C.DisplayMediaOptions.SelfBrowserSurface">
            <summary>
            Determines whether the self browser surface should be included or excluded during capture.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.W3C.DisplayMediaOptions.SystemAudio">
            <summary>
            Determines whether the system audio should be included or excluded.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.W3C.DisplayMediaOptions.SurfaceSwitching">
            <summary>
            Determines whether surface switching is allowed.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.W3C.DisplayMediaOptions.MonitorTypeSurfaces">
            <summary>
            Determines whether monitor-type surfaces should be included or excluded.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.W3C.DisplayMediaOptions.Video">
            <summary>
            Gets or sets the constraints for video capture.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.W3C.DisplayMediaOptions.Audio">
            <summary>
            Gets or sets the constraints for audio capture.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.W3C.DisplayMediaOptions.WithSystemAudio">
            <summary>
            Configures the options to include system audio.
            </summary>
            <returns>The updated <see cref="T:MudBlazor.Extensions.Core.W3C.DisplayMediaOptions"/>.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Core.W3C.DisplayMediaOptions.WithoutSystemAudio">
            <summary>
            Configures the options to exclude system audio.
            </summary>
            <returns>The updated <see cref="T:MudBlazor.Extensions.Core.W3C.DisplayMediaOptions"/>.</returns>
        </member>
        <member name="P:MudBlazor.Extensions.Core.W3C.DisplayMediaOptions.Default">
            <summary>
            Provides default display media options.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.W3C.DisplayMediaOptions.WithoutAudio">
            <summary>
            Provides display media options without audio.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.W3C.DisplayMediaOptions.BestQuality">
            <summary>
            Provides display media options configured for best quality.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.W3C.DisplayMediaOptions.LowBandwidth">
            <summary>
            Provides display media options optimized for low bandwidth usage.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.W3C.DisplayMediaOptions.CurrentTabWithAudio">
            <summary>
            Provides display media options to capture the current tab with audio.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.W3C.HardwareDeviceInfo">
            <summary>
            Represents a hardware device.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.W3C.HardwareDeviceInfo.DeviceId">
            <summary>
            Device id.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.W3C.HardwareDeviceInfo.GroupId">
            <summary>
            Group id.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.W3C.HardwareDeviceInfo.Label">
            <summary>
            Label of the device.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.W3C.HardwareDeviceInfo.Kind">
            <summary>
            Kind of the device.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Core.W3C.HardwareDeviceInfo.ToString">
            <inheritdoc />
        </member>
        <member name="T:MudBlazor.Extensions.Core.W3C.IncludeExclude">
            <summary>
            Defines options to include or exclude a feature.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.W3C.IncludeExclude.Include">
            <summary>
            Include the feature.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Core.W3C.IncludeExclude.Exclude">
            <summary>
            Exclude the feature.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.W3C.MediaStreamTrack">
            <summary>
            MediaStreamTrack
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.W3C.MediaStreamTrack.AccessId">
            <summary>
            AccessId
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.W3C.MediaStreamTrack.Enabled">
            <summary>
            Is enabled
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.W3C.MediaStreamTrack.Id">
            <summary>
            Track Id
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.W3C.MediaStreamTrack.Muted">
            <summary>
            Is muted
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.W3C.MediaStreamTrack.ReadyState">
            <summary>
            Ready state
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.W3C.MediaStreamTrack.Stats">
            <summary>
            Stats
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.W3C.MediaStreamTrackVideoStats">
            <summary>
            MediaStreamTrackVideoStats
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.W3C.MediaStreamTrackVideoStats.DeliveredFrames">
            <summary>
            Delivered frames
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.W3C.MediaStreamTrackVideoStats.DiscardedFrames">
            <summary>
            Discarded frames
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.W3C.MediaStreamTrackVideoStats.TotalFrames">
            <summary>
            Total frames
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Core.W3C.VideoConstraints">
            <summary>
            Represents constraints for capturing video, including settings like resolution, frame rate, and device-specific properties.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.W3C.VideoConstraints.DeviceId">
            <summary>
            Gets or sets the device ID for the video source.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.W3C.VideoConstraints.GroupId">
            <summary>
            Gets or sets the group ID for the video source.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.W3C.VideoConstraints.DisplaySurface">
            <summary>
            Gets or sets the display surface type (e.g., monitor, window).
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.W3C.VideoConstraints.LogicalSurface">
            <summary>
            Indicates whether to capture the logical surface of the display.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.W3C.VideoConstraints.Cursor">
            <summary>
            Specifies how the cursor should be captured (e.g., always, motion only).
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.W3C.VideoConstraints.Width">
            <summary>
            Gets or sets the desired width of the video.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.W3C.VideoConstraints.Height">
            <summary>
            Gets or sets the desired height of the video.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.W3C.VideoConstraints.AspectRatio">
            <summary>
            Gets or sets the desired aspect ratio of the video.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.W3C.VideoConstraints.FrameRate">
            <summary>
            Gets or sets the desired frame rate of the video.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.W3C.VideoConstraints.FacingMode">
            <summary>
            Specifies the facing mode (e.g., user-facing or environment-facing).
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.W3C.VideoConstraints.ResizeMode">
            <summary>
            Specifies the resize mode for the video (e.g., crop and scale).
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.W3C.VideoConstraints.Brightness">
            <summary>
            Gets or sets the desired brightness level for the video.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.W3C.VideoConstraints.ColorTemperature">
            <summary>
            Gets or sets the desired color temperature for the video.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.W3C.VideoConstraints.Contrast">
            <summary>
            Gets or sets the desired contrast level for the video.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.W3C.VideoConstraints.Saturation">
            <summary>
            Gets or sets the desired saturation level for the video.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.W3C.VideoConstraints.Sharpness">
            <summary>
            Gets or sets the desired sharpness level for the video.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.W3C.VideoConstraints.ExposureCompensation">
            <summary>
            Gets or sets the exposure compensation for the video.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.W3C.VideoConstraints.ExposureMode">
            <summary>
            Specifies the exposure mode (e.g., manual, single, continuous).
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.W3C.VideoConstraints.ExposureTime">
            <summary>
            Gets or sets the desired exposure time for the video.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.W3C.VideoConstraints.ISO">
            <summary>
            Gets or sets the ISO sensitivity for the video.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.W3C.VideoConstraints.FocusMode">
            <summary>
            Specifies the focus mode (e.g., manual, continuous).
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.W3C.VideoConstraints.FocusDistance">
            <summary>
            Gets or sets the focus distance for the video.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.W3C.VideoConstraints.PointsOfInterest">
            <summary>
            Gets or sets points of interest for the camera to focus on.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.W3C.VideoConstraints.Pan">
            <summary>
            Gets or sets the pan level for the camera.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.W3C.VideoConstraints.Tilt">
            <summary>
            Gets or sets the tilt level for the camera.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.W3C.VideoConstraints.Zoom">
            <summary>
            Gets or sets the zoom level for the camera.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.W3C.VideoConstraints.Torch">
            <summary>
            Indicates whether the camera's torch (flashlight) is enabled.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Core.W3C.VideoConstraints.WhiteBalanceMode">
            <summary>
            Specifies the white balance mode (e.g., manual, continuous).
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.MudExDialogResultAction">
            <summary>
            Represents an action within a MudBlazor dialog that returns a specific dialog result.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.MudExDialogResultAction.WithCondition``1(System.Func{``0,System.Boolean})">
            <summary>
            Specify a condition for this action to be enabled.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.MudExDialogResultAction.OnClick">
            <summary>
            Attach custom on click
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.MudExDialogResultAction.Result">
            <summary>
            Gets or sets the DialogResult for this action.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.MudExDialogResultAction.Label">
            <summary>
            Gets or sets the text displayed on the action button.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.MudExDialogResultAction.Variant">
            <summary>
            Gets or sets the visual style variant for the action button.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.MudExDialogResultAction.Color">
            <summary>
            Gets or sets the color for the action button.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.MudExDialogResultAction.HasCondition">
            <summary>
            Returns true if this action has a condition.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.MudExDialogResultAction.Ok(System.String)">
            <summary>
            Creates an array with a single "Ok" action.
            </summary>
            <param name="confirmText">The text for the "Ok" button. Defaults to "Ok".</param>
            <returns>An array with a single "Ok" action.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.MudExDialogResultAction.OkWithCondition``1(System.Func{``0,System.Boolean},System.String)">
            <summary>
            Creates an array with a single "Ok" action.
            </summary>
            <param name="canExecuteFunc">Function to determine if action can be executed</param>
            <param name="confirmText">The text for the "Ok" button. Defaults to "Ok".</param>
            <returns>An array with a single "Ok" action.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.MudExDialogResultAction.Cancel(System.String)">
            <summary>
            Creates an array with a single "Cancel" action.
            </summary>
            <param name="confirmText">The text for the "Cancel" button. Defaults to "Ok".</param>
            <returns>An array with a single "Cancel" action.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.MudExDialogResultAction.OkCancelWithOkCondition``1(System.Func{``0,System.Boolean},System.String,System.String)">
            <summary>
            Creates an array with both "Ok" and "Cancel" actions.
            </summary>
            <param name="canExecuteFunc">Function to determine if action can be executed</param>
            <param name="confirmText">The text for the "Ok" button. Defaults to "Ok".</param>
            <param name="cancelText">The text for the "Cancel" button. Defaults to "Cancel".</param>
            <returns>An array with both "Ok" and "Cancel" actions.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.MudExDialogResultAction.OkCancel(System.String,System.String)">
            <summary>
            Creates an array with both "Ok" and "Cancel" actions.
            </summary>
            <param name="confirmText">The text for the "Ok" button. Defaults to "Ok".</param>
            <param name="cancelText">The text for the "Cancel" button. Defaults to "Cancel".</param>
            <returns>An array with both "Ok" and "Cancel" actions.</returns>
        </member>
        <member name="T:MudBlazor.Extensions.DialogServiceExt">
            <summary>
            Contains extensions for component-based dialog actions.
            </summary>
            <summary>
            Dialog service extension methods.
            </summary>
            <summary>
            Contains extensions for the IDialogService for displaying a file in different formats.
            </summary>
            <summary>
            Contains extensions for the IDialogService for displaying a file in different formats.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.InnerPickItemsAsync``2(MudBlazor.IDialogService,System.String,System.String,System.Action{``0},System.Func{``0,System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``1}}},MudBlazor.Extensions.MudExDialogResultAction[],MudBlazor.Extensions.Options.DialogOptionsEx,System.Action{MudBlazor.Extensions.Components.MudExMessageDialog})">
            <summary>
            Displays a dialog with a custom component and retrieves items from that component.
            </summary>
            <typeparam name="TComponent">The type of the component to be displayed in the dialog.</typeparam>
            <typeparam name="T">The type of items to be retrieved from the component.</typeparam>
            <param name="dialogService">The dialog service instance used to show the dialog.</param>
            <param name="title">The title of the dialog.</param>
            <param name="headerText">The header text of the dialog.</param>
            <param name="cmpConfigure">An action to configure the component instance.</param>
            <param name="retrieveItemsFromComponent">A function to asynchronously retrieve items from the component.</param>
            <param name="buttons">An array of dialog result actions to configure dialog buttons and result conditions.</param>
            <param name="options">Optional dialog options to customize behavior and appearance.</param>
            <param name="dialogParameters">An optional action to configure additional dialog parameters.</param>
            <returns>A task that represents the asynchronous operation. The task result contains an array of selected items of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.PickItemsAsync``1(MudBlazor.IDialogService,System.String,System.String,System.Func{System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}}},System.Func{MudBlazor.Extensions.Components.MudExList{``0},System.Boolean},System.Boolean,System.Boolean,System.Func{``0,System.String},MudBlazor.Extensions.Options.DialogOptionsEx,System.Action{MudBlazor.Extensions.Components.MudExList{``0}},System.Action{MudBlazor.Extensions.Components.MudExMessageDialog})">
            <summary>
            Displays a dialog to let the user pick one or multiple items from a list.
            </summary>
            <typeparam name="T">The type of items to display in the list.</typeparam>
            <param name="dialogService">The dialog service instance used to show the dialog.</param>
            <param name="title">The title of the dialog.</param>
            <param name="headerText">The header text of the dialog.</param>
            <param name="itemsLoadFunc">A function that asynchronously loads the items to be displayed.</param>
            <param name="forceSelect">
            If set to <c>true</c>, the dialog cannot be closed without selecting an item.
            </param>
            <param name="okCondition">Condition for the ok button. If this func returns true Ok is enabled</param>
            <param name="unselectable">
            Indicates whether a selected item can be unselected again
            </param>
            <param name="itemToStringFunc">
            A function to convert an item to its string representation. If not provided, the item's <c>ToString</c> method is used.
            </param>
            <param name="options">Optional dialog options to customize the dialog behavior.</param>
            <param name="cmpConfigure">An optional action to further configure the list component.</param>
            <param name="dialogParameters">An optional action to configure additional dialog parameters.</param>
            <returns>
            A task that represents the asynchronous operation. The task result contains an array of the selected items.
            </returns>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.PickItemsAsync``1(MudBlazor.IDialogService,System.String,System.String,System.Func{System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}}},System.Boolean,System.Boolean,System.Func{``0,System.String},MudBlazor.Extensions.Options.DialogOptionsEx,System.Action{MudBlazor.Extensions.Components.MudExList{``0}},System.Action{MudBlazor.Extensions.Components.MudExMessageDialog})">
            <summary>
            Displays a dialog to let the user pick one or multiple items from a list.
            </summary>
            <typeparam name="T">The type of items to display in the list.</typeparam>
            <param name="dialogService">The dialog service instance used to show the dialog.</param>
            <param name="title">The title of the dialog.</param>
            <param name="headerText">The header text of the dialog.</param>
            <param name="itemsLoadFunc">A function that asynchronously loads the items to be displayed.</param>
            <param name="forceSelect">
            If set to <c>true</c>, the dialog cannot be closed without selecting an item.
            </param>
            <param name="allowEmpty">
            Indicates whether an empty selection is allowed.
            </param>
            <param name="itemToStringFunc">
            A function to convert an item to its string representation. If not provided, the item's <c>ToString</c> method is used.
            </param>
            <param name="options">Optional dialog options to customize the dialog behavior.</param>
            <param name="cmpConfigure">An optional action to further configure the list component.</param>
            <param name="dialogParameters">An optional action to configure additional dialog parameters.</param>
            <returns>
            A task that represents the asynchronous operation. The task result contains an array of the selected items.
            </returns>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.SelectItemsAsync``1(MudBlazor.IDialogService,System.String,System.String,System.Func{System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}}},System.Func{MudBlazor.Extensions.Components.MudExSelect{``0},System.Boolean},System.Boolean,System.Func{``0,System.String},MudBlazor.Extensions.Options.DialogOptionsEx,System.Action{MudBlazor.Extensions.Components.MudExSelect{``0}},System.Action{MudBlazor.Extensions.Components.MudExMessageDialog})">
            <summary>
            Displays a dialog to let the user select one or more items using a select component.
            </summary>
            <typeparam name="T">The type of items available for selection.</typeparam>
            <param name="dialogService">The dialog service instance used to show the dialog.</param>
            <param name="title">The title of the dialog.</param>
            <param name="headerText">The header text of the dialog.</param>
            <param name="itemsLoadFunc">A function that asynchronously loads the items for selection.</param>
            <param name="okCondition">Condition for ok, if this func returns true ok button is enabled</param>
            <param name="forceSelect">
            If set to <c>true</c>, the dialog requires an item to be selected before closing.
            </param>
            <param name="itemToStringFunc">
            A function to convert an item to its string representation. Defaults to <c>ToString</c> if not provided.
            </param>
            <param name="options">Optional dialog options to customize the appearance and behavior.</param>
            <param name="cmpConfigure">An optional action to further configure the select component.</param>
            <param name="dialogParameters">An optional action to set additional dialog parameters.</param>
            <returns>
            A task that represents the asynchronous operation. The task result contains an array of the selected items.
            </returns>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.SelectItemsAsync``1(MudBlazor.IDialogService,System.String,System.String,System.Func{System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}}},System.Boolean,System.Boolean,System.Func{``0,System.String},MudBlazor.Extensions.Options.DialogOptionsEx,System.Action{MudBlazor.Extensions.Components.MudExSelect{``0}},System.Action{MudBlazor.Extensions.Components.MudExMessageDialog})">
            <summary>
            Displays a dialog to let the user select one or more items using a select component.
            </summary>
            <typeparam name="T">The type of items available for selection.</typeparam>
            <param name="dialogService">The dialog service instance used to show the dialog.</param>
            <param name="title">The title of the dialog.</param>
            <param name="headerText">The header text of the dialog.</param>
            <param name="itemsLoadFunc">A function that asynchronously loads the items for selection.</param>
            <param name="forceSelect">
            If set to <c>true</c>, the dialog requires an item to be selected before closing.
            </param>
            <param name="allowEmpty">
            Indicates whether an empty selection is allowed.
            </param>
            <param name="itemToStringFunc">
            A function to convert an item to its string representation. Defaults to <c>ToString</c> if not provided.
            </param>
            <param name="options">Optional dialog options to customize the appearance and behavior.</param>
            <param name="cmpConfigure">An optional action to further configure the select component.</param>
            <param name="dialogParameters">An optional action to set additional dialog parameters.</param>
            <returns>
            A task that represents the asynchronous operation. The task result contains an array of the selected items.
            </returns>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.PickItemsAsync``1(MudBlazor.IDialogService,System.String,System.String,``0[])">
            <summary>
            Displays a dialog to pick one or more items from a predefined set of items passed as parameters.
            </summary>
            <typeparam name="T">The type of items available for selection.</typeparam>
            <param name="dialogService">The dialog service instance used to show the dialog.</param>
            <param name="title">The title of the dialog.</param>
            <param name="headerText">The header text of the dialog.</param>
            <param name="items">A parameter array of items from which the user can make a selection.</param>
            <returns>A task that represents the asynchronous operation. The task result contains an array of the selected items.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.PickItemsAsync``1(MudBlazor.IDialogService,System.String,System.String,System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Boolean,System.Func{``0,System.String},MudBlazor.Extensions.Options.DialogOptionsEx,System.Action{MudBlazor.Extensions.Components.MudExList{``0}},System.Action{MudBlazor.Extensions.Components.MudExMessageDialog})">
            <summary>
            Displays a dialog to pick one or more items from a predefined collection.
            </summary>
            <typeparam name="T">The type of items available for selection.</typeparam>
            <param name="dialogService">The dialog service instance used to display the dialog.</param>
            <param name="title">The dialog title.</param>
            <param name="headerText">The header text shown in the dialog.</param>
            <param name="items">A collection of items from which the user can choose.</param>
            <param name="forceSelect">If <c>true</c> the dialog cannot be closed without a selection.</param>
            <param name="allowEmpty">If <c>true</c>, an empty selection is allowed.</param>
            <param name="itemToStringFunc">A function to convert items to a string; if not provided, <c>ToString()</c> is used.</param>
            <param name="options">Optional dialog options for customization.</param>
            <param name="cmpConfigure">An optional action to further configure the list component.</param>
            <param name="dialogParameters">An optional action to set additional dialog parameters.</param>
            <returns>A task that represents the asynchronous operation. The task result contains an array of the selected items.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.PickItemAsync``1(MudBlazor.IDialogService,System.String,System.String,System.Func{System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}}},System.Boolean,System.Boolean,System.Func{``0,System.String},MudBlazor.Extensions.Options.DialogOptionsEx,System.Action{MudBlazor.Extensions.Components.MudExList{``0}},System.Action{MudBlazor.Extensions.Components.MudExMessageDialog})">
            <summary>
            Displays a dialog for picking a single item from a list.
            </summary>
            <typeparam name="T">The type of the item to select.</typeparam>
            <param name="dialogService">The dialog service instance used to show the dialog.</param>
            <param name="title">The dialog title.</param>
            <param name="headerText">The header text of the dialog.</param>
            <param name="itemsLoadFunc">A function that asynchronously loads the items to display.</param>
            <param name="forceSelect">
            If set to <c>true</c>, the dialog requires a selection and cannot be closed without choosing an item.
            </param>
            <param name="allowEmpty">Specifies whether a null or empty selection is permitted.</param>
            <param name="itemToStringFunc">
            A function to convert an item to its string representation. Uses <c>ToString()</c> if not provided.
            </param>
            <param name="options">Optional dialog options for further customization.</param>
            <param name="cmpConfigure">
            An optional action to configure the list component with the selection settings; multi-selection is disabled.
            </param>
            <param name="dialogParameters">An optional action to configure additional dialog parameters.</param>
            <returns>
            A task that represents the asynchronous operation. The task result contains the selected item, or the default value if none was selected.
            </returns>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.PickItemAsync``1(MudBlazor.IDialogService,System.String,System.String,``0[])">
            <summary>
            Displays a dialog for picking a single item from a predefined set of items.
            </summary>
            <typeparam name="T">The type of the item to select.</typeparam>
            <param name="dialogService">The dialog service instance used to display the dialog.</param>
            <param name="title">The title of the dialog.</param>
            <param name="headerText">The header text of the dialog.</param>
            <param name="items">A parameter array of items to choose from.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the selected item, or the default value if no selection was made.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.PickItemAsync``1(MudBlazor.IDialogService,System.String,System.String,System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Boolean,System.Func{``0,System.String},MudBlazor.Extensions.Options.DialogOptionsEx,System.Action{MudBlazor.Extensions.Components.MudExList{``0}},System.Action{MudBlazor.Extensions.Components.MudExMessageDialog})">
            <summary>
            Displays a dialog for picking a single item from a predefined collection.
            </summary>
            <typeparam name="T">The type of the item to select.</typeparam>
            <param name="dialogService">The dialog service instance used to display the dialog.</param>
            <param name="title">The dialog title.</param>
            <param name="headerText">The header text displayed in the dialog.</param>
            <param name="items">A collection of items available for selection.</param>
            <param name="forceSelect">
            If set to <c>true</c>, forces the user to make a selection before the dialog can be closed.
            </param>
            <param name="allowEmpty">Indicates whether an empty selection is allowed.</param>
            <param name="itemToStringFunc">
            A function to determine the string representation of an item. Defaults to <c>ToString()</c> if not specified.
            </param>
            <param name="options">Optional dialog options to adjust the behavior and appearance.</param>
            <param name="cmpConfigure">An optional action to further configure the list component.</param>
            <param name="dialogParameters">An optional action to specify additional dialog parameters.</param>
            <returns>
            A task that represents the asynchronous operation. The task result contains the selected item, or the default value if none was selected.
            </returns>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.SelectItemsAsync``1(MudBlazor.IDialogService,System.String,System.String,``0[])">
            <summary>
            Displays a dialog to select one or multiple items using a select component from a predefined set of items.
            </summary>
            <typeparam name="T">The type of items available for selection.</typeparam>
            <param name="dialogService">The dialog service instance used to display the dialog.</param>
            <param name="title">The title of the dialog.</param>
            <param name="headerText">The header text displayed in the dialog.</param>
            <param name="items">A parameter array of items available for selection.</param>
            <returns>A task that represents the asynchronous operation. The task result contains an array of selected items.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.SelectItemsAsync``1(MudBlazor.IDialogService,System.String,System.String,System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Boolean,System.Func{``0,System.String},MudBlazor.Extensions.Options.DialogOptionsEx,System.Action{MudBlazor.Extensions.Components.MudExSelect{``0}},System.Action{MudBlazor.Extensions.Components.MudExMessageDialog})">
            <summary>
            Displays a dialog to select one or multiple items from a predefined collection using a select component.
            </summary>
            <typeparam name="T">The type of items available for selection.</typeparam>
            <param name="dialogService">The dialog service instance used to display the dialog.</param>
            <param name="title">The dialog title.</param>
            <param name="headerText">The header text for the dialog.</param>
            <param name="items">A collection of items available for selection.</param>
            <param name="forceSelect">
            If set to <c>true</c>, the dialog requires a selection before closing.
            </param>
            <param name="allowEmpty">Specifies whether an empty selection is allowed.</param>
            <param name="itemToStringFunc">
            A function used to convert each item to a string. Defaults to using <c>ToString()</c> if not provided.
            </param>
            <param name="options">Optional dialog options to further customize the dialog.</param>
            <param name="cmpConfigure">An optional action to configure the select component.</param>
            <param name="dialogParameters">An optional action to set additional dialog parameters.</param>
            <returns>
            A task that represents the asynchronous operation. The task result contains an array of the selected items.
            </returns>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.SelectItemAsync``1(MudBlazor.IDialogService,System.String,System.String,System.Func{System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}}},System.Boolean,System.Boolean,System.Func{``0,System.String},MudBlazor.Extensions.Options.DialogOptionsEx,System.Action{MudBlazor.Extensions.Components.MudExSelect{``0}},System.Action{MudBlazor.Extensions.Components.MudExMessageDialog})">
            <summary>
            Displays a dialog for selecting a single item using a select component.
            </summary>
            <typeparam name="T">The type of item to select.</typeparam>
            <param name="dialogService">The dialog service instance used to display the dialog.</param>
            <param name="title">The title of the dialog.</param>
            <param name="headerText">The header text of the dialog.</param>
            <param name="itemsLoadFunc">A function that asynchronously loads the items to choose from.</param>
            <param name="forceSelect">
            If set to <c>true</c>, the dialog requires a selection before closing.
            </param>
            <param name="allowEmpty">Specifies whether an empty selection is allowed.</param>
            <param name="itemToStringFunc">
            A function used to convert an item to its string representation. Defaults to using <c>ToString()</c> if not provided.
            </param>
            <param name="options">Optional dialog options to configure the dialog.</param>
            <param name="cmpConfigure">
            An optional action to further configure the select component; multi-selection is disabled in this case.
            </param>
            <param name="dialogParameters">An optional action to configure additional dialog parameters.</param>
            <returns>
            A task that represents the asynchronous operation. The task result contains the selected item, or the default value if none was selected.
            </returns>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.SelectItemAsync``1(MudBlazor.IDialogService,System.String,System.String,``0[])">
            <summary>
            Displays a dialog for selecting a single item from a predefined list using a select component.
            </summary>
            <typeparam name="T">The type of the item to select.</typeparam>
            <param name="dialogService">The dialog service instance used to display the dialog.</param>
            <param name="title">The title of the dialog.</param>
            <param name="headerText">The header text of the dialog.</param>
            <param name="items">A parameter array of items available for selection.</param>
            <returns>
            A task that represents the asynchronous operation. The task result contains the selected item, or the default value if none was selected.
            </returns>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.SelectItemAsync``1(MudBlazor.IDialogService,System.String,System.String,System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Boolean,System.Func{``0,System.String},MudBlazor.Extensions.Options.DialogOptionsEx,System.Action{MudBlazor.Extensions.Components.MudExSelect{``0}},System.Action{MudBlazor.Extensions.Components.MudExMessageDialog})">
            <summary>
            Displays a dialog for selecting a single item from a predefined collection using a select component.
            </summary>
            <typeparam name="T">The type of the item to select.</typeparam>
            <param name="dialogService">The dialog service instance used to display the dialog.</param>
            <param name="title">The dialog title.</param>
            <param name="headerText">The header text displayed in the dialog.</param>
            <param name="items">A collection of items available for selection.</param>
            <param name="forceSelect">
            If set to <c>true</c>, forces the user to select an item before closing the dialog.
            </param>
            <param name="allowEmpty">Specifies whether an empty selection is permitted.</param>
            <param name="itemToStringFunc">
            A function to convert an item to its string representation. Defaults to using <c>ToString()</c> if not provided.
            </param>
            <param name="options">Optional dialog options for further customization.</param>
            <param name="cmpConfigure">An optional action to configure the select component.</param>
            <param name="dialogParameters">An optional action to set additional dialog parameters.</param>
            <returns>
            A task that represents the asynchronous operation. The task result contains the selected item, or the default value if no selection was made.
            </returns>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.DefaultOptions">
            <summary>
            The default dialog options.
            </summary>
            <returns>The default dialog options.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.ShowExAsync``1(MudBlazor.IDialogService,System.String,System.Action{``0},System.Action{MudBlazor.Extensions.Options.DialogOptionsEx})">
            <summary>
            Shows the dialog and injects dependencies asynchronously.
            </summary>
            <typeparam name="TDialog">The dialog type.</typeparam>
            <param name="dialogService">The dialog service.</param>
            <param name="title">The title.</param>
            <param name="dialogParameters">The dialog parameters.</param>
            <param name="optionsEx">The options.</param>
            <returns>A <see cref="T:MudBlazor.Extensions.Core.IMudExDialogReference`1"/>.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.ShowExAsync``1(MudBlazor.IDialogService,System.String,``0,System.Action{MudBlazor.Extensions.Options.DialogOptionsEx})">
            <summary>
            Shows the dialog and injects dependencies asynchronously.
            </summary>
            <typeparam name="TDialog">The dialog type.</typeparam>
            <param name="dialogService">The dialog service.</param>
            <param name="title">The title.</param>
            <param name="dialogParameters">The dialog parameters.</param>
            <param name="optionsEx">The options.</param>
            <returns>A <see cref="T:MudBlazor.Extensions.Core.IMudExDialogReference`1"/>.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.ShowExAsync``1(MudBlazor.IDialogService,System.String,``0,MudBlazor.Extensions.Options.DialogOptionsEx)">
            <summary>
            Shows the dialog and injects dependencies asynchronously.
            </summary>
            <typeparam name="TDialog">The dialog type.</typeparam>
            <param name="dialogService">The dialog service.</param>
            <param name="title">The title.</param>
            <param name="dialogParameters">The dialog parameters.</param>
            <param name="optionsEx">The options.</param>
            <returns>A <see cref="T:MudBlazor.Extensions.Core.IMudExDialogReference`1"/>.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.ShowExAsync``1(MudBlazor.IDialogService,System.String,System.Action{``0},MudBlazor.Extensions.Options.DialogOptionsEx)">
            <summary>
            Shows the dialog and injects dependencies asynchronously.
            </summary>
            <typeparam name="TDialog">The dialog type.</typeparam>
            <param name="dialogService">The dialog service.</param>
            <param name="title">The title.</param>
            <param name="dialogParameters">The dialog parameters.</param>
            <param name="optionsEx">The options.</param>
            <returns>The interface <see cref="T:MudBlazor.Extensions.Core.IMudExDialogReference`1"/>.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.Show``1(MudBlazor.IDialogService,System.String,System.Action{``0},System.Action{MudBlazor.DialogOptions})">
            <summary>
            Shows the dialog and injects dependencies immediately.
            </summary>
            <typeparam name="TDialog">The dialog type.</typeparam>
            <param name="dialogService">The dialog service.</param>
            <param name="title">The title.</param>
            <param name="dialogParameters">The dialog parameters.</param>
            <param name="options">The options.</param>
            <returns>The interface <see cref="T:MudBlazor.Extensions.Core.IMudExDialogReference`1"/>.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.Show``1(MudBlazor.IDialogService,System.String,``0,System.Action{MudBlazor.DialogOptions})">
            <summary>
            Shows the dialog and injects dependencies immediately.
            </summary>
            <typeparam name="TDialog">The dialog type.</typeparam>
            <param name="dialogService">The dialog service.</param>
            <param name="title">The title.</param>
            <param name="dialogParameters">The dialog parameters.</param>
            <param name="options">The options.</param>
            <returns>The interface <see cref="T:MudBlazor.Extensions.Core.IMudExDialogReference`1"/>.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.Show``1(MudBlazor.IDialogService,System.String,``0,MudBlazor.DialogOptions)">
            <summary>
            Shows the dialog and injects dependencies immediately.
            </summary>
            <typeparam name="TDialog">The dialog type.</typeparam>
            <param name="dialogService">The dialog service.</param>
            <param name="title">The title.</param>
            <param name="dialogParameters">The dialog parameters.</param>
            <param name="options">The options.</param>
            <returns>The interface <see cref="T:MudBlazor.Extensions.Core.IMudExDialogReference`1"/>.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.Show``1(MudBlazor.IDialogService,System.String,System.Action{``0},MudBlazor.DialogOptions)">
            <summary>
            Shows the dialog and injects dependencies immediately.
            </summary>
            <typeparam name="TDialog">The dialog type.</typeparam>
            <param name="dialogService">The dialog service.</param>
            <param name="title">The title.</param>
            <param name="dialogParameters">The dialog parameters.</param>
            <param name="options">The options.</param>
            <returns>The interface <see cref="T:MudBlazor.Extensions.Core.IMudExDialogReference`1"/>.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.ShowExAsync``1(MudBlazor.IDialogService,System.String,MudBlazor.DialogParameters,MudBlazor.Extensions.Options.DialogOptionsEx)">
            <summary>
            Shows the dialog and injects dependencies asynchronously.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="dialogService">The dialog service.</param>
            <param name="title">The title.</param>
            <param name="parameters">The dialog parameters.</param>
            <param name="options">The options.</param>
            <returns>The interface <see cref="T:MudBlazor.Extensions.Core.IMudExDialogReference`1"/>.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.ShowExAsync``1(MudBlazor.IDialogService,System.String,MudBlazor.Extensions.Options.DialogOptionsEx)">
            <summary>
            Shows the dialog and injects dependencies asynchronously.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="dialogService">The dialog service.</param>
            <param name="title">The title.</param>
            <param name="options">The options.</param>
            <returns>The interface <see cref="T:MudBlazor.Extensions.Core.IMudExDialogReference`1"/>.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.ShowExAsync(MudBlazor.IDialogService,System.Type,System.String,MudBlazor.DialogParameters,MudBlazor.Extensions.Options.DialogOptionsEx)">
            <summary>
            Shows the dialog and injects dependencies immediately.
            </summary>
            <param name="dialogService">The dialog service.</param>
            <param name="type">The type.</param>
            <param name="title">The title.</param>
            <param name="parameters">The dialog parameters.</param>
            <param name="options">The options.</param>
            <returns>The interface <see cref="T:MudBlazor.IDialogReference"/>reference.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.ShowMessageBoxExAsync(MudBlazor.IDialogService,MudBlazor.MessageBoxOptions,MudBlazor.Extensions.Options.DialogOptionsEx)">
            <summary>
            Shows the message box asynchronously.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.GetDialogAsync``1(MudBlazor.IDialogReference)">
            <summary>
            Gets the dialog component asynchronously.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="dialogReference">The dialog reference.</param>
            <returns>The dialog component.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.ShowExAsync(MudBlazor.IDialogService,System.Type,System.String,MudBlazor.Extensions.Options.DialogOptionsEx)">
            <summary>
            Shows the dialog and injects dependencies immediately.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.ShowFileDisplayDialogAsync(MudBlazor.IDialogService,System.String,MudBlazor.Extensions.Options.DialogOptionsEx,MudBlazor.DialogParameters)">
            <summary>
            Shows a dialog which displays a file at the specified url.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.ShowFileDisplayDialogAsync(MudBlazor.IDialogService,System.String,System.String,MudBlazor.Extensions.Options.DialogOptionsEx,MudBlazor.DialogParameters)">
            <summary>
            Shows a dialog which displays a file at the specified url.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.ShowFileDisplayDialogAsync(MudBlazor.IDialogService,System.String,System.String,System.Net.Mime.ContentType,MudBlazor.Extensions.Options.DialogOptionsEx,MudBlazor.DialogParameters)">
            <summary>
            Shows a dialog which displays a file at the specified url.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.ShowFileDisplayDialogAsync(MudBlazor.IDialogService,System.String,System.String,System.String,System.Func{MudBlazor.Extensions.Components.IMudExFileDisplayInfos,System.Threading.Tasks.Task{MudBlazor.Extensions.Components.MudExFileDisplayContentErrorResult}},System.Action{MudBlazor.Extensions.Options.DialogOptionsEx})">
            <summary>
            Shows a dialog which displays a file at the specified url.
            </summary>
            <param name="dialogService">The dialog service instance.</param>
            <param name="url">The url of the file.</param>
            <param name="fileName">The name of the file.</param>
            <param name="contentType">The content type of the file.</param>
            <param name="handleContentErrorFunc">A function that is called if an error occurs while handling the file's content.</param>
            <param name="options">Dialog options for the displayed file.</param>
            <returns>An awaitable task with the dialog reference.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.ShowFileDisplayDialogAsync(MudBlazor.IDialogService,Microsoft.AspNetCore.Components.Forms.IBrowserFile,System.Func{MudBlazor.Extensions.Components.IMudExFileDisplayInfos,System.Threading.Tasks.Task{MudBlazor.Extensions.Components.MudExFileDisplayContentErrorResult}},System.Action{MudBlazor.Extensions.Options.DialogOptionsEx})">
            <summary>
            Shows a dialog which displays a browser file.
            </summary>
            <param name="dialogService">The dialog service instance.</param>
            <param name="browserFile">The browser file to display.</param>
            <param name="handleContentErrorFunc">A function that is called if an error occurs while handling the file's content.</param>
            <param name="options">Dialog options for the displayed file.</param>
            <returns>An awaitable task with the dialog reference.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.ShowFileDisplayDialogAsync(MudBlazor.IDialogService,System.IO.Stream,System.String,System.String,System.Func{MudBlazor.Extensions.Components.IMudExFileDisplayInfos,System.Threading.Tasks.Task{MudBlazor.Extensions.Components.MudExFileDisplayContentErrorResult}},System.Action{MudBlazor.Extensions.Options.DialogOptionsEx},MudBlazor.DialogParameters)">
            <summary>
            Shows a dialog which displays a file from a given stream.
            </summary>
            <param name="dialogService">The dialog service instance.</param>
            <param name="stream">The stream containing the file.</param>
            <param name="fileName">The name of the file.</param>
            <param name="contentType">The content type of the file.</param>
            <param name="handleContentErrorFunc">A function that is called if an error occurs while handling the file's content.</param>
            <param name="options">Dialog options for the displayed file.</param>
            <returns>An awaitable task with the dialog reference.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.ShowFileDisplayDialogAsync(MudBlazor.IDialogService,System.String,System.String,System.String,System.Action{MudBlazor.Extensions.Options.DialogOptionsEx},MudBlazor.DialogParameters)">
            <summary>
            Shows a dialog which displays a file at the specified url.
            </summary>
            <param name="dialogService">The dialog service instance.</param>
            <param name="url">The url of the file.</param>
            <param name="fileName">The name of the file.</param>
            <param name="contentType">The content type of the file.</param>
            <param name="options">Dialog options for the displayed file.</param>
            <param name="dialogParameters">Parameters to pass to the dialog.</param>
            <returns>An awaitable task with the dialog reference.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.ShowFileDisplayDialogAsync(MudBlazor.IDialogService,Microsoft.AspNetCore.Components.Forms.IBrowserFile,System.Action{MudBlazor.Extensions.Options.DialogOptionsEx},MudBlazor.DialogParameters)">
            <summary>
            Shows a dialog which displays a browser file.
            </summary>
            <param name="dialogService">The dialog service instance.</param>
            <param name="browserFile">The browser file to display.</param>
            <param name="options">Dialog options for the displayed file.</param>
            <param name="dialogParameters">Parameters to pass to the dialog.</param>
            <returns>An awaitable task with the dialog reference.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.ShowFileDisplayDialogAsync(MudBlazor.IDialogService,System.IO.Stream,System.String,System.String,System.Action{MudBlazor.Extensions.Options.DialogOptionsEx},MudBlazor.DialogParameters)">
            <summary>
            Shows a dialog which displays a file from a given stream.
            </summary>
            <param name="dialogService">The dialog service instance.</param>
            <param name="stream">The stream containing the file.</param>
            <param name="fileName">The name of the file.</param>
            <param name="contentType">The content type of the file.</param>
            <param name="options">Dialog options for the displayed file.</param>
            <param name="dialogParameters">Parameters to pass to the dialog.</param>
            <returns>An awaitable task with the dialog reference.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.ShowComponentInDialogAsync``1(MudBlazor.IDialogService,System.String,System.String,System.Action{``0})">
            <summary>
            Shows a component in a dialog with a title and message. Dialog parameters are passed as a new DialogParameters object instance.
            </summary>
            <typeparam name="TComponent">The type of the component to be shown.</typeparam>
            <param name="dialogService">The IDialogService instance.</param>
            <param name="title">The title of the dialog.</param>
            <param name="message">The message to be shown in the dialog.</param>
            <param name="componentOptions">The action that configures the component.</param>
            <returns>A Task whose result is a value tuple of DialogResult and TComponent representing the result of the operation.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.ShowComponentInDialogAsync``1(MudBlazor.IDialogService,System.String,System.String,System.String,System.Action{``0})">
            <summary>
            Shows a component in a dialog with a title, message, and icon. Dialog parameters are passed as a new DialogParameters object instance.
            </summary>
            <typeparam name="TComponent">The type of the component to be shown.</typeparam>
            <param name="dialogService">The IDialogService instance.</param>
            <param name="title">The title of the dialog.</param>
            <param name="message">The message to be shown in the dialog.</param>
            <param name="icon">The icon to be shown in the dialog.</param>
            <param name="componentOptions">The action that configures the component.</param>
            <returns>A Task whose result is a value tuple of DialogResult and TComponent representing the result of the operation.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.ShowComponentInDialogAsync``1(MudBlazor.IDialogService,System.String,System.Action{``0})">
            <summary>
            Shows a component in a dialog with a title. Dialog parameters are passed as a new DialogParameters object instance.
            </summary>
            <typeparam name="TComponent">The type of the component to be shown.</typeparam>
            <param name="dialogService">The IDialogService instance.</param>
            <param name="title">The title of the dialog.</param>
            <param name="componentOptions">The action that configures the component.</param>
            <returns>A Task whose result is a value tuple of DialogResult and TComponent representing the result of the operation.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.ShowComponentInDialogAsync``1(MudBlazor.IDialogService,System.String,System.String,System.String)">
            <summary>
            Shows a component in a dialog with a title. Dialog parameters are passed as a new DialogParameters object instance.
            </summary>
            <typeparam name="TComponent">The type of the component to be shown.</typeparam>
            <returns>A Task whose result is a value tuple of DialogResult and TComponent representing the result of the operation.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.ShowComponentInDialogAsync``1(MudBlazor.IDialogService,System.String,System.String,System.String,MudBlazor.Extensions.Options.DialogOptionsEx)">
            <summary>
            Shows a component in a dialog with a title. Dialog parameters are passed as a new DialogParameters object instance.
            </summary>
            <typeparam name="TComponent">The type of the component to be shown.</typeparam>
            <returns>A Task whose result is a value tuple of DialogResult and TComponent representing the result of the operation.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.ShowComponentInDialogAsync``1(MudBlazor.IDialogService,System.String,System.String)">
            <summary>
            Shows a component in a dialog with a title. Dialog parameters are passed as a new DialogParameters object instance.
            </summary>
            <typeparam name="TComponent">The type of the component to be shown.</typeparam>
            <returns>A Task whose result is a value tuple of DialogResult and TComponent representing the result of the operation.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.ShowComponentInDialogAsync``1(MudBlazor.IDialogService,System.String,System.String,MudBlazor.Extensions.Options.DialogOptionsEx)">
            <summary>
            Shows a component in a dialog with a title. Dialog parameters are passed as a new DialogParameters object instance.
            </summary>
            <typeparam name="TComponent">The type of the component to be shown.</typeparam>
            <returns>A Task whose result is a value tuple of DialogResult and TComponent representing the result of the operation.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.ShowComponentInDialogAsync``1(MudBlazor.IDialogService,System.String)">
            <summary>
            Shows a component in a dialog with a title. Dialog parameters are passed as a new DialogParameters object instance.
            </summary>
            <typeparam name="TComponent">The type of the component to be shown.</typeparam>
            <returns>A Task whose result is a value tuple of DialogResult and TComponent representing the result of the operation.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.ShowComponentInDialogAsync``1(MudBlazor.IDialogService,System.String,MudBlazor.Extensions.Options.DialogOptionsEx)">
            <summary>
            Shows a component in a dialog with a title. Dialog parameters are passed as a new DialogParameters object instance.
            </summary>
            <typeparam name="TComponent">The type of the component to be shown.</typeparam>
            <returns>A Task whose result is a value tuple of DialogResult and TComponent representing the result of the operation.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.ShowComponentInDialogAsync``1(MudBlazor.IDialogService)">
            <summary>
            Shows a component in a dialog with a title. Dialog parameters are passed as a new DialogParameters object instance.
            </summary>
            <typeparam name="TComponent">The type of the component to be shown.</typeparam>
            <returns>A Task whose result is a value tuple of DialogResult and TComponent representing the result of the operation.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.ShowComponentInDialogAsync``1(MudBlazor.IDialogService,System.String,System.Action{``0},MudBlazor.DialogParameters,MudBlazor.Extensions.Options.DialogOptionsEx)">
            <summary>
            Shows a component in a dialog with a title, message, component configuration action, dialog parameters object, and dialog options object.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.ShowComponentInDialogAsync``1(MudBlazor.IDialogService,System.String,System.Action{``0},MudBlazor.Extensions.Options.DialogOptionsEx)">
            <summary>
            Shows a component in a dialog with a title, message, component configuration action, dialog parameters object, and dialog options object.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.ShowComponentInDialogAsync``1(MudBlazor.IDialogService,System.String,System.String,System.Action{``0},System.Action{MudBlazor.Extensions.Components.MudExMessageDialog},System.Action{MudBlazor.Extensions.Options.DialogOptionsEx})">
            <summary>
            Shows a component in a dialog with a title, message, component configuration action, dialog parameters action and dialog options.
            </summary>
            <typeparam name="TComponent">The type of the component to be shown.</typeparam>
            <param name="dialogService">The IDialogService instance.</param>
            <param name="title">The title of the dialog.</param>
            <param name="message">The message to be shown in the dialog.</param>
            <param name="componentOptions">The action that configures the component.</param>
            <param name="dialogParameters">The action that configures the dialog parameters.</param>
            <param name="options">The action that configures the dialog options.</param>
            <returns>A Task whose result is a value tuple of DialogResult and TComponent representing the result of the operation.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.ShowComponentInDialogAsync``1(MudBlazor.IDialogService,System.String,System.String,System.Action{``0},MudBlazor.Extensions.Options.DialogOptionsEx)">
            <summary>
            Shows a component in a dialog with a title, message, component configuration action and dialog options action.
            </summary>
            <typeparam name="TComponent">The type of the component to be shown.</typeparam>
            <param name="dialogService">The IDialogService instance.</param>
            <param name="title">The title of the dialog.</param>
            <param name="message">The message to be shown in the dialog.</param>
            <param name="componentOptions">The action that configures the component.</param>
            <param name="options">The action that configures the dialog options.</param>
            <returns>A Task whose result is a value tuple of DialogResult and TComponent representing the result of the operation.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.ShowComponentInDialogAsync``1(MudBlazor.IDialogService,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Action{MudBlazor.Extensions.Components.MudExMessageDialog},MudBlazor.Extensions.Options.DialogOptionsEx)">
            <summary>
            Shows a component in a dialog with a title, message, component configuration dictionary, dialog parameters action and dialog options action.
            </summary>
            <typeparam name="TComponent">The type of the component to be shown.</typeparam>
            <param name="dialogService">The IDialogService instance.</param>
            <param name="title">The title of the dialog.</param>
            <param name="message">The message to be shown in the dialog.</param>
            <param name="componentOptions">The dictionary that configures the component.</param>
            <param name="dialogParameters">The action that configures the dialog parameters.</param>
            <param name="options">The action that configures the dialog options.</param>
            <returns>A Task whose result is a value tuple of DialogResult and TComponent representing the result of the operation.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.ShowComponentInDialogAsync``1(MudBlazor.IDialogService,System.String,System.String,System.Action{``0},System.Action{MudBlazor.Extensions.Components.MudExMessageDialog},MudBlazor.Extensions.Options.DialogOptionsEx)">
            <summary>
            Shows a component in a dialog with a title, message, component configuration action, dialog parameters object and dialog options action.
            </summary>
            <typeparam name="TComponent">The type of the component to be shown.</typeparam>
            <param name="dialogService">The IDialogService instance.</param>
            <param name="title">The title of the dialog.</param>
            <param name="message">The message to be shown in the dialog.</param>
            <param name="componentOptions">The action that configures the component.</param>
            <param name="dialogParameters">The dialog parameters to be passed.</param>
            <param name="options">The action that configures the dialog options.</param>
            <returns>A Task whose result is a value tuple of DialogResult and TComponent representing the result of the operation.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.ShowComponentInDialogAsync``1(MudBlazor.IDialogService,System.String,System.String,System.Action{``0},MudBlazor.DialogParameters,System.Action{MudBlazor.Extensions.Options.DialogOptionsEx})">
            <summary>
            Shows a component in a dialog with a title, message, component configuration action, dialog parameters object, and dialog options object.
            </summary>
            <typeparam name="TComponent">The type of the component to be shown.</typeparam>
            <param name="dialogService">The IDialogService instance.</param>
            <param name="title">The title of the dialog.</param>
            <param name="message">The message to be shown in the dialog.</param>
            <param name="componentOptions">The action that configures the component.</param>
            <param name="dialogParameters">The dialog parameters to be passed.</param>
            <param name="options">The dialog options to be passed.</param>
            <returns>A Task whose result is a value tuple of DialogResult and TComponent representing the result of the operation.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.ShowComponentInDialogAsync``1(MudBlazor.IDialogService,System.String,System.String,System.Action{``0},MudBlazor.DialogParameters,MudBlazor.Extensions.Options.DialogOptionsEx)">
            <summary>
            Shows a dialog with a custom component asynchronously.
            </summary>
            <param name="dialogService">Instance of IDialogService</param>
            <param name="title">Title of the dialog</param>
            <param name="message">Message of the dialog</param>
            <param name="componentOptions">Component-specific configuration parameters</param>
            <param name="dialogParameters">Parameters for the dialog</param>
            <param name="options">Options for the dialog</param>
            <returns>A Task that returns a tuple consisting of a DialogResult and the component displayed in the dialog</returns>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.ShowComponentInDialogAsync``1(MudBlazor.IDialogService,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Action{MudBlazor.Extensions.Components.MudExMessageDialog},System.Action{MudBlazor.Extensions.Options.DialogOptionsEx})">
            <summary>
            Shows a dialog with a custom component asynchronously.
            </summary>
            <param name="dialogService">Instance of IDialogService</param>
            <param name="title">Title of the dialog</param>
            <param name="message">Message of the dialog</param>
            <param name="componentOptions">Component-specific configuration parameters</param>
            <param name="dialogParameters">Parameters for the dialog</param>
            <param name="options">Options for the dialog</param>
            <returns>A Task that returns a tuple consisting of a DialogResult and the component displayed in the dialog</returns>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.ShowComponentInDialogAsync``1(MudBlazor.IDialogService,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},MudBlazor.DialogParameters,System.Action{MudBlazor.Extensions.Options.DialogOptionsEx})">
            <summary>
            Shows a dialog with a custom component asynchronously.
            </summary>
            <param name="dialogService">Instance of IDialogService</param>
            <param name="title">Title of the dialog</param>
            <param name="message">Message of the dialog</param>
            <param name="componentOptions">Component-specific configuration parameters</param>
            <param name="dialogParameters">Parameters for the dialog</param>
            <param name="options">Options for the dialog</param>
            <returns>A Task that returns a tuple consisting of a DialogResult and the component displayed in the dialog</returns>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.ShowComponentInDialogOkCancelAsync``1(MudBlazor.IDialogService,System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},MudBlazor.DialogParameters,MudBlazor.Extensions.Options.DialogOptionsEx)">
            <summary>
            Shows a dialog with a custom component asynchronously.
            </summary>
            <param name="dialogService">Instance of IDialogService</param>
            <param name="title">Title of the dialog</param>
            <param name="message">Message of the dialog</param>
            <param name="cancelText">Text for cancel button</param>
            <param name="componentOptions">Component-specific configuration parameters</param>
            <param name="dialogParameters">Parameters for the dialog</param>
            <param name="options">Options for the dialog</param>
            <param name="confirmText">Text for confirm button</param>
            <returns>A Task that returns a tuple consisting of a DialogResult and the component displayed in the dialog</returns>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.ShowComponentInDialogAsync``1(MudBlazor.IDialogService,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},MudBlazor.DialogParameters,MudBlazor.Extensions.Options.DialogOptionsEx)">
            <summary>
            Shows a dialog with a custom component asynchronously.
            </summary>
            <param name="dialogService">Instance of IDialogService</param>
            <param name="title">Title of the dialog</param>
            <param name="message">Message of the dialog</param>
            <param name="componentOptions">Component-specific configuration parameters</param>
            <param name="dialogParameters">Parameters for the dialog</param>
            <param name="options">Options for the dialog</param>
            <returns>A Task that returns a tuple consisting of a DialogResult and the component displayed in the dialog</returns>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.ShowConfirmationDialogAsync(MudBlazor.IDialogService,System.String,MudBlazor.DialogParameters,MudBlazor.Extensions.Options.DialogOptionsEx)">
            <summary>
            Shows a confirmation dialog asynchronously.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.ShowConfirmationDialogAsync(MudBlazor.IDialogService,MudBlazor.MessageBoxOptions,MudBlazor.Extensions.Options.DialogOptionsEx)">
            <summary>
            Shows a confirmation dialog with custom MessageBoxOptions asynchronously.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.ShowConfirmationDialogAsync(MudBlazor.IDialogService,MudBlazor.MessageBoxOptions,System.String,MudBlazor.Extensions.Options.DialogOptionsEx)">
            <summary>
            Shows a confirmation dialog with custom MessageBoxOptions and an icon asynchronously.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.ShowConfirmationDialogAsync(MudBlazor.IDialogService,System.String,System.String,System.String,System.String,System.String,MudBlazor.Extensions.Options.DialogOptionsEx)">
            <summary>
            Shows a confirmation dialog with customizable title, message, confirm text, cancel text, and icon asynchronously.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.ShowInformationAsync(MudBlazor.IDialogService,System.String,System.Action{MudBlazor.Extensions.Components.MudExMessageDialog},MudBlazor.Extensions.Options.DialogOptionsEx)">
            <summary>
            Shows an information dialog with customizable parameters asynchronously.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.ShowInformationAsync(MudBlazor.IDialogService,System.String,MudBlazor.DialogParameters,MudBlazor.Extensions.Options.DialogOptionsEx)">
            <summary>
            Shows an information dialog with custom DialogParameters asynchronously.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.ShowInformationAsync(MudBlazor.IDialogService,System.String,System.String)">
            <summary>
            Shows an information dialog with a custom message asynchronously.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.ShowInformationAsync(MudBlazor.IDialogService,System.String,System.String,System.String,MudBlazor.Extensions.Options.DialogOptionsEx)">
            <summary>
            Shows an information dialog with a custom message and icon asynchronously.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.ShowInformationAsync(MudBlazor.IDialogService,System.String,System.String,System.String,System.Boolean,System.Boolean,MudBlazor.Extensions.Options.DialogOptionsEx)">
            <summary>
            Shows an information dialog with a custom message, icon, ability to close, and show progress asynchronously.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.PromptAsync(MudBlazor.IDialogService,System.String,System.String,MudBlazor.Extensions.Options.DialogOptionsEx)">
            <summary>
            Prompts the user for input with a default empty string asynchronously.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.PromptAsync(MudBlazor.IDialogService,System.String,System.String,System.Func{System.String,System.Boolean},MudBlazor.Extensions.Options.DialogOptionsEx)">
            <summary>
            Prompts the user for input with a validation function asynchronously.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.PromptAsync(MudBlazor.IDialogService,System.String,System.String,System.String,System.Func{System.String,System.Boolean},MudBlazor.DialogParameters,MudBlazor.Extensions.Options.DialogOptionsEx)">
            <summary>
            Prompts the user for input with a validation function and custom icon asynchronously.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.PromptAsync(MudBlazor.IDialogService,System.String,System.String,System.String,System.Func{System.String,System.Boolean},MudBlazor.Extensions.Options.DialogOptionsEx)">
            <summary>
            Prompts the user for input with a validation function and custom icon asynchronously.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.PromptAsync(MudBlazor.IDialogService,System.String,System.String,System.String,System.String,System.String,System.String,System.Func{System.String,System.Boolean},MudBlazor.Extensions.Options.DialogOptionsEx,MudBlazor.DialogParameters)">
            <summary>
            Prompts the user for input with customizable title, message, initialValue, buttonOkText, buttonCancelText, icon, validation function, and dialog options asynchronously.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.ShowObjectAsync``1(MudBlazor.IDialogService,``0,System.String,System.String,MudBlazor.Extensions.Options.DialogOptionsEx,System.Action{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta{``0}},MudBlazor.DialogParameters)">
            <summary>
            Shows an object edit dialog as readonly for given object.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.ShowObjectAsync``1(MudBlazor.IDialogService,``0,System.String,MudBlazor.Extensions.Options.DialogOptionsEx,System.Action{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta{``0}},MudBlazor.DialogParameters)">
            <summary>
            Shows an object edit dialog as readonly for given object.
            </summary>
            <typeparam name="TModel">The type of the object to edit.</typeparam>
            <param name="dialogService">The dialog service to use.</param>
            <param name="value">The object to edit.</param>
            <param name="title">The dialog title.</param>
            <param name="options">The dialog options.</param>
            <param name="metaConfig">The configuration of meta information.</param>
            <param name="dialogParameters">The dialog parameters.</param>
            <returns>A tuple indicating if edit was cancelled and the result. </returns>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.ShowStructuredDataStringAsync(MudBlazor.IDialogService,System.String,System.String,MudBlazor.Extensions.Options.DialogOptionsEx,System.Action{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta{Nextended.Core.Helper.IStructuredDataObject}},MudBlazor.DialogParameters)">
            <summary>
            Shows an object edit dialog as readonly for given data string as object edit.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.ShowStructuredDataStringAsync(MudBlazor.IDialogService,Nextended.Core.Helper.StructuredDataType,System.String,System.String,MudBlazor.Extensions.Options.DialogOptionsEx,System.Action{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta{Nextended.Core.Helper.IStructuredDataObject}},MudBlazor.DialogParameters)">
            <summary>
            Shows an object edit dialog as readonly for given data string as object edit.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.EditStructuredDataStringAsync(MudBlazor.IDialogService,System.String,System.String,System.Func{Nextended.Core.Helper.IStructuredDataObject,MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditDialog{Nextended.Core.Helper.IStructuredDataObject},System.Threading.Tasks.Task{System.String}},MudBlazor.Extensions.Options.DialogOptionsEx,System.Action{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta{Nextended.Core.Helper.IStructuredDataObject}},MudBlazor.DialogParameters)">
            <summary>
            Shows an object edit dialog for given data string as object edit.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.EditStructuredDataStringAsync(MudBlazor.IDialogService,System.String,System.String,MudBlazor.Extensions.Options.DialogOptionsEx,System.Action{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta{Nextended.Core.Helper.IStructuredDataObject}},MudBlazor.DialogParameters)">
            <summary>
            Shows an object edit dialog for given data string as object edit.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.EditStructuredDataStringAsync(MudBlazor.IDialogService,Nextended.Core.Helper.StructuredDataType,System.String,System.String,System.Func{Nextended.Core.Helper.IStructuredDataObject,MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditDialog{Nextended.Core.Helper.IStructuredDataObject},System.Threading.Tasks.Task{System.String}},MudBlazor.Extensions.Options.DialogOptionsEx,System.Action{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta{Nextended.Core.Helper.IStructuredDataObject}},MudBlazor.DialogParameters)">
            <summary>
            Shows an object edit dialog for given data string as object edit.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.EditStructuredDataStringAsync(MudBlazor.IDialogService,Nextended.Core.Helper.StructuredDataType,System.String,System.String,MudBlazor.Extensions.Options.DialogOptionsEx,System.Action{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta{Nextended.Core.Helper.IStructuredDataObject}},MudBlazor.DialogParameters)">
            <summary>
            Shows an object edit dialog for given data string as object edit.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.EditObjectAsync``1(MudBlazor.IDialogService,``0,System.String,System.Func{``0,MudBlazor.Extensions.Components.ObjectEdit.MudExObjectEditDialog{``0},System.Threading.Tasks.Task{System.String}},MudBlazor.Extensions.Options.DialogOptionsEx,System.Action{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta{``0}},MudBlazor.DialogParameters)">
            <summary>
            Shows an object edit dialog for the given object.
            </summary>
            <typeparam name="TModel">The type of the object to edit.</typeparam>
            <param name="dialogService">The dialog service to use.</param>
            <param name="value">The object to edit.</param>
            <param name="title">The dialog title.</param>
            <param name="customSubmit">Custom submit</param>
            <param name="options">The dialog options.</param>
            <param name="metaConfig">The configuration of meta information.</param>
            <param name="dialogParameters">The dialog parameters.</param>
            <returns>A tuple indicating if edit was cancelled and the result.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.EditObjectAsync``1(MudBlazor.IDialogService,``0,System.String,MudBlazor.Extensions.Options.DialogOptionsEx,System.Action{MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta{``0}},MudBlazor.DialogParameters)">
            <summary>
            Shows an object edit dialog for the given object.
            </summary>
            <typeparam name="TModel">The type of the object to edit.</typeparam>
            <param name="dialogService">The dialog service to use.</param>
            <param name="value">The object to edit.</param>
            <param name="title">The dialog title.</param>
            <param name="options">The dialog options.</param>
            <param name="metaConfig">The configuration of meta information.</param>
            <param name="dialogParameters">The dialog parameters.</param>
            <returns>A tuple indicating if edit was cancelled and the result.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.EditItemsAsync``1(MudBlazor.IDialogService,System.String,System.String,System.Func{System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}}},System.Boolean,System.Boolean,System.Func{System.Collections.Generic.ICollection{``0},System.Boolean},System.Func{``0,System.String},MudBlazor.Extensions.Options.DialogOptionsEx,System.Action{MudBlazor.Extensions.Components.MudExMessageDialog})">
            <summary>
            Displays a dialog that allows the user to edit a collection of items.
            </summary>
            <typeparam name="T">The type of items to edit.</typeparam>
            <param name="dialogService">The dialog service instance used to display the dialog.</param>
            <param name="title">The title of the dialog.</param>
            <param name="headerText">The header text displayed in the dialog.</param>
            <param name="itemsLoadFunc">
            A function that asynchronously loads the items to be edited.
            </param>
            <param name="allowAddAndRemove">
            Indicates whether the dialog allows adding and removing items.
            Defaults to <c>true</c>.
            </param>
            <param name="canCancel">
            Specifies whether canceling the dialog is allowed.
            If <c>false</c>, the close button will be disabled.
            </param>
            <param name="validResult">
            A function used to validate the edited items.
            The dialog is confirmed only if this function returns <c>true</c>.
            If not provided, a default validation is applied (always valid).
            </param>
            <param name="itemToStringFunc">
            A function to convert each item into its string representation.
            If not provided, the item's <c>ToString()</c> method is used.
            </param>
            <param name="options">
            Optional dialog options to customize the behavior and appearance of the dialog.
            </param>
            <param name="dialogParameters">
            An optional action to configure additional parameters for the dialog.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The result contains the edited array of items if the dialog was confirmed,
            or the original items if the dialog was canceled.
            </returns>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.EditItemsAsync``1(MudBlazor.IDialogService,System.String,System.String,System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Boolean,System.Func{System.Collections.Generic.ICollection{``0},System.Boolean},System.Func{``0,System.String},MudBlazor.Extensions.Options.DialogOptionsEx,System.Action{MudBlazor.Extensions.Components.MudExMessageDialog})">
            <summary>
            Displays a dialog that allows the user to edit a collection of items.
            This overload accepts a predefined collection of items.
            </summary>
            <typeparam name="T">The type of items to edit.</typeparam>
            <param name="dialogService">The dialog service instance used to display the dialog.</param>
            <param name="title">The title of the dialog.</param>
            <param name="headerText">The header text displayed in the dialog.</param>
            <param name="items">
            The collection of items to be edited.
            </param>
            <param name="allowAddAndRemove">
            Indicates whether the dialog allows adding and removing items.
            Defaults to <c>true</c>.
            </param>
            <param name="canCancel">
            Specifies whether canceling the dialog is allowed.
            If <c>false</c>, the dialog cannot be closed without confirming a valid edit.
            </param>
            <param name="validResult">
            A function used to validate the edited items.
            The dialog is confirmed only if this function returns <c>true</c>.
            </param>
            <param name="itemToStringFunc">
            A function to convert each item into its string representation.
            If not provided, the item's <c>ToString()</c> method is used.
            </param>
            <param name="options">
            Optional dialog options to customize the behavior and appearance of the dialog.
            </param>
            <param name="dialogParameters">
            An optional action to configure additional parameters for the dialog.
            </param>
            <returns>
            A task that represents the asynchronous operation.
            The result contains the edited array of items if the dialog was confirmed,
            or the original items if the dialog was canceled.
            </returns>
        </member>
        <member name="M:MudBlazor.Extensions.DialogServiceExt.ShowThemeEditAsync``1(MudBlazor.IDialogService,``0,System.String,System.String,System.Nullable{System.Boolean},MudBlazor.Extensions.Options.DialogOptionsEx)">
            <summary>
            Show  the MudExThemeEdit inside of a dialog and returns the new theme if user saved it.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Helper.ArchiveConverter">
            <summary>
            Helper class for converting between different archive formats.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.ArchiveConverter.ExtractToMemoryStreams(SharpCompress.Archives.IArchive)">
            <summary>
            Extracts the contents of the given archive to a dictionary of memory streams.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.ArchiveConverter.ConvertMemoryStreamsToZip(System.Collections.Generic.Dictionary{System.String,System.IO.MemoryStream})">
            <summary>
            Converts a dictionary of memory streams to a single zip archive memory stream.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.ArchiveConverter.ConvertArchiveToZip(SharpCompress.Archives.IArchive)">
            <summary>
            Converts the given archive to a zip archive memory stream.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.ArchiveConverter.ConvertToSystemCompressionZip(System.IO.Stream)">
            <summary>
            Converts the given stream to a zip archive stream using the SharpCompress library.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Helper.BrowserFileExt">
            <summary>
            Extensions for <see cref="T:Microsoft.AspNetCore.Components.Forms.IBrowserFile"/>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.BrowserFileExt.DownloadAsync(Microsoft.AspNetCore.Components.Forms.IBrowserFile,Microsoft.JSInterop.IJSRuntime)">
            <summary>
            Downloads the file
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.BrowserFileExt.IconForFile(System.String)">
            <summary>
            Returns Icon for contentType
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.BrowserFileExt.IconForFile(Nextended.Core.Contracts.IUploadableFile)">
            <summary>
            Returns Icon for contentType
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.BrowserFileExt.GetIcon(Microsoft.AspNetCore.Components.Forms.IBrowserFile)">
            <summary>
            Returns Icon for IBrowserFile
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.BrowserFileExt.GetIcon(System.String,System.String)">
            <summary>
            Returns Icon for IBrowserFile
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.BrowserFileExt.GetContentType(Microsoft.AspNetCore.Components.Forms.IBrowserFile)">
            <summary>
            Returns the content type for given file
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.BrowserFileExt.GetPreferredColor(System.String)">
            <summary>
            Returns the preferred color for the given content type
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.BrowserFileExt.GetPreferredColor(Microsoft.AspNetCore.Components.Forms.IBrowserFile)">
            <summary>
            Returns Icon for IBrowserFile
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.BrowserFileExt.IconForFile(System.Net.Mime.ContentType)">
            <summary>
            Returns Icon for contentType
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.BrowserFileExt.IconForExtension(System.String)">
            <summary>
            Returns Icon for an extension
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Helper.DialogParametersExtensions">
            <summary>
            Static extensions for DialogParameters and relevant types.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.DialogParametersExtensions.MergeWith(MudBlazor.DialogParameters,MudBlazor.DialogParameters)">
            <summary>
            Merges the dialog parameters.
            </summary>
            <param name="dialogParameters">The dialog parameters.</param>
            <param name="parameters">The parameters.</param>
            <returns>The merged dialog parameters.</returns>        
        </member>
        <member name="M:MudBlazor.Extensions.Helper.DialogParametersExtensions.ToDialogParameters(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Converts parameters to dialog parameters.
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The dialog parameters.</returns>        
        </member>
        <member name="M:MudBlazor.Extensions.Helper.DialogParametersExtensions.ConvertToDialogParameters``1(System.Action{``0})">
            <summary>
            Converts dialog parameters to a dictionary.
            </summary>
            <typeparam name="TDialog">The dialog type.</typeparam>
            <param name="dialogParameters">The dialog parameters.</param>
            <returns>The dictionary of dialog parameters.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.DialogParametersExtensions.ConvertToDialogParameters``1(``0)">
            <summary>
            Converts dialog parameters to a dictionary.
            </summary>
            <typeparam name="TDialog">The dialog type.</typeparam>
            <param name="dialogParameters">The dialog parameters.</param>
            <returns>The dictionary of dialog parameters.</returns>
        </member>
        <member name="T:MudBlazor.Extensions.Helper.DialogReferenceExtensions">
            <summary>
            Extensions for dialog reference
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.DialogReferenceExtensions.GetDialogId(MudBlazor.IDialogReference)">
            <summary>
            returns the Id for a rendered dialogReference 
            </summary>
            <param name="dialogReference"></param>
            <returns></returns>
        </member>
        <member name="T:MudBlazor.Extensions.Helper.Extensions">
            <summary>
            Some basic extensions for MudBlazor components or types.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.Extensions.GetPositionNames(System.Nullable{MudBlazor.DialogPosition},System.Boolean)">
            <summary>
            Returns the names of the given DialogPosition enum value.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.Extensions.TryLocalize(Microsoft.Extensions.Localization.IStringLocalizer,System.String,System.Object[])">
            <summary>
            Try to localize the given text using the provided localizer.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.Extensions.IsLocalized(Microsoft.Extensions.Localization.IStringLocalizer,System.String,System.Object[])">
            <summary>
            Returns whether the given text is localized using the provided localizer.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.Extensions.ToHtml(System.ValueTuple{System.String,System.Collections.Generic.Dictionary{System.String,System.Object}},System.String,System.String)">
            <summary>
            Converts the given data to an HTML string.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Helper.Internal.Features">
            <summary>
            Feature toggles
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.Internal.SizeParser.ParseMudExSize``1(System.String)">
            <summary>
            Parses a string to a tuple of value and unit.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:MudBlazor.Extensions.Helper.JsImportHelper">
            <summary>
            Helper class for importing JS modules
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.JsImportHelper.InitializeMudBlazorExtensionsAsync(Microsoft.JSInterop.IJSRuntime,System.Boolean)">
            <summary>
            Imports requires JS module and required css styles for MudBlazor.Extensions
            </summary>        
        </member>
        <member name="M:MudBlazor.Extensions.Helper.JsImportHelper.InitializeMudBlazorExtensionsCoreAsync(Microsoft.JSInterop.IJSRuntime,System.Boolean)">
            <summary>
            Imports requires JS module and required css styles for MudBlazor.Extensions and returns the initialized JS runtime
            </summary>        
        </member>
        <member name="T:MudBlazor.Extensions.Helper.JsRuntimeExtensions">
            <summary>
            Contains extension methods for IJSRuntime to call MudBlazor extensions JavaScript functions.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.JsRuntimeExtensions.IsWithin(Microsoft.JSInterop.IJSRuntime,Microsoft.AspNetCore.Components.Web.MouseEventArgs,Microsoft.AspNetCore.Components.ElementReference)">
            <summary>
            Checks if given mouse args are within given element.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.JsRuntimeExtensions.GetCssVariablesAsync(Microsoft.JSInterop.IJSRuntime)">
            <summary>
            Returns all current CssVariables
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.JsRuntimeExtensions.FindCssVariablesByValueAsync(Microsoft.JSInterop.IJSRuntime,System.String)">
            <summary>
            Returns css variables by value
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.JsRuntimeExtensions.SetCssVariableValueAsync(Microsoft.JSInterop.IJSRuntime,MudBlazor.Extensions.Core.CssVariable)">
            <summary>
            Updates or creates a new css variable
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.JsRuntimeExtensions.SetCssVariableValueAsync(Microsoft.JSInterop.IJSRuntime,System.String,System.Object,System.Object[])">
            <summary>
            Updates or creates a new css variable
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.JsRuntimeExtensions.SetCssVariableValueAsync(Microsoft.JSInterop.IJSRuntime,System.String,System.Object)">
            <summary>
            Updates or creates a new css variable
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.JsRuntimeExtensions.SetCssVariableValueAsync(Microsoft.JSInterop.IJSRuntime,System.String,MudBlazor.Color)">
            <summary>
            Updates or creates a new css variable
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.JsRuntimeExtensions.SetCssVariableValueAsync(Microsoft.JSInterop.IJSRuntime,System.String,MudBlazor.Utilities.MudColor)">
            <summary>
            Updates or creates a new css variable
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.JsRuntimeExtensions.SetCssVariableValueAsync(Microsoft.JSInterop.IJSRuntime,System.String,System.String)">
            <summary>
            Updates or creates a new css variable
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.JsRuntimeExtensions.GetCssColorVariablesAsync(Microsoft.JSInterop.IJSRuntime)">
            <summary>
            Returns all CSS variables that containing color values
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Helper.MudExColorUtils">
            <summary>
            MudExColor is a static utility class that provides a set of extension methods for working with Color and MudColor instances.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExColorUtils.AllColors(MudBlazor.Palette)">
            <summary>
            Returns array with all colors in given palette.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExColorUtils.AllColors(MudBlazor.PaletteLight)">
            <summary>
            Returns array with all colors in given palette.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExColorUtils.AllColors(MudBlazor.PaletteDark)">
            <summary>
            Returns array with all colors in given palette.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExColorUtils.ToInt(MudBlazor.Utilities.MudColor)">
            <summary>
            Converts a MudColor to an int
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExColorUtils.ToUInt(MudBlazor.Utilities.MudColor)">
            <summary>
            Converts a MudColor to an unsigned int
            </summary>    
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExColorUtils.CssVarName(MudBlazor.Color)">
            <summary>
            Returns the CSS variable name for the given color.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExColorUtils.CssVarDeclaration(MudBlazor.Color)">
            <summary>
            Returns the CSS variable declaration for the given color. For example var(--mud-color-primary) for Color.Primary
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExColorUtils.ToDrawingColor(MudBlazor.Utilities.MudColor)">
            <summary>
            Converts a MudColor to a system drawing color
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExColorUtils.ToMudColorAsync(MudBlazor.Color,Microsoft.JSInterop.IJSRuntime)">
            <summary>
            Converts a Color enum value of Color (like Color.Primary) to a MudColor with the correct values filled
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExColorUtils.ToMudColor(System.Drawing.Color)">
            <summary>
            Converts a system drawing color to a MudColor
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExColorUtils.ToCssRgba(MudBlazor.Utilities.MudColor)">
            <summary>
            Converts a MudColor to a string in the format css rgba format
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExColorUtils.IsBlack(MudBlazor.Utilities.MudColor)">
            <summary>
            returns true is given color is black
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExColorUtils.IsWhite(MudBlazor.Utilities.MudColor)">
            <summary>
            returns true is given color is white
            </summary>    
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExColorUtils.FromHtmlColorName(System.String)">
            <summary>
            Creates a drawing color from html known color name
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExColorUtils.ToHex(System.Drawing.Color)">
            <summary>
            Converts a system drawing color to hey
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExColorUtils.IsValid(MudBlazor.Utilities.MudColor)">
            <summary>
            returns true is given MudColor is not null and valid filled
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExColorUtils.TryParseFromHtmlColorName(System.String,System.Drawing.Color@)">
            <summary>
            Try's to parse string to system drawing color
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Helper.MudExCss">
            <summary>
            Static Util class with some small css helping methods or types
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Helper.MudExCss.Classes">
            <summary>
            MudExCss classes
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Helper.MudExCss.Classes.Backgrounds">
            <summary>
            Css classes for backgrounds
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Helper.MudExCss.Classes.Backgrounds.Blur">
            <summary>
            Blur background
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Helper.MudExCss.Classes.Backgrounds.LightBulb">
            <summary>
            Light bulb background
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Helper.MudExCss.Classes.Backgrounds.MovingDots">
            <summary>
            Background with animated moving color dots
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Helper.MudExCss.Classes.Backgrounds.TransparentIndicator">
            <summary>
            Background with Transparent indicator style
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Helper.MudExCss.Classes.Backgrounds.EmptyIndicator">
            <summary>
            Background used for Empty content
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Helper.MudExCss.Classes.Backgrounds.NoModal">
            <summary>
            Class used for Background if no modal dialogs appear
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Helper.MudExCss.Classes.Class">
            <summary>
            Class to apply
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExCss.Classes.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExCss.Classes.ToString">
            <summary>
            ToString
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExCss.Classes.op_Implicit(MudBlazor.Extensions.Helper.MudExCss.Classes)~System.String">
            <summary>
            Operator to convert to string
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExCss.Classes.op_Implicit(System.String)~MudBlazor.Extensions.Helper.MudExCss.Classes">
            <summary>
            Operator to convert to CssClasses
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Helper.MudExCss.Classes.Dialog">
            <summary>
            Css classes for dialogs
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Helper.MudExCss.Classes.Dialog._Initial">
            <summary>
            The mud ex initial class should always applied to dialogs if you use dialogServiceExt
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Helper.MudExCss.Classes.Dialog.Glass">
            <summary>
            Glass dialog
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Helper.MudExCss.Classes.Dialog.FullHeightContent">
            <summary>
            Class for full height content
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Helper.MudExCss.Classes.Dialog.FullHeightWithMargin">
            <summary>
            Full height with margin
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Helper.MudExCss.Classes.Dialog.FullHeightWithoutMargin">
            <summary>
            Full height without margin
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Helper.MudExCss.Classes.Dialog.ColorfullGlass">
            <summary>
            Class for color full glass dialog
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Helper.MudExCss.Classes.Dialog.DialogActionsSticky">
            <summary>
            Class for sticky dialog actions
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Helper.MudExCss.Classes.Dialog.DialogActionsAbsolute">
            <summary>
            Class for absolute dialog actions
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Helper.MudExCss.Classes.Dialog.PositionFixedNoMargin">
            <summary>
            No margin dialog
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Helper.MudExCss.Classes.General">
            <summary>
            Css classes for dialogs
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Helper.MudExCss.Classes.General.FullHeight">
            <summary>
            Full height
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Helper.MudExCss.Classes.General.Hidden">
            <summary>
            Hidden
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Helper.MudExCss.Classes.General.Collapsed">
            <summary>
            Hidden
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExCss.CssClasses.#ctor(System.String,System.String[])">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExCss.For(System.String)">
            <summary>
            Returns a css class name for given type name
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExCss.For(System.Type)">
            <summary>
            Returns a css class name for given type
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExCss.For``1">
            <summary>
            Returns a css class name for given type
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExCss.GetAnimationCssStyle(MudBlazor.Extensions.Options.AnimationType,System.Nullable{System.TimeSpan},System.Nullable{MudBlazor.Extensions.Options.AnimationDirection},MudBlazor.Extensions.Options.AnimationTimingFunction,System.Nullable{MudBlazor.DialogPosition},MudBlazor.Extensions.Options.AnimationIteration)">
            <summary>
            Returns an applicable style string as animation for given animations options
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExCss.GetAnimationCssStyle(MudBlazor.Extensions.Options.AnimationType[],System.TimeSpan,System.Nullable{MudBlazor.Extensions.Options.AnimationDirection},MudBlazor.Extensions.Options.AnimationTimingFunction,System.Nullable{MudBlazor.DialogPosition},MudBlazor.Extensions.Options.AnimationIteration)">
            <summary>
            Returns an applicable style string as animation for given animations options
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExCss.Get(MudBlazor.Extensions.Helper.MudExCss.Classes,MudBlazor.Extensions.Helper.MudExCss.Classes[])">
            <summary>
            Can be used jus to quickly access some classes.
            MudExCss.Get(MudExCss.Classes.Dialog.FullHeightContent, "overflow-hidden", MudExCss.Classes.Dialog._Initial);
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExCss.CreateStyle(System.Action{MudBlazor.Extensions.Helper.MudExStyleBuilder})">
            <summary>
            Creates a style builder with applied styles from given action
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExCss.GenerateCssString(System.Object,System.String)">
            <summary>
            Generates a css string from given object
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExCss.GenerateCssString(System.Object,MudBlazor.Extensions.Core.CssUnit,System.String)">
            <summary>
            Generates a css string from given object
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExCss.CombineCSSStrings(System.String,System.String)">
            <summary>
            Combines two css strings
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExCss.CssStringToObject``1(System.String)">
            <summary>
            Converts a css string to an object
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExCss.GetCssVariablesAsync">
            <summary>
            Returns all css variables as key value pairs
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExCss.FindCssVariablesByValueAsync(System.String)">
            <summary>
            Finds all css variables by given value
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExCss.SetCssVariableValueAsync(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            Sets a css variable value
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExCss.SetCssVariableValueAsync(System.String,System.Object,System.Object[])">
            <summary>
            Sets a css variable value
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExCss.SetCssVariableValueAsync(System.String,System.Object)">
            <summary>
            Sets a css variable value
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExCss.SetCssVariableValueAsync(System.String,MudBlazor.Color)">
            <summary>
            Sets a css variable value
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExCss.SetCssVariableValueAsync(System.String,MudBlazor.Utilities.MudColor)">
            <summary>
            Sets a css variable value
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExCss.SetCssVariableValueAsync(System.String,System.String)">
            <summary>
            Sets a css variable value
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExCss.GetCssColorVariablesAsync">
            <summary>
            Sets a css variable value
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Helper.MudExCssBuilder">
            <summary>
            Simple Utility class to help with building css class strings
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExCssBuilder.#ctor">
            <summary>
            Creates a new instance of <see cref="T:MudBlazor.Extensions.Helper.MudExCssBuilder"/>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExCssBuilder.#ctor(System.String,System.String[])">
            <summary>
            Creates a new instance of <see cref="T:MudBlazor.Extensions.Helper.MudExCssBuilder"/> with given classes
            </summary>
            <param name="cls">class name</param>
            <param name="other">other classes</param>
        </member>
        <member name="P:MudBlazor.Extensions.Helper.MudExCssBuilder.Default">
            <summary>
            Static Property to access an instance <see cref="T:MudBlazor.Extensions.Helper.MudExStyleBuilder"/>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExCssBuilder.From(System.String,System.String[])">
            <summary>
            Static method to create new MudExCssBuilder with existing classes
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExCssBuilder.From(MudBlazor.Extensions.Helper.MudExCss.Classes,MudBlazor.Extensions.Helper.MudExCss.Classes[])">
            <summary>
            Static method to create new MudExCssBuilder with existing classes
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExCssBuilder.From(MudBlazor.Extensions.Helper.MudExCssBuilder)">
            <summary>
            Static method to create new MudExCssBuilder with existing classes
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExCssBuilder.FromStyleAsync(System.Object)">
            <summary>
            Static method to create new MudExCssBuilder with existing styles. All styles will stored in temporary css classes and added to the builder
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExCssBuilder.FromStyleAsync(System.String)">
            <summary>
            Static method to create new MudExCssBuilder with existing styles. All styles will stored in temporary css classes and added to the builder
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExCssBuilder.FromStyleAsync(MudBlazor.Extensions.Helper.MudExStyleBuilder)">
            <summary>
            Static method to create new MudExCssBuilder with existing styles. All styles will stored in temporary css classes and added to the builder
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExCssBuilder.RemoveClassesAsync(System.String[])">
            <summary>
            Remove class from this builder
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExCssBuilder.AddClass(System.String)">
            <summary>
            Adds a css class to this builder
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExCssBuilder.AddClass(MudBlazor.Extensions.Helper.MudExCss.Classes,System.Boolean)">
            <summary>
            Adds one or more css classes to this builder if given condition is true
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExCssBuilder.AddClass(MudBlazor.Extensions.Helper.MudExCss.Classes,MudBlazor.Extensions.Helper.MudExCss.Classes[])">
            <summary>
            Adds one or more css classes to this builder
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExCssBuilder.AddClass(System.String,System.String[])">
            <summary>
            Adds one or more css classes to this builder 
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExCssBuilder.AddClass(System.String,System.Boolean)">
            <summary>
            Adds one or more css classes to this builder if given condition is true
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExCssBuilder.AddClass(System.String,System.Func{System.Boolean})">
            <summary>
            Adds one or more css classes to this builder if given condition is true
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExCssBuilder.AddClass(System.Func{System.String},System.Boolean)">
            <summary>
            Adds one or more css classes to this builder if given condition is true
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExCssBuilder.AddClass(System.Func{System.String},System.Func{System.Boolean})">
            <summary>
            Adds one or more css classes to this builder if given condition is true
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExCssBuilder.AddClass(MudBlazor.Utilities.CssBuilder,System.Boolean)">
            <summary>
            Adds all classes from existing CssBuilder to this builder if given condition is true
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExCssBuilder.AddClass(MudBlazor.Utilities.CssBuilder,System.Func{System.Boolean})">
            <summary>
            Adds all classes from existing CssBuilder to this builder if given condition is true
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExCssBuilder.AddClass(MudBlazor.Extensions.Helper.MudExCssBuilder,System.Func{System.Boolean})">
            <summary>
            Adds all classes from existing CssBuilder to this builder if given condition is true
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExCssBuilder.AddClass(MudBlazor.Extensions.Helper.MudExCssBuilder,System.Boolean)">
            <summary>
            Adds all classes from existing CssBuilder to this builder if given condition is true
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExCssBuilder.AddClassFromStyleAsync(MudBlazor.Extensions.Helper.MudExStyleBuilder,System.Boolean)">
            <summary>
            Adds a temporary class with all styles from given styleBuilder to this cssBuilder
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExCssBuilder.AddClassFromStyleAsync(MudBlazor.Extensions.Helper.MudExStyleBuilder,System.Func{System.Boolean})">
            <summary>
            Adds a temporary class with all styles from given styleBuilder to this cssBuilder if given condition func returns true
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExCssBuilder.AddClassFromStyleAsync(System.Object,System.Boolean)">
            <summary>
            Adds a temporary class with all styles from given object to this cssBuilder if given condition is true
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExCssBuilder.AddClassFromStyleAsync(System.String,System.Boolean)">
            <summary>
            Adds a temporary class with all styles from given string to this cssBuilder if given condition is true
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExCssBuilder.AddClassFromStyleAsync(System.Object,System.Func{System.Boolean})">
            <summary>
            Adds a temporary class with all styles from given object to this cssBuilder if given condition func returns true
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExCssBuilder.AddClassFromStyleAsync(System.String,System.Func{System.Boolean})">
            <summary>
            Adds a temporary class with all styles from given object to this cssBuilder if given condition func returns true
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExCssBuilder.AddClassFromAttributes(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Adds classes from Attributes containing classes
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExCssBuilder.Build">
            <summary>
            Builds and returns an applicable css string
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExCssBuilder.ToString">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExCssBuilder.DisposeAsync">
            <summary>
            Disposes this instance
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExCssBuilder.GenerateAllCombinationsOf(System.String[])">
            <summary>
            Generates all possible combinations of given classes and returns them as list
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Helper.MudExCssBuilder.Class">
            <summary>
            Builds and returns an applicable css string
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Helper.MudExFonts">
            <summary>
            Static util MudExFonts
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Helper.MudExFonts.WebSafeFonts">
            <summary>
            All known WebSafe Fonts
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Helper.MudExFonts.GoogleLatinFonts">
            <summary>
            List of Google fonts that support Latin Extended characters. But all need to be imported from google font api.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExFonts.ImportUriText(System.String,System.String)">
            <summary>
            Creates the css import statement for a font
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Helper.MudExJsonHelper">
            <summary>
            Simple JsonHelper
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExJsonHelper.FormatDataStringIfJson(System.String,System.Nullable{Nextended.Core.Helper.StructuredDataType})">
            <summary>
            Formats data string if it is json
            </summary>    
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExJsonHelper.FormatJson(System.String)">
            <summary>
            Formats given json
            </summary>    
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExJsonHelper.SimplifyMudColorInJson(System.String)">
            <summary>
            Simplifies all MudColors in a given JSON
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExJsonHelper.MergeJson(System.String,System.String[])">
            <summary>
            Merges two json files
            </summary>
            <param name="json"></param>
            <param name="other"></param>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExJsonHelper.RemovePropertiesFromJson(System.String,System.String[])">
            <summary>
            Removes given properties from given json.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Helper.MudExResource">
            <summary>
            Static util class to access the internal code documentation
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Helper.MudExResource.IsClientSide">
            <summary>
            Returns whether the current runtime is client-side (WASM) or server-side
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Helper.MudExResource.IsServerSide">
            <summary>
            Server-side runtime
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Helper.MudExResource.IsDebug">
            <summary>
            Returns whether the current runtime is running in debug mode
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Helper.MudExResource.IsDebugOrPreviewBuild">
            <summary>
            Returns whether the current runtime is running in a debug or preview build
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExResource.MudBlazorVersion">
            <summary>
            Returns the version of used MudBlazor package
            </summary>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExResource.MudExVersion">
            <summary>
            Returns the version of MudBlazor extensions
            </summary>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExResource.GetSummaryDocumentationAsync(System.Type,System.Boolean)">
            <summary>
            returns the Summary documentation text for a type
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExResource.GetSummaryDocumentationAsync(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            returns a summary documentation text for given member
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Helper.MudExStyleBuilder">
            <summary>
            MudExStyleBuilder is useful to create style strings or convert any style to a class.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.#ctor(Microsoft.JSInterop.IJSRuntime)">
            <summary>
            Creates a new instance of <see cref="T:MudBlazor.Extensions.Helper.MudExStyleBuilder"/>
            </summary>
            <param name="jsRuntime">js runtime reference</param>
        </member>
        <member name="P:MudBlazor.Extensions.Helper.MudExStyleBuilder.Default">
            <summary>
            Static Property to access an instance <see cref="T:MudBlazor.Extensions.Helper.MudExStyleBuilder"/>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.Empty">
            <summary>
            Static factory method to create a <see cref="T:MudBlazor.Extensions.Helper.MudExStyleBuilder"/>
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.FromObject(System.Object,System.String,MudBlazor.Extensions.Core.CssUnit)">
            <summary>
            Static factory method to create a <see cref="T:MudBlazor.Extensions.Helper.MudExStyleBuilder"/> from an object.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.FromObject(System.Object,MudBlazor.Extensions.Core.CssUnit)">
            <summary>
            Static factory method to create a <see cref="T:MudBlazor.Extensions.Helper.MudExStyleBuilder"/> from an object.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.FromStyle(System.String)">
            <summary>
            Static factory method to create a <see cref="T:MudBlazor.Extensions.Helper.MudExStyleBuilder"/> from an existing style string.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.GenerateStyleString(System.Object,System.String)">
            <summary>
            Converts an object to a style string but only properties that are not passed in existingCss
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.GenerateStyleString(System.Object,MudBlazor.Extensions.Core.CssUnit,System.String)">
            <summary>
            Converts an object to a style string but only properties that are not passed in existingCss.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.CombineStyleStrings(System.String,System.String)">
            <summary>
            Combines two css style strings.
            </summary>
            <param name="cssString">css style string to be combined.</param>
            <param name="leadingCssString">css style string to be attached.</param>
            <returns>the combined css style strings.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.StyleStringToObject``1(System.String)">
            <summary>
            Converts a CSS style string to an object
            </summary>
            <typeparam name="T">Type of object to create</typeparam>
            <param name="css">CSS style string</param>
            <returns>The created object</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithStyle(System.String,System.Boolean)">
            <summary>
            Adds all styles and values from given style string
            </summary>
            <param name="styleString">CSS style string to parse and add to the builder</param>
            <param name="when">If false, no properties will be added to the builder</param>
            <returns>This MudExStyleBuilder instance</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.MergeWith(System.Action{MudBlazor.Extensions.Helper.MudExStyleBuilder},System.Boolean)">
            <summary>
            Merges the properties and values from the given Action with the current style string
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.MergeWith(System.String,System.Boolean)">
            <summary>
            Merges the properties and values from the given style string with the current style string
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.MergeWith(MudBlazor.Extensions.Helper.MudExStyleBuilder,System.Boolean)">
            <summary>
            Merges the properties and values from the given styleBuilder with the current style string
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.With(System.Object,MudBlazor.Extensions.Core.CssUnit,System.Boolean)">
            <summary>
            Converts given object to a CSS style string and adds all properties and values to this builder
            </summary>
            <param name="styleObj">Object to convert to a CSS style string</param>
            <param name="cssUnit">Unit to format CSS quantity-including properties. Default is CssUnit.Pixels.</param>
            <param name="when">If false, no properties will be added to the builder</param>
            <returns>This MudExStyleBuilder instance</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithColor(System.String,System.Boolean)">
            <summary>
            Adds a color property to the builder
            </summary>
            <param name="color">Value of the color property</param>
            <param name="when">If false, no property will be added to the builder</param>
            <returns>This MudExStyleBuilder instance</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithColor(MudBlazor.Extensions.Core.MudExColor,System.Boolean)">
            <summary>
            Adds a color property to the builder.
            </summary>
            <param name="color">Value of the MudExColor property</param>
            <param name="when">If false, no property will be added to the builder</param>
            <returns>This MudExStyleBuilder instance</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithColor(MudBlazor.Utilities.MudColor,System.Boolean)">
            <summary>
            Adds a color property to the builder.
            </summary>
            <param name="color">Value of the MudColor property</param>
            <param name="when">If false, no property will be added to the builder</param>
            <returns>This MudExStyleBuilder instance</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithColor(System.Drawing.Color,System.Boolean)">
            <summary>
            Adds a color property to the builder.
            </summary>
            <param name="color">Value of the System.Drawing.Color property</param>
            <param name="when">If false, no property will be added to the builder</param>
            <returns>This MudExStyleBuilder instance</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithColor(MudBlazor.Color,System.Boolean)">
            <summary>
            Adds a color property with a value of `var(--{color})` to the builder.
            </summary>
            <param name="color">Color variable name, without "--" prefix</param>
            <param name="when">If false, no property will be added to the builder.</param>
            <returns>This MudExStyleBuilder instance</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithStroke(System.String,System.Boolean)">
            <summary>
            Adds a stroke property to the builder
            </summary>
            <param name="color">Value of the fill property</param>
            <param name="when">If false, no property will be added to the builder</param>
            <returns>This MudExStyleBuilder instance</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithStroke(MudBlazor.Extensions.Core.MudExColor,System.Boolean)">
            <summary>
            Adds a stroke property to the builder
            </summary>
            <param name="color">Value of the MudExColor property</param>
            <param name="when">If false, no property will be added to the builder</param>
            <returns>This MudExStyleBuilder instance</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithStroke(MudBlazor.Utilities.MudColor,System.Boolean)">
            <summary>
            Adds a stroke property to the builder
            </summary>
            <param name="color">Value of the MudColor property</param>
            <param name="when">If false, no property will be added to the builder</param>
            <returns>This MudExStyleBuilder instance</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithStroke(System.Drawing.Color,System.Boolean)">
            <summary>
            Adds a stroke property to the builder
            </summary>
            <param name="color">Value of the System.Drawing.Color property</param>
            <param name="when">If false, no property will be added to the builder</param>
            <returns>This MudExStyleBuilder instance</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithStroke(MudBlazor.Color,System.Boolean)">
            <summary>
            Adds a stroke property with a value of `var(--{color})` to the builder.
            </summary>
            <param name="color">Color variable name, without "--" prefix</param>
            <param name="when">If false, no property will be added to the builder.</param>
            <returns>This MudExStyleBuilder instance</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithFill(System.String,System.Boolean)">
            <summary>
            Adds a fill property to the builder
            </summary>
            <param name="color">Value of the fill property</param>
            <param name="when">If false, no property will be added to the builder</param>
            <returns>This MudExStyleBuilder instance</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithFill(MudBlazor.Extensions.Core.MudExColor,System.Boolean)">
            <summary>
            Adds a fill property to the builder
            </summary>
            <param name="color">Value of the MudExColor property</param>
            <param name="when">If false, no property will be added to the builder</param>
            <returns>This MudExStyleBuilder instance</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithFill(MudBlazor.Utilities.MudColor,System.Boolean)">
            <summary>
            Adds a fill property to the builder
            </summary>
            <param name="color">Value of the MudColor property</param>
            <param name="when">If false, no property will be added to the builder</param>
            <returns>This MudExStyleBuilder instance</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithFill(System.Drawing.Color,System.Boolean)">
            <summary>
            Adds a fill property to the builder
            </summary>
            <param name="color">Value of the System.Drawing.Color property</param>
            <param name="when">If false, no property will be added to the builder</param>
            <returns>This MudExStyleBuilder instance</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithFill(MudBlazor.Color,System.Boolean)">
            <summary>
            Adds a fill property with a value of `var(--{color})` to the builder.
            </summary>
            <param name="color">Color variable name, without "--" prefix</param>
            <param name="when">If false, no property will be added to the builder.</param>
            <returns>This MudExStyleBuilder instance</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithBackground(System.String[],System.Int32,System.Boolean)">
            <summary>
            Adds a background property to the builder. The background is a gradient of all entries in the color array.
            </summary>
            <param name="color">Array of the colors of the gradient stops. Multiple colors can be used for a smoother transition.</param>
            <param name="radius">degree of the gradient. Default is 0.</param>
            <param name="when">If false, no property will be added to the builder.</param>
            <returns>This MudExStyleBuilder instance.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithBackground(MudBlazor.Palette,System.Boolean)">
            <summary>
            Adds a background property to the builder. The background is a gradient of a preset palette's colors.
            </summary>
            <param name="palette">Name of the palette whose colors should be used.</param>
            <param name="when">If false, no property will be added to the builder.</param>
            <returns>This MudExStyleBuilder instance.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithBackground(MudBlazor.PaletteDark,System.Boolean)">
            <summary>
            Adds a background property to the builder. The background is a gradient of a dark preset palette's colors.
            </summary>
            <param name="palette">Name of the palette whose colors should beta used.</param>
            <param name="when">If false, no property will be added to the builder.</param>
            <returns>This MudExStyleBuilder instance.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithBackground(MudBlazor.PaletteLight,System.Boolean)">
            <summary>
            Adds a background property to the builder. The background is a gradient of a light preset palette's colors.
            </summary>
            <param name="palette">Name of the palette whose colors should beta used.</param>
            <param name="when">If false, no property will be added to the builder.</param>
            <returns>This MudExStyleBuilder instance.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithBackground(MudBlazor.MudTheme,System.Boolean,System.Boolean)">
            <summary>
            Adds a background property to the builder. The background is a gradient of a theme's palette or dark palette.
            </summary>
            <param name="theme">Theme to use.</param>
            <param name="dark">If true, the dark palette will be used.</param>
            <param name="when">If false, no property will be added to the builder.</param>
            <returns>This MudExStyleBuilder instance.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithBackground(MudBlazor.MudTheme,System.Boolean)">
            <summary>
            Adds a background property to the builder. The background is a gradient of a concatenated list of two palettes, default and dark.
            </summary>
            <param name="theme">The theme to use.</param>
            <param name="when">If false, no property will be added to the builder.</param>
            <returns>This MudExStyleBuilder instance.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithBackground(System.String[],System.Boolean)">
            <summary>
            Adds a background property to the builder. The background is a gradient of all entries in the color array.
            </summary>
            <param name="color">Array of the CSS values of the colors of the gradient stops. Multiple colors can be used for a smoother transition.</param>
            <param name="when">If false, no property will be added to the builder.</param>
            <returns>This MudExStyleBuilder instance.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithBackground(MudBlazor.Extensions.Core.MudExColor[],System.Boolean)">
            <summary>
            Adds a background property to the builder. The background is a gradient of all entries in the MudExColor array.
            </summary>
            <param name="color">Array of MudExColor objects representing the colors of the gradient stops. Multiple colors can be used for a smoother transition.</param>
            <param name="when">If false, no property will be added to the builder.</param>
            <returns>This MudExStyleBuilder instance.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithBackground(MudBlazor.Utilities.MudColor[],System.Boolean)">
            <summary>
            Adds a background property to the builder. The background is a gradient of all entries in the MudColor array.
            </summary>
            <param name="color">Array of MudColor objects representing the color of the gradient stops. Multiple colors can be used for a smoother transition.</param>
            <param name="when">If false, no property will be added to the builder.</param>
            <returns>This MudExStyleBuilder instance.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithBackground(System.Drawing.Color[],System.Boolean)">
            <summary>
            Adds a background property to the builder. The background is a gradient of all entries in the System.Drawing.Color array.
            </summary>
            <param name="color">Array of System.Drawing.Color objects representing the color of the gradient stops. Multiple colors can be used for a smoother transition.</param>
            <param name="when">If false, no property will be added to the builder.</param>
            <returns>This MudExStyleBuilder instance.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithBackground(MudBlazor.Color[],System.Boolean)">
            <summary>
            Adds a background property to the builder. The background is a gradient of all entries in the Color array.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithBackground(MudBlazor.Extensions.Core.MudExColor[],System.Int32,System.Boolean)">
            <summary>
            Adds a background property to the builder. The background is a gradient of all entries in the Color array.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithBackground(MudBlazor.Utilities.MudColor[],System.Int32,System.Boolean)">
            <summary>
            Adds a background property to the builder. The background is a gradient of all entries in the Color array.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithBackground(System.Drawing.Color[],System.Int32,System.Boolean)">
            <summary>
            Adds a background property to the builder. The background is a gradient of all entries in the Color array.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithBackground(MudBlazor.Color[],System.Int32,System.Boolean)">
            <summary>
            Adds a background property to the builder. The background is a gradient of all entries in the Color array.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithBackground(MudBlazor.Extensions.Core.MudExColor,System.Boolean)">
            <summary>
            Adds a background property to the builder.
            </summary>
            <summary>
            Specifies a background color using a MudExColor object, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithBackground(System.String,System.Boolean)">
            <summary>
            Specifies a background color using a CSS color string, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithBackground(MudBlazor.Utilities.MudColor,System.Boolean)">
            <summary>
            Specifies a background color using a MudColor object, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithBackground(System.Drawing.Color,System.Boolean)">
            <summary>
            Specifies a background color using a System.Drawing.Color object, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithBackground(MudBlazor.Color,System.Boolean)">
            <summary>
            Specifies a background color using a Color object, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithBackgroundColor(MudBlazor.Extensions.Core.MudExColor,System.Boolean)">
            <summary>
            Specifies a background color using a MudExColor object, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithBackgroundColor(System.String,System.Boolean)">
            <summary>
            Specifies a background color using a CSS color string, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithBackgroundColor(MudBlazor.Utilities.MudColor,System.Boolean)">
            <summary>
            Specifies a background color using a MudColor object, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithBackgroundColor(System.Drawing.Color,System.Boolean)">
            <summary>
            Specifies a background color using a System.Drawing.Color object, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithBackgroundColor(MudBlazor.Color,System.Boolean)">
            <summary>
            Specifies a background color using a Color object, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithBackgroundImage(System.String,System.Boolean)">
            <summary>
            Specifies a background image using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithBackgroundSize(System.String,System.Boolean)">
            <summary>
            Specifies the background size using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithDisplay(System.String,System.Boolean)">
            <summary>
            Specifies the display property using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithDisplay(MudBlazor.Extensions.Core.Css.Display,System.Boolean)">
            <summary>
            Specifies the display property using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithFlex(System.String,System.Boolean)">
            <summary>
            Specifies the flex property using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithJustifyContent(System.String,System.Boolean)">
            <summary>
            Specifies the justify-content property using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithJustifyContent(MudBlazor.Extensions.Core.Css.JustifyContent,System.Boolean)">
            <summary>
            Specifies the justify-content property using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithFlexFlow(System.String,System.Boolean)">
            <summary>
            Specifies the flex-flow property using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithFlexFlow(MudBlazor.Extensions.Core.Css.FlexFlow,System.Boolean)">
            <summary>
            Specifies the flex-flow property using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithAlignItems(System.String,System.Boolean)">
            <summary>
            Specifies the align-items property using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithAlignItems(MudBlazor.Extensions.Core.Css.AlignItems,System.Boolean)">
            <summary>
            Specifies the align-items property using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithPosition(System.String,System.Boolean)">
            <summary>
            Specifies the position property using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithPosition(MudBlazor.Extensions.Core.Css.Position,System.Boolean)">
            <summary>
            Specifies the position property using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithPosition(MudBlazor.Extensions.Core.MudExPosition,System.Boolean)">
            <summary>
            Specifies the position property using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithTop(System.String,System.Boolean)">
            <summary>
            Specifies the top property using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithBottom(System.String,System.Boolean)">
            <summary>
            Specifies the bottom property using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithLeft(System.String,System.Boolean)">
            <summary>
            Specifies the left property using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithRight(System.String,System.Boolean)">
            <summary>
            Specifies the right property using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithZIndex(System.Int32,System.Boolean)">
            <summary>
            Specifies the z-index property using an integer value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithFontSize(System.String,System.Boolean)">
            <summary>
            Specifies the font-size property using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithFontWeight(MudBlazor.Extensions.Core.Css.FontWeight,System.Boolean)">
            <summary>
            Specifies the font-weight property using a FontWeight enumeration value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithFontWeight(System.String,System.Boolean)">
            <summary>
            Specifies the font-weight property using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithTextAlign(System.String,System.Boolean)">
            <summary>
            Specifies the text-align property using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithTextDecoration(MudBlazor.Extensions.Core.Css.TextDecoration,System.Boolean)">
            <summary>
            Specifies the text-decoration property using a TextDecoration enumeration value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithTextDecoration(System.String,System.Boolean)">
            <summary>
            Specifies the text-decoration property using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithLetterSpacing(System.String,System.Boolean)">
            <summary>
            Specifies the letter-spacing property using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithLineHeight(System.String,System.Boolean)">
            <summary>
            Specifies the line-height property using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithTextTransform(System.String,System.Boolean)">
            <summary>
            Specifies the text-transform property using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithTextTransform(MudBlazor.Extensions.Core.Css.TextTransform,System.Boolean)">
            <summary>
            Specifies the text-transform property using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithWhiteSpace(System.String,System.Boolean)">
            <summary>
            Specifies the white-space property using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithWhiteSpace(MudBlazor.Extensions.Core.Css.WhiteSpace,System.Boolean)">
            <summary>
            Specifies the white-space property using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithWidth(System.String,System.Boolean)">
            <summary>
            Specifies the width property using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithWidth(System.Double,MudBlazor.Extensions.Core.CssUnit,System.Boolean)">
            <summary>
            Specifies the width property using a numeric value and CSS unit, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithWidth(MudBlazor.Extensions.Core.MudExSize{System.Double},System.Boolean)">
            <summary>
            Specifies the width property using a MudExSize value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithHeight(System.String,System.Boolean)">
            <summary>
            Specifies the height property using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithHeight(System.Double,MudBlazor.Extensions.Core.CssUnit,System.Boolean)">
            <summary>
            Specifies the height property using a numeric value and CSS unit, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithHeight(MudBlazor.Extensions.Core.MudExSize{System.Double},System.Boolean)">
            <summary>
            Specifies the height property using a MudExSize value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithOpacity(System.Double,System.Boolean)">
            <summary>
            Specifies the opacity property using a double value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithOpacity(System.String,System.Boolean)">
            <summary>
            Specifies the opacity property using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithMargin(System.String,System.Boolean)">
            <summary>
            Specifies the margin property using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithMargin(System.Double,MudBlazor.Extensions.Core.CssUnit,System.Boolean)">
            <summary>
            Specifies the margin property using a numeric value and CSS unit, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithMargin(MudBlazor.Extensions.Core.MudExSize{System.Double},System.Boolean)">
            <summary>
            Specifies the margin property using a MudExSize value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithPadding(System.String,System.Boolean)">
            <summary>
            Specifies the padding property using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithPadding(System.Double,MudBlazor.Extensions.Core.CssUnit,System.Boolean)">
            <summary>
            Specifies the padding property using a numeric value and CSS unit, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithPadding(MudBlazor.Extensions.Core.MudExSize{System.Double},System.Boolean)">
            <summary>
            Specifies the padding property using a MudExSize value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithOverflow(System.String,System.Boolean)">
            <summary>
            Specifies the overflow property using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithOverflow(MudBlazor.Extensions.Core.Css.Overflow,System.Boolean)">
            <summary>
            Specifies the overflow property using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithoutOverflow(System.Boolean)">
            <summary>
            Specifies a hidden overflow if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithCursor(System.String,System.Boolean)">
            <summary>
            Specifies the cursor property using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithCursor(MudBlazor.Extensions.Core.Css.Cursor,System.Boolean)">
            <summary>
            Specifies the cursor property using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithListStyleType(System.String,System.Boolean)">
            <summary>
            Specifies the list-style-type property using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithTransition(System.String,System.Boolean)">
            <summary>
            Specifies the transition property using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithTransform(System.String,System.Boolean)">
            <summary>
            Specifies the transform property using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithFlexDirection(System.String,System.Boolean)">
            <summary>
            Specifies the flex-direction property using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithFlexWrap(System.String,System.Boolean)">
            <summary>
            Specifies the flex-wrap property using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithBoxShadow(System.String,System.Boolean)">
            <summary>
            Specifies the box-shadow property using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithTextShadow(System.String,System.Boolean)">
            <summary>
            Specifies the text-shadow property using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithWordBreak(System.String,System.Boolean)">
            <summary>
            Specifies the word-break property using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithWordSpacing(System.String,System.Boolean)">
            <summary>
            Specifies the word-spacing property using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithBackfaceVisibility(System.String,System.Boolean)">
            <summary>
            Specifies the back face visibility property using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithOutline(System.String,System.Boolean)">
            <summary>
            Specifies the outline property using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithMaxWidth(System.String,System.Boolean)">
            <summary>
            Specifies the max-width property using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithMinWidth(System.String,System.Boolean)">
            <summary>
            Specifies the min-width property using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithMaxHeight(System.String,System.Boolean)">
            <summary>
            Specifies the max-height property using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithMinHeight(System.String,System.Boolean)">
            <summary>
            Specifies the min-height property using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithResize(System.String,System.Boolean)">
            <summary>
            Specifies the resize property using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithVisibility(System.String,System.Boolean)">
            <summary>
            Specifies the visibility property using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithVisibility(MudBlazor.Extensions.Core.Css.Visibility,System.Boolean)">
            <summary>
            Specifies the visibility property using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithFlexBasis(System.String,System.Boolean)">
            <summary>
            Specifies the flex-basis property using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithFlexGrow(System.String,System.Boolean)">
            <summary>
            Specifies the flex-grow property using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithFlexShrink(System.String,System.Boolean)">
            <summary>
            Specifies the flex-shrink property using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithOrder(System.String,System.Boolean)">
            <summary>
            Specifies the order property using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithGridGap(System.String,System.Boolean)">
            <summary>
            Specifies the grid-gap property using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithGridColumn(System.String,System.Boolean)">
            <summary>
            Specifies the grid-column property using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithGridRow(System.String,System.Boolean)">
            <summary>
            Specifies the grid-row property using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithGridTemplateColumns(System.String,System.Boolean)">
            <summary>
            Specifies the grid-template-columns property using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithGridTemplateRows(System.String,System.Boolean)">
            <summary>
            Specifies the grid-template-rows property using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithObjectFit(System.String,System.Boolean)">
            <summary>
            Specifies the object-fit property using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithObjectPosition(System.String,System.Boolean)">
            <summary>
            Specifies the object-position property using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithTextOverflow(System.String,System.Boolean)">
            <summary>
            Specifies the text-overflow property using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithVerticalAlign(System.String,System.Boolean)">
            <summary>
            Specifies the vertical-align property using a CSS string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithMinSize(System.String,System.String,System.Boolean)">
            <summary>
            Specifies both the min-width and min-height properties, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithMinSize(System.Double,System.Double,MudBlazor.Extensions.Core.CssUnit,System.Boolean)">
            <summary>
            Specifies both the min-width and min-height properties using a numerical value and a CssUnit, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithMinSize(System.Double,MudBlazor.Extensions.Core.CssUnit,System.Boolean)">
            <summary>
            Specifies both the min-width and min-height properties using the same numerical value and a CssUnit, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithMinSize(MudBlazor.Extensions.Core.MudExSize{System.Double},MudBlazor.Extensions.Core.MudExSize{System.Double},System.Boolean)">
            <summary>
            Specifies both the min-width and min-height properties using MudExSize objects, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithMinSize(MudBlazor.Extensions.Core.MudExDimension,System.Boolean)">
            <summary>
            Specifies both the min-width and min-height properties using a MudExDimension object, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithMaxSize(System.String,System.String,System.Boolean)">
            <summary>
            Specifies both the max-width and max-height properties using string values, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithMaxSize(System.Double,System.Double,MudBlazor.Extensions.Core.CssUnit,System.Boolean)">
            <summary>
            Specifies both the max-width and max-height properties using double values and a CssUnit for the values, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithMaxSize(System.Double,MudBlazor.Extensions.Core.CssUnit,System.Boolean)">
            <summary>
            Specifies both the max-width and max-height properties using the same double value and a CssUnit for the values, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithMaxSize(MudBlazor.Extensions.Core.MudExSize{System.Double},MudBlazor.Extensions.Core.MudExSize{System.Double},System.Boolean)">
            <summary>
            Specifies both the max-width and max-height properties using MudExSize objects, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithMaxSize(MudBlazor.Extensions.Core.MudExDimension,System.Boolean)">
            <summary>
            Specifies both the max-width and max-height properties using a MudExDimension object, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithSize(System.String,System.String,System.Boolean)">
            <summary>
            Specifies both the width and height properties using string values, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithSize(System.Double,MudBlazor.Extensions.Core.CssUnit,System.Boolean)">
            <summary>
            Specifies both the width and height properties using the same double value and a CssUnit for the values, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithSize(System.Double,System.Double,MudBlazor.Extensions.Core.CssUnit,System.Boolean)">
            <summary>
            Specifies both the width and height properties using different double values and a CssUnit for the values, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithSize(MudBlazor.Extensions.Core.MudExSize{System.Double},MudBlazor.Extensions.Core.MudExSize{System.Double},System.Boolean)">
            <summary>
            Specifies both the width and height properties using MudExSize objects, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithSize(MudBlazor.Extensions.Core.MudExDimension,System.Boolean)">
            <summary>
            Specifies both the width and height properties using a MudExDimension object, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithDimension(MudBlazor.Extensions.Core.MudExDimension,System.Boolean)">
            <summary>
            Specifies both the width and height properties using a MudExDimension object, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithMinHeight(System.Double,MudBlazor.Extensions.Core.CssUnit,System.Boolean)">
            <summary>
            Specifies the min-height property using a double value and a CssUnit, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithMinHeight(MudBlazor.Extensions.Core.MudExSize{System.Double},System.Boolean)">
            <summary>
            Specifies the min-height property using a MudExSize object, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithMinWidth(System.Double,MudBlazor.Extensions.Core.CssUnit,System.Boolean)">
            <summary>
            Specifies the min-width property using a double value and a CssUnit, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithMinWidth(MudBlazor.Extensions.Core.MudExSize{System.Double},System.Boolean)">
            <summary>
            Specifies the min-width property using a MudExSize object, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithMaxHeight(System.Double,MudBlazor.Extensions.Core.CssUnit,System.Boolean)">
            <summary>
            Specifies the max-height property using a double value and a CssUnit, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithMaxHeight(MudBlazor.Extensions.Core.MudExSize{System.Double},System.Boolean)">
            <summary>
            Specifies the max-height property using a MudExSize object, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithMaxWidth(System.Double,MudBlazor.Extensions.Core.CssUnit,System.Boolean)">
            <summary>
            Specifies the max-width property using a double value and a CssUnit, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithMaxWidth(MudBlazor.Extensions.Core.MudExSize{System.Double},System.Boolean)">
            <summary>
            Specifies the max-width property using a MudExSize object, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithPaddingTop(System.String,System.Boolean)">
            <summary>
            Specifies the padding-top property using a string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithPaddingTop(System.Double,MudBlazor.Extensions.Core.CssUnit,System.Boolean)">
            <summary>
            Specifies the padding-top property using a double value and a CssUnit, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithPaddingTop(MudBlazor.Extensions.Core.MudExSize{System.Double},System.Boolean)">
            <summary>
            Specifies the padding-top property using a MudExSize object, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithPaddingRight(System.String,System.Boolean)">
            <summary>
            Specifies the padding-right property using a string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithPaddingRight(System.Double,MudBlazor.Extensions.Core.CssUnit,System.Boolean)">
            <summary>
            Specifies the padding-right property using a double value and a CssUnit, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithPaddingRight(MudBlazor.Extensions.Core.MudExSize{System.Double},System.Boolean)">
            <summary>
            Specifies the padding-right property using a MudExSize object, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithPaddingBottom(System.String,System.Boolean)">
            <summary>
            Specifies the padding-bottom property using a string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithPaddingBottom(System.Double,MudBlazor.Extensions.Core.CssUnit,System.Boolean)">
            <summary>
            Specifies the padding-bottom property using a double value and a CssUnit, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithPaddingBottom(MudBlazor.Extensions.Core.MudExSize{System.Double},System.Boolean)">
            <summary>
            Specifies the padding-bottom property using a MudExSize object, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithPaddingLeft(System.String,System.Boolean)">
            <summary>
            Specifies the padding-left property using a string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithPaddingLeft(System.Double,MudBlazor.Extensions.Core.CssUnit,System.Boolean)">
            <summary>
            Specifies the padding-left property using a double value and a CssUnit, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithPaddingLeft(MudBlazor.Extensions.Core.MudExSize{System.Double},System.Boolean)">
            <summary>
            Specifies the padding-left property using a MudExSize object, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithMarginTop(System.String,System.Boolean)">
            <summary>
            Specifies the margin-top property using a string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithMarginTop(System.Double,MudBlazor.Extensions.Core.CssUnit,System.Boolean)">
            <summary>
            Specifies the margin-top property using a double value and a CssUnit, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithMarginTop(MudBlazor.Extensions.Core.MudExSize{System.Double},System.Boolean)">
            <summary>
            Specifies the margin-top property using a MudExSize object, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithMarginRight(System.String,System.Boolean)">
            <summary>
            Specifies the margin-right property using a string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithMarginRight(System.Double,MudBlazor.Extensions.Core.CssUnit,System.Boolean)">
            <summary>
            Specifies the margin-right property using a double value and a CssUnit, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithMarginRight(MudBlazor.Extensions.Core.MudExSize{System.Double},System.Boolean)">
            <summary>
            Specifies the margin-right property using a MudExSize object, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithMarginBottom(System.String,System.Boolean)">
            <summary>
            Specifies the margin-bottom property using a string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithMarginBottom(System.Double,MudBlazor.Extensions.Core.CssUnit,System.Boolean)">
            <summary>
            Specifies the margin-bottom property using a double value and a CssUnit, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithMarginBottom(MudBlazor.Extensions.Core.MudExSize{System.Double},System.Boolean)">
            <summary>
            Specifies the margin-bottom property using a MudExSize object, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithMarginLeft(System.String,System.Boolean)">
            <summary>
            Specifies the margin-left property using a string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithMarginLeft(System.Double,MudBlazor.Extensions.Core.CssUnit,System.Boolean)">
            <summary>
            Specifies the margin-left property using a double value and a CssUnit, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithMarginLeft(MudBlazor.Extensions.Core.MudExSize{System.Double},System.Boolean)">
            <summary>
            Specifies the margin-left property using a MudExSize object, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithFontSize(System.Double,MudBlazor.Extensions.Core.CssUnit,System.Boolean)">
            <summary>
            Specifies the font-size property using a double value and a CssUnit, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithFontSize(MudBlazor.Extensions.Core.MudExSize{System.Double},System.Boolean)">
            <summary>
            Specifies the font-size property using a MudExSize object, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithLetterSpacing(System.Double,MudBlazor.Extensions.Core.CssUnit,System.Boolean)">
            <summary>
            Specifies the letter-spacing property using a double value and a CssUnit, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithLetterSpacing(MudBlazor.Extensions.Core.MudExSize{System.Double},System.Boolean)">
            <summary>
            Specifies the letter-spacing property using a MudExSize object, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithLineHeight(System.Double,MudBlazor.Extensions.Core.CssUnit,System.Boolean)">
            <summary>
            Specifies the line-height property using a double value and a CssUnit, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithLineHeight(MudBlazor.Extensions.Core.MudExSize{System.Double},System.Boolean)">
            <summary>
            Specifies the line-height property using a MudExSize object, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithWordSpacing(System.Double,MudBlazor.Extensions.Core.CssUnit,System.Boolean)">
            <summary>
            Specifies the word-spacing property using a double value and a CssUnit, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithWordSpacing(MudBlazor.Extensions.Core.MudExSize{System.Double},System.Boolean)">
            <summary>
            Specifies the word-spacing property using a MudExSize object, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithTextIndent(System.String,System.Boolean)">
            <summary>
            Specifies the text-indent property using a string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithTextIndent(System.Double,MudBlazor.Extensions.Core.CssUnit,System.Boolean)">
            <summary>
            Specifies the text-indent property using a double value and a CssUnit, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithTextIndent(MudBlazor.Extensions.Core.MudExSize{System.Double},System.Boolean)">
            <summary>
            Specifies the text-indent property using a MudExSize object, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithColumnGap(System.String,System.Boolean)">
            <summary>
            Specifies the column-gap property using a string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithColumnGap(System.Double,MudBlazor.Extensions.Core.CssUnit,System.Boolean)">
            <summary>
            Specifies the column-gap property using a double value and a CssUnit, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithColumnGap(MudBlazor.Extensions.Core.MudExSize{System.Double},System.Boolean)">
            <summary>
            Specifies the column-gap property using a MudExSize object, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithColumnWidth(System.String,System.Boolean)">
            <summary>
            Specifies the column-width property using a string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithColumnWidth(System.Double,MudBlazor.Extensions.Core.CssUnit,System.Boolean)">
            <summary>
            Specifies the column-width property using a double value and a CssUnit, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithColumnWidth(MudBlazor.Extensions.Core.MudExSize{System.Double},System.Boolean)">
            <summary>
            Specifies the column-width property using a MudExSize object, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithTop(System.Double,MudBlazor.Extensions.Core.CssUnit,System.Boolean)">
            <summary>
            Specifies the top property using a double value and a CssUnit, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithTop(MudBlazor.Extensions.Core.MudExSize{System.Double},System.Boolean)">
            <summary>
            Specifies the top property using a MudExSize object, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithRight(System.Double,MudBlazor.Extensions.Core.CssUnit,System.Boolean)">
            <summary>
            Specifies the right property using a double value and a CssUnit, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithRight(MudBlazor.Extensions.Core.MudExSize{System.Double},System.Boolean)">
            <summary>
            Specifies the right property using a MudExSize object, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithBottom(System.Double,MudBlazor.Extensions.Core.CssUnit,System.Boolean)">
            <summary>
            Specifies the bottom property using a double value and a CssUnit, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithBottom(MudBlazor.Extensions.Core.MudExSize{System.Double},System.Boolean)">
            <summary>
            Specifies the bottom property using a MudExSize object, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithLeft(System.Double,MudBlazor.Extensions.Core.CssUnit,System.Boolean)">
            <summary>
            Specifies the left property using a double value and a CssUnit, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithLeft(MudBlazor.Extensions.Core.MudExSize{System.Double},System.Boolean)">
            <summary>
            Specifies the left property using a MudExSize object, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithTranslate(System.String,System.Boolean)">
            <summary>
            Specifies the translation property using a string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithTranslate(System.Double,MudBlazor.Extensions.Core.CssUnit,System.Boolean)">
            <summary>
            Specifies the translation property using a double value and a CssUnit, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithTranslate(MudBlazor.Extensions.Core.MudExSize{System.Double},System.Boolean)">
            <summary>
            Specifies the translation property using a MudExSize object, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithTranslateX(System.String,System.Boolean)">
            <summary>
            Specifies the translateX property using a string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithTranslateX(System.Double,MudBlazor.Extensions.Core.CssUnit,System.Boolean)">
            <summary>
            Specifies the translateX property using a double value and a CssUnit, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithTranslateX(MudBlazor.Extensions.Core.MudExSize{System.Double},System.Boolean)">
            <summary>
            Specifies the translateX property using a MudExSize object, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithTranslateY(System.String,System.Boolean)">
            <summary>
            Specifies the translateY property using a string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithTranslateY(System.Double,MudBlazor.Extensions.Core.CssUnit,System.Boolean)">
            <summary>
            Specifies the translateY property using a double value and a CssUnit, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithTranslateY(MudBlazor.Extensions.Core.MudExSize{System.Double},System.Boolean)">
            <summary>
            Specifies the translateY property using a MudExSize object, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithTranslateZ(System.String,System.Boolean)">
            <summary>
            Specifies the translateZ property using a string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithTranslateZ(System.Double,MudBlazor.Extensions.Core.CssUnit,System.Boolean)">
            <summary>
            Specifies the translateZ property using a double value and a CssUnit, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithTranslateZ(MudBlazor.Extensions.Core.MudExSize{System.Double},System.Boolean)">
            <summary>
            Specifies the translateZ property using a MudExSize object, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithTranslate3d(System.String,System.Boolean)">
            <summary>
            Specifies the 3d translation property using a string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithRotate(System.String,System.Boolean)">
            <summary>
            Specifies the rotate property using a string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithRotate(System.Double,MudBlazor.Extensions.Core.CssUnit,System.Boolean)">
            <summary>
            Specifies the rotate property using a double value and a CssUnit, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithRotate(MudBlazor.Extensions.Core.MudExSize{System.Double},System.Boolean)">
            <summary>
            Specifies the rotate property using a MudExSize object, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithRotateX(System.String,System.Boolean)">
            <summary>
            Specifies the rotateX property using a string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithRotateX(System.Double,MudBlazor.Extensions.Core.CssUnit,System.Boolean)">
            <summary>
            Specifies the rotateX property using a double value and a CssUnit, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithRotateX(MudBlazor.Extensions.Core.MudExSize{System.Double},System.Boolean)">
            <summary>
            Specifies the rotateX property using a MudExSize object, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithRotateY(System.String,System.Boolean)">
            <summary>
            Specifies the rotateY property using a string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithRotateY(System.Double,MudBlazor.Extensions.Core.CssUnit,System.Boolean)">
            <summary>
            Specifies the rotateY property using a double value and a CssUnit, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithRotateY(MudBlazor.Extensions.Core.MudExSize{System.Double},System.Boolean)">
            <summary>
            Specifies the rotateY property using a MudExSize object, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithRotateZ(System.String,System.Boolean)">
            <summary>
            Specifies the rotateZ property using a string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithRotateZ(System.Double,MudBlazor.Extensions.Core.CssUnit,System.Boolean)">
            <summary>
            Specifies the rotateZ property using a double value and a CssUnit, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithRotateZ(MudBlazor.Extensions.Core.MudExSize{System.Double},System.Boolean)">
            <summary>
            Specifies the rotateZ property using a MudExSize object, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithScale(System.String,System.Boolean)">
            <summary>
            Specifies the scale property using a string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithScale(System.Double,System.Boolean)">
            <summary>
            Specifies the scale property using a double value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithScaleX(System.String,System.Boolean)">
            <summary>
            Specifies the scaleX property using a string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithScaleX(System.Double,System.Boolean)">
            <summary>
            Specifies the scaleX property using a double value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithScaleY(System.String,System.Boolean)">
            <summary>
            Specifies the scaleY property using a string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithScaleY(System.Double,System.Boolean)">
            <summary>
            Specifies the scaleY property using a double value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithScaleZ(System.String,System.Boolean)">
            <summary>
            Specifies the scaleZ property using a string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithScaleZ(System.Double,System.Boolean)">
            <summary>
            Specifies the scaleZ property using a double value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithScale3d(System.String,System.Boolean)">
            <summary>
            Specifies the scale 3d property using a string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithScale3d(System.Double,System.Boolean)">
            <summary>
            Specifies the scale 3d property using a double value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithSkew(System.String,System.Boolean)">
            <summary>
            Specifies the skew property using a string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithSkew(System.Double,MudBlazor.Extensions.Core.CssUnit,System.Boolean)">
            <summary>
            Specifies the skew property using a double value and a CssUnit, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithSkew(MudBlazor.Extensions.Core.MudExSize{System.Double},System.Boolean)">
            <summary>
            Specifies the skew property using a MudExSize object, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithSkewX(System.String,System.Boolean)">
            <summary>
            Specifies the skewX property using a string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithSkewX(System.Double,MudBlazor.Extensions.Core.CssUnit,System.Boolean)">
            <summary>
            Specifies the skewX property using a double value and a CssUnit, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithSkewX(MudBlazor.Extensions.Core.MudExSize{System.Double},System.Boolean)">
            <summary>
            Specifies the skewX property using a MudExSize object, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithSkewY(System.String,System.Boolean)">
            <summary>
            Specifies the skewY property using a string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithSkewY(System.Double,MudBlazor.Extensions.Core.CssUnit,System.Boolean)">
            <summary>
            Specifies the skewY property using a double value and a CssUnit, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithSkewY(MudBlazor.Extensions.Core.MudExSize{System.Double},System.Boolean)">
            <summary>
            Specifies the skewY property using a MudExSize object, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithPerspective(System.String,System.Boolean)">
            <summary>
            Specifies the perspective property using a string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithPerspective(System.Double,MudBlazor.Extensions.Core.CssUnit,System.Boolean)">
            <summary>
            Specifies the perspective property using a double value and a CssUnit, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithPerspective(MudBlazor.Extensions.Core.MudExSize{System.Double},System.Boolean)">
            <summary>
            Specifies the perspective property using a MudExSize object, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithFontFamily(System.String,System.Boolean)">
            <summary>
            Specifies the font-family property using a string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithFontStyle(MudBlazor.Extensions.Core.Css.FontStyle,System.Boolean)">
            <summary>
            Specifies the font-style property using a FontStyle enum value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithFontStyle(System.String,System.Boolean)">
            <summary>
            Specifies the font-style property using a string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithTextJustify(System.String,System.Boolean)">
            <summary>
            Specifies the text-justify property using a string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithBackgroundPosition(System.String,System.Boolean)">
            <summary>
            Specifies the background-position property using a string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithBackgroundRepeat(System.String,System.Boolean)">
            <summary>
            Specifies the background-repeat property using a string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithBorder(MudBlazor.Extensions.Core.MudExSize{System.Double},MudBlazor.Extensions.Core.Css.BorderStyle,MudBlazor.Extensions.Core.MudExColor,System.Boolean)">
            <summary>
            Specifies the border-width, border-style and border-color properties using a MudExSize object, BorderStyle enum value and MudExColor object, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithBorder(MudBlazor.Extensions.Core.MudExSize{System.Double},MudBlazor.Extensions.Core.Css.BorderStyle,MudBlazor.Extensions.Core.MudExColor)">
            <summary>
            Specifies the border-width, border-style and border-color properties using a MudExSize object, BorderStyle enum value and MudExColor object.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithBorder(System.String,System.Boolean)">
            <summary>
            Specifies the border property using a string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithoutBorder(System.Boolean)">
            <summary>
            Sets border to none.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithBorderRadius(System.String,System.Boolean)">
            <summary>
            Specifies the border-radius property using a string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithBorderRadius(System.Double,MudBlazor.Extensions.Core.CssUnit,System.Boolean)">
            <summary>
            Specifies the border-radius property using a double value and a CssUnit, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithBorderWidth(System.String,System.Boolean)">
            <summary>
            Specifies the border-width property using a string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithBorderWidth(System.Double,MudBlazor.Extensions.Core.CssUnit,System.Boolean)">
            <summary>
            Specifies the border-width property using a double value and a CssUnit, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithBorderWidth(MudBlazor.Extensions.Core.MudExSize{System.Double},System.Boolean)">
            <summary>
            Specifies the border-width property using a MudExSize value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithBorderTopWidth(System.String,System.Boolean)">
            <summary>
            Specifies the border-top-width property using a string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithBorderTopWidth(System.Double,MudBlazor.Extensions.Core.CssUnit,System.Boolean)">
            <summary>
            Specifies the border-top-width property using a double value and a CssUnit, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithBorderTopWidth(MudBlazor.Extensions.Core.MudExSize{System.Double},System.Boolean)">
            <summary>
            Specifies the border-top-width property using a MudExSize value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithBorderRightWidth(System.String,System.Boolean)">
            <summary>
            Specifies the border-right-width property using a string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithBorderRightWidth(System.Double,MudBlazor.Extensions.Core.CssUnit,System.Boolean)">
            <summary>
            Specifies the border-right-width property using a double value and a CssUnit, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithBorderRightWidth(MudBlazor.Extensions.Core.MudExSize{System.Double},System.Boolean)">
            <summary>
            Specifies the border-right-width property using a MudExSize value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithBorderBottomWidth(System.String,System.Boolean)">
            <summary>
            Specifies the border-bottom-width property using a string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithBorderBottomWidth(System.Double,MudBlazor.Extensions.Core.CssUnit,System.Boolean)">
            <summary>
            Specifies the border-bottom-width property using a double value and a CssUnit, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithBorderBottomWidth(MudBlazor.Extensions.Core.MudExSize{System.Double},System.Boolean)">
            <summary>
            Specifies the border-bottom-width property using a MudExSize value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithBorderLeftWidth(System.String,System.Boolean)">
            <summary>
            Specifies the border-left-width property using a string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithBorderLeftWidth(System.Double,MudBlazor.Extensions.Core.CssUnit,System.Boolean)">
            <summary>
            Specifies the border-left-width property using a double value and a CssUnit, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithBorderLeftWidth(MudBlazor.Extensions.Core.MudExSize{System.Double},System.Boolean)">
            <summary>
            Specifies the border-left-width property using a MudExSize value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithBorderColor(System.String,System.Boolean)">
            <summary>
            Specifies the border-color property using a string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithBorderColor(MudBlazor.Extensions.Core.MudExColor,System.Boolean)">
            <summary>
            Specifies the border-color property using a MudExColor value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithBorderColor(MudBlazor.Utilities.MudColor,System.Boolean)">
            <summary>
            Specifies the border-color property using a MudColor value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithBorderColor(System.Drawing.Color,System.Boolean)">
            <summary>
            Specifies the border-color property using a System.Drawing.Color value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithBorderColor(MudBlazor.Color,System.Boolean)">
            <summary>
            Specifies the border-color property using a Color value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithBorderStyle(MudBlazor.Extensions.Core.Css.BorderStyle,System.Boolean)">
            <summary>
            Specifies the border-style property using a BorderStyle enum value, if the 'when' condition is true. Converts the enum to a string.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithBorderStyle(System.String,System.Boolean)">
            <summary>
            Specifies the border-style property using a string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithOutline(MudBlazor.Extensions.Core.MudExSize{System.Double},MudBlazor.Extensions.Core.Css.BorderStyle,MudBlazor.Extensions.Core.MudExColor,System.Boolean)">
            <summary>
            Specifies the outline property using a string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithOutline(MudBlazor.Extensions.Core.MudExSize{System.Double},MudBlazor.Extensions.Core.Css.BorderStyle,MudBlazor.Extensions.Core.MudExColor)">
            <summary>
            Specifies the outline property using a string value, if the 'when' condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithOutlineRadius(System.String,System.Boolean)">
            <summary>
            Specifies the outline radius of an element.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithOutlineWidth(System.String,System.Boolean)">
            <summary>
            Specifies the outline width of an element.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithOutlineTopWidth(System.String,System.Boolean)">
            <summary>
            Specifies the width of the top outline of an element.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithOutlineRightWidth(System.String,System.Boolean)">
            <summary>
            Specifies the width of the right outline of an element.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithOutlineBottomWidth(System.String,System.Boolean)">
            <summary>
            Specifies the width of the bottom outline of an element.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithOutlineLeftWidth(System.String,System.Boolean)">
            <summary>
            Specifies the width of the left outline of an element.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithOutlineColor(System.String,System.Boolean)">
            <summary>
            Specifies the color of the outline of an element.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithOutlineStyle(System.String,System.Boolean)">
            <summary>
            Specifies the style of the outline of an element.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithFloat(System.String,System.Boolean)">
            <summary>
            Specifies how an element should float.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithFloat(MudBlazor.Extensions.Core.Css.Float,System.Boolean)">
            <summary>
            Specifies how an element should float.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithClear(System.String,System.Boolean)">
            <summary>
            Specifies which sides of an element other floating elements are not allowed.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithClear(MudBlazor.Extensions.Core.Css.Clear,System.Boolean)">
            <summary>
            Specifies which sides of an element other floating elements are not allowed.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithOverflowX(System.String,System.Boolean)">
            <summary>
            Specifies whether to clip content, render scrollbars or just display overflow content of an element, for x-axis.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithOverflowX(MudBlazor.Extensions.Core.Css.Overflow,System.Boolean)">
            <summary>
            Specifies whether to clip content, render scrollbars or just display overflow content of an element, for x-axis.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithOverflowY(System.String,System.Boolean)">
            <summary>
            Specifies whether to clip content, render scrollbars or just display overflow content of an element, for y-axis.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithOverflowY(MudBlazor.Extensions.Core.Css.Overflow,System.Boolean)">
            <summary>
            Specifies whether to clip content, render scrollbars or just display overflow content of an element, for y-axis.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithDirection(System.String,System.Boolean)">
            <summary>
            Specifies the text direction/writing direction within a block-level element.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithDirection(MudBlazor.Direction,System.Boolean)">
            <summary>
            Specifies the text direction/writing direction within a block-level element.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithColumns(System.String,System.Boolean)">
            <summary>
            Specifies the column width and column count of an element.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithColumnCount(System.Int32,System.Boolean)">
            <summary>
            Specifies the number of columns an element should be divided into.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithColumnFill(System.String,System.Boolean)">
            <summary>
            Specifies how to fill columns.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithColumnRule(System.String,System.Boolean)">
            <summary>
            Specifies the width, style, and color of the rule between columns.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithColumnSpan(System.String,System.Boolean)">
            <summary>
            Specifies how many columns an element should span across.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithGap(System.String,System.Boolean)">
            <summary>
            Specifies the size of the gap between columns.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithOutlineRadius(System.Double,MudBlazor.Extensions.Core.CssUnit,System.Boolean)">
            <summary>
            Specifies the 'outline-radius' CSS property with a double value and CSS unit.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithOutlineWidth(System.Double,MudBlazor.Extensions.Core.CssUnit,System.Boolean)">
            <summary>
            Specifies the 'outline-width' CSS property with a double value and CSS unit.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithOutlineWidth(MudBlazor.Extensions.Core.MudExSize{System.Double},System.Boolean)">
            <summary>
            Specifies the 'outline-width' CSS property with a size.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithOutlineStyle(MudBlazor.Extensions.Core.Css.BorderStyle,System.Boolean)">
            <summary>
            Specifies the 'outline-style' CSS property using a BorderStyle enum.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithOutlineTopWidth(System.Double,MudBlazor.Extensions.Core.CssUnit,System.Boolean)">
            <summary>
            Specifies the 'outline-top-width' CSS property with a double value and CSS unit.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithOutlineTopWidth(MudBlazor.Extensions.Core.MudExSize{System.Double},System.Boolean)">
            <summary>
            Specifies the 'outline-top-width' CSS property with a size.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithOutlineColor(MudBlazor.Extensions.Core.MudExColor,System.Boolean)">
            <summary>
            Specifies the 'outline-color' CSS property with MudExColor.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithOutlineColor(MudBlazor.Utilities.MudColor,System.Boolean)">
            <summary>
            Specifies the 'outline-color' CSS property with MudColor.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithOutlineColor(System.Drawing.Color,System.Boolean)">
            <summary>
            Specifies the 'outline-color' CSS property with System.Drawing.Color.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithOutlineColor(MudBlazor.Color,System.Boolean)">
            <summary>
            Specifies the 'outline-color' CSS property with Color.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithOutlineRightWidth(System.Double,MudBlazor.Extensions.Core.CssUnit,System.Boolean)">
            <summary>
            Specifies the 'outline-right-width' CSS property with a double value and CSS unit.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithOutlineRightWidth(MudBlazor.Extensions.Core.MudExSize{System.Double},System.Boolean)">
            <summary>
            Specifies the 'outline-right-width' CSS property with a size.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithOutlineBottomWidth(System.Double,MudBlazor.Extensions.Core.CssUnit,System.Boolean)">
            <summary>
            Specifies the 'outline-bottom-width' CSS property with a double value and CSS unit.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithOutlineBottomWidth(MudBlazor.Extensions.Core.MudExSize{System.Double},System.Boolean)">
            <summary>
            Specifies the 'outline-bottom-width' CSS property with a size.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithOutlineLeftWidth(System.Double,MudBlazor.Extensions.Core.CssUnit,System.Boolean)">
            <summary>
            Specifies the 'outline-left-width' CSS property with a double value and CSS unit.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithOutlineLeftWidth(MudBlazor.Extensions.Core.MudExSize{System.Double},System.Boolean)">
            <summary>
            Specifies the 'outline-left-width' CSS property with a size.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithColorForVariant(MudBlazor.Variant,MudBlazor.Extensions.Core.MudExColor,System.Boolean)">
            <summary>
            Sets color or background color based on variant
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithAnimation(System.String,System.Boolean)">
            <summary>
            Sets the animation style using a custom string.
            </summary>
            <param name="animationStyle">The custom animation style as a string.</param>
            <param name="when">Condition for applying the animation.</param>
            <returns>The modified MudExStyleBuilder object.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithAnimationStyle(MudBlazor.Extensions.Options.AnimationType,System.Nullable{System.TimeSpan},System.Nullable{MudBlazor.Extensions.Options.AnimationDirection},MudBlazor.Extensions.Options.AnimationTimingFunction,System.Nullable{MudBlazor.DialogPosition},MudBlazor.Extensions.Options.AnimationIteration,System.Boolean)">
            <summary>
            Sets the animation style using multiple optional parameters.
            </summary>
            <param name="type">The type of the animation.</param>
            <param name="duration">The duration of the animation.</param>
            <param name="direction">The direction of the animation.</param>
            <param name="animationTimingFunction">The timing function for the animation.</param>
            <param name="targetPosition">The target position for the dialog.</param>
            <param name="when">Condition for applying the animation.</param>
            <returns>The modified MudExStyleBuilder object.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithAnimation(MudBlazor.Extensions.Options.AnimationType,MudBlazor.Extensions.Options.AnimationIteration,System.Boolean)">
            <summary>
            Sets the animation style using just the type of the animation.
            </summary>
            <param name="type">The type of the animation.</param>
            <param name="when">Condition for applying the animation.</param>
            <returns>The modified MudExStyleBuilder object.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithAnimation(MudBlazor.Extensions.Options.AnimationType,System.TimeSpan,MudBlazor.Extensions.Options.AnimationIteration,System.Boolean)">
            <summary>
            Sets the animation style using the type and duration of the animation.
            </summary>
            <param name="type">The type of the animation.</param>
            <param name="duration">The duration of the animation.</param>
            <param name="when">Condition for applying the animation.</param>
            <returns>The modified MudExStyleBuilder object.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithAnimation(MudBlazor.Extensions.Options.AnimationType,System.TimeSpan,MudBlazor.Extensions.Options.AnimationDirection,MudBlazor.Extensions.Options.AnimationIteration,System.Boolean)">
            <summary>
            Sets the animation style using the type, duration, and direction of the animation.
            </summary>
            <param name="type">The type of the animation.</param>
            <param name="duration">The duration of the animation.</param>
            <param name="direction">The direction of the animation.</param>
            <param name="when">Condition for applying the animation.</param>
            <returns>The modified MudExStyleBuilder object.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithAnimation(MudBlazor.Extensions.Options.AnimationType,System.TimeSpan,MudBlazor.Extensions.Options.AnimationDirection,MudBlazor.Extensions.Options.AnimationTimingFunction,MudBlazor.Extensions.Options.AnimationIteration,System.Boolean)">
            <summary>
            Sets the animation style using the type, duration, direction, and timing function of the animation.
            </summary>
            <param name="type">The type of the animation.</param>
            <param name="duration">The duration of the animation.</param>
            <param name="direction">The direction of the animation.</param>
            <param name="animationTimingFunction">The timing function for the animation.</param>
            <param name="when">Condition for applying the animation.</param>
            <returns>The modified MudExStyleBuilder object.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithAnimatedGradientBackground(MudBlazor.Extensions.Core.MudExColor[],System.Boolean)">
            <summary>
            Sets the animation style with a gradient background using the type, duration, direction, timing function, and target position of the animation.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithAnimatedGradientBorder(MudBlazor.Extensions.Core.MudExSize{System.Double},MudBlazor.Extensions.Core.MudExColor,MudBlazor.Extensions.Core.MudExColor[],System.Boolean)">
            <summary>
            With animated gradient border
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithAnimatedGradientBackground(MudBlazor.MudTheme,System.Boolean,System.Boolean)">
            <summary>
            With animated gradient background
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithAnimatedGradientBackground(MudBlazor.MudTheme,System.Boolean)">
            <summary>
            With animated gradient background
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithAnimatedGradientBackground(MudBlazor.Palette,System.Boolean)">
            <summary>
            With animated gradient background
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithAnimatedGradientBorder(MudBlazor.Extensions.Core.MudExSize{System.Double},MudBlazor.Palette,System.Boolean)">
            <summary>
            With animated gradient border based on palette
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithAnimatedGradientBorder(MudBlazor.Extensions.Core.MudExSize{System.Double},MudBlazor.MudTheme,System.Boolean,System.Boolean)">
            <summary>
            With animated gradient border based on theme
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithSkeletonLoadingBorder(MudBlazor.Extensions.Core.MudExSize{System.Double},System.Boolean)">
            <summary>
            With animated gradient border that looks like a skeleton loading wave
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithAnimatedGradientBackground(MudBlazor.Extensions.Core.MudExColor[],System.TimeSpan,System.Boolean)">
            <summary>
            Sets the animation style with a gradient background using the type, duration, direction, timing function, and target position of the animation.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithAnimatedGradientBorder(MudBlazor.Extensions.Core.MudExSize{System.Double},MudBlazor.Extensions.Core.MudExColor,MudBlazor.Extensions.Core.MudExColor[],System.TimeSpan,System.Boolean)">
            <summary>
            With animated gradient border
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithAnimatedGradientBackground(MudBlazor.MudTheme,System.Boolean,System.TimeSpan,System.Boolean)">
            <summary>
            With animated gradient background
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithAnimatedGradientBackground(MudBlazor.MudTheme,System.TimeSpan,System.Boolean)">
            <summary>
            With animated gradient background
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithAnimatedGradientBackground(MudBlazor.Palette,System.TimeSpan,System.Boolean)">
            <summary>
            With animated gradient background
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithAnimatedGradientBorder(MudBlazor.Extensions.Core.MudExSize{System.Double},MudBlazor.Palette,System.TimeSpan,System.Boolean)">
            <summary>
            With animated gradient border based on palette
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithAnimatedGradientBorder(MudBlazor.Extensions.Core.MudExSize{System.Double},MudBlazor.MudTheme,System.Boolean,System.TimeSpan,System.Boolean)">
            <summary>
            With animated gradient border based on theme
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithSkeletonLoadingBorder(MudBlazor.Extensions.Core.MudExSize{System.Double},System.TimeSpan,System.Boolean)">
            <summary>
            With animated gradient border that looks like a skeleton loading wave
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.GetColorsFromPalette(MudBlazor.Palette)">
            <summary>
            Returns an array of colors from a palette
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithAnimatedConicGradientBorderedBackground(MudBlazor.Extensions.Core.MudExSize{System.Double},MudBlazor.Extensions.Core.MudExColor[],MudBlazor.Extensions.Core.MudExColor[],System.Boolean)">
            <summary>
            Add a background image with a conic gradient and a border with a conic gradient
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.WithAnimatedConicGradientBorderedBackground(MudBlazor.Extensions.Core.MudExSize{System.Double},MudBlazor.Extensions.Core.MudExColor[],MudBlazor.Extensions.Core.MudExColor[],System.TimeSpan,System.Boolean)">
            <summary>
            Add a background image with a conic gradient and a border with a conic gradient
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.AsImportant(System.Boolean)">
            <summary>
            Adds an !important to last added style
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.With(System.String,System.String,System.Func{System.Boolean})">
            <summary>
            Adds a style to the builder if the condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.With(System.String,System.String,System.Boolean)">
            <summary>
            Adds a style to the builder if the condition is true.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.AddRaw(System.String,System.Boolean)">
            <summary>
            Adds a ra style string is condition is true
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.AsCssBuilderAsync">
            <summary>
            Creates a class for this style and returns a MudExCssBuilder with this class added
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.BuildAsClassRuleAsync(System.String,Microsoft.JSInterop.IJSRuntime)">
            <summary>
            Creates a class for this style and returns the name of the created class
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.RemoveClassRuleAsync(System.String,Microsoft.JSInterop.IJSRuntime)">
            <summary>
            Removes a class that is temporary created
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.DisposeAsync">
            <summary>
            Disposes this instance
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.Build">
            <summary>
            Builds the css style string
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.Clear">
            <summary>
            Removes all styles
            </summary>    
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.ToObject``1">
            <summary>
            Converts this style to an object
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.ToString">
            <summary>
            Returns the css style string
            </summary>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.op_Explicit(MudBlazor.Extensions.Helper.MudExStyleBuilder)~System.String">
            <summary>
            Explicit conversion to string
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExStyleBuilder.op_Explicit(System.String)~MudBlazor.Extensions.Helper.MudExStyleBuilder">
            <summary>
            Explicit conversion from string
            </summary>
            <param name="styles"></param>
        </member>
        <member name="P:MudBlazor.Extensions.Helper.MudExStyleBuilder.Style">
            <summary>
            The css style string
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Helper.MudExSvg">
            <summary>
            Static Utility class for SVG
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExSvg.RotateSvg(System.String,System.Single)">
            <summary>
            Rotates an SVG by the specified degrees.
            </summary>
            <param name="svgContent">The SVG content to rotate.</param>
            <param name="degrees">The degrees to rotate the SVG.</param>
            <returns>A new SVG string with the rotation applied.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExSvg.RemoveFillColors(System.String)">
            <summary>
            Removes the fill colors from an svg string
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExSvg.CombineIconsHorizontal(System.String,System.String[])">
            <summary>
            Combines SVG icons horizontally
            </summary>
            <param name="image">The first SVG image</param>
            <param name="other">An array of other SVG images to combine with the first one</param>
            <returns>A new SVG with the combined images aligned horizontally</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExSvg.CombineIconsVertical(System.String,System.String[])">
            <summary>
            Combines SVG icons vertically
            </summary>
            <param name="image">The first SVG image</param>
            <param name="other">An array of other SVG images to combine with the first one</param>
            <returns>A new SVG with the combined images aligned horizontally</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExSvg.CombineIconsCentered(System.String,System.String[])">
            <summary>
            Combines SVG icons centered overlapped
            </summary>
            <param name="image">The first SVG image</param>
            <param name="other">An array of other SVG images to combine with the first one</param>
            <returns>A new SVG with the combined images aligned horizontally</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExSvg.CombineIcons(System.Int32,System.Int32,System.String,System.String,System.String[])">
            <summary>
            Combines SVG icons.
            </summary>
            <param name="marginLeftRight">The margin applied to the left and right of the combined images.</param>
            <param name="marginTopBottom">The margin applied to the top and bottom of the combined images.</param>
            <param name="originalViewBox">The original viewBox of the SVG.</param>
            <param name="image">The first SVG image.</param>
            <param name="other">An array of other SVG images to combine with the first one.</param>
            <returns>A new SVG with the combined images.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExSvg.SvgPropertyNameForValue(System.String,System.Type,System.Type[])">
            <summary>
            Returns the fully-qualified name of the constant in <see cref="T:MudBlazor.Icons"/> or whatever owner type that has the specified value.
            </summary>
            <param name="value">The value of the SVG constant for which to get a name.</param>
            <param name="ownerType">Type for search in</param>
            <param name="ownerTypes">Other types for search in</param>
            <returns>A string containing the fully-qualified name of the icon constant that matches the specified value.</returns>    
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExSvg.SvgPropertyNameForValue(System.String,System.Type[])">
            <summary>
            Returns the fully-qualified name of the constant in <see cref="T:MudBlazor.Icons"/> or whatever owner type that has the specified value.
            </summary>
            <param name="value">The value of the SVG constant for which to get a name.</param>
            <param name="allOwnerTypes">Owner types for search in</param>
            <returns>A string containing the fully-qualified name of the icon constant that matches the specified value.</returns>    
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExSvg.SvgPropertyNameForValue(System.String)">
            <summary>
            Returns the fully-qualified name of the constant in <see cref="T:MudBlazor.Icons"/> that has the specified value.
            </summary>
            <param name="value">The value of the SVG constant for which to get a name.</param>
            <returns>A string containing the fully-qualified name of the icon constant that matches the specified value.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExSvg.SvgPropertyValueForName(System.String)">
            <summary>
            Returns the value of the constant in <see cref="T:MudBlazor.Icons"/> that has the specified name.
            </summary>
            <param name="fullName">Name like MudBlazor.Icons.Material.Outlined.Search</param>
            <returns>The value</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExSvg.SvgPropertyValueForName(System.String,System.Type[])">
            <summary>
            Returns the value of the constant in <see cref="T:MudBlazor.Icons"/> that has the specified name.
            </summary>
            <param name="fullName">Name like MudBlazor.Icons.Material.Outlined.Search</param>
            <param name="allOwnerTypes">Owner types where to search in</param>
            <returns>The value</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExSvg.SvgPropertyValueForName(System.String,System.Type,System.Type[])">
            <summary>
            Returns the value of the constant in <see cref="T:MudBlazor.Icons"/> that has the specified name.
            </summary>
            <param name="fullName">Name like MudBlazor.Icons.Material.Outlined.Search</param>
            <param name="ownerType">Owner type to search in</param>
            <param name="ownerTypes">Other types where to search in</param>
            <returns>The value</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExSvg.GetAllSvgProperties">
            <summary>
            Returns all properties of <see cref="T:MudBlazor.Icons"/> or whatever owner type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExSvg.GetAllSvgProperties(System.Type,System.Type[])">
            <summary>
            Returns all properties of <see cref="T:MudBlazor.Icons"/> or whatever owner type.
            </summary>
            <param name="ownerType"></param>
            <param name="ownerTypes"></param>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExSvg.GetAllSvgProperties(System.Type[])">
            <summary>
            Returns all properties of <see cref="T:MudBlazor.Icons"/> or whatever owner type.
            </summary>
            <param name="ownerTypes"></param>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExSvg.CombineSliced(System.String,System.String,System.Double,System.Double,MudBlazor.Extensions.Helper.SliceDirection)">
            <summary>
            Combines two SVGs sliced either horizontally, vertically, or diagonally.
            </summary>
            <param name="svg1">The first SVG to slice and combine.</param>
            <param name="svg2">The second SVG to slice and combine.</param>
            <param name="width">The width of the output SVG.</param>
            <param name="height">The height of the output SVG.</param>
            <param name="sliceDirection">The direction to slice the SVGs.</param>
            <returns>A new SVG that contains both original SVGs sliced either horizontally, vertically, or diagonally.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExSvg.ApplicationImage(MudBlazor.MudTheme,MudBlazor.Extensions.Core.MudExDimension,MudBlazor.Extensions.Helper.SliceDirection)">
            <summary>
            Returns a sliced application image as preview for given Theme, with the specified dimensions and slice direction.
            </summary>
            <param name="theme">The color scheme to use for the image.</param>
            <param name="size">The dimensions of the output image.</param>
            <param name="sliceDirection">The direction to slice the image.</param>
            <returns>A new SVG that displays an application image sliced either horizontally, vertically, or diagonally.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExSvg.ApplicationImage(MudBlazor.MudTheme,MudBlazor.Extensions.Core.MudExDimension)">
            <summary>
            Returns a default sliced application image as preview for given Theme.
            </summary>
            <param name="theme">The color scheme to use for the image.</param>
            <param name="size">The dimensions of the output image.</param>
            <returns>A new SVG that displays an application image sliced diagonally.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExSvg.ApplicationImage(MudBlazor.MudTheme,System.Boolean,MudBlazor.Extensions.Core.MudExDimension)">
            <summary>
            Returns a default application image as preview for given Theme in dark or light.
            </summary>
            <param name="theme">The color scheme to use for the image.</param>
            <param name="dark">Whether to use the dark color scheme for the image.</param>
            <param name="size">The dimensions of the output image.</param>
            <returns>A new SVG that displays an application image sliced either horizontally, vertically, or diagonally.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExSvg.ApplicationImage(MudBlazor.MudTheme,System.Boolean,System.String,System.String)">
            <summary>
             Returns a default application image as preview for given Theme in dark or light.
            </summary>
            <param name="theme">The color scheme to use for the image.</param>
            <param name="dark">Whether to use the dark color scheme for the image.</param>
            <param name="width">The width of the output image.</param>
            <param name="height">The height of the output image.</param>
            <returns>A new SVG that displays an application image sliced diagonally.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExSvg.ApplicationImage(MudBlazor.Palette,MudBlazor.Extensions.Core.MudExDimension)">
            <summary>
             Returns a default application image as with given color palette.
            </summary>    
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExSvg.ApplicationImage(MudBlazor.Palette,System.String,System.String)">
            <summary>
             Returns a default application image as with given color palette.
            </summary>    
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExSvg.ApplicationImage(MudBlazor.PaletteLight,MudBlazor.Extensions.Core.MudExDimension)">
            <summary>
             Returns a default application image as with given color palette.
            </summary>    
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExSvg.ApplicationImage(MudBlazor.PaletteDark,MudBlazor.Extensions.Core.MudExDimension)">
            <summary>
             Returns a default application image as with given color palette.
            </summary>    
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExSvg.ApplicationImage(MudBlazor.Utilities.MudColor,MudBlazor.Utilities.MudColor,MudBlazor.Utilities.MudColor,MudBlazor.Utilities.MudColor,System.String)">
            <summary>
             Returns a default application image with given colors.
            </summary>    
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExSvg.ApplicationImage(MudBlazor.Utilities.MudColor,MudBlazor.Utilities.MudColor,MudBlazor.Utilities.MudColor,MudBlazor.Utilities.MudColor[],System.String)">
            <summary>
             Returns a default application image with given colors.
            </summary>    
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExSvg.ApplicationImage(MudBlazor.Utilities.MudColor,MudBlazor.Utilities.MudColor,MudBlazor.Utilities.MudColor,MudBlazor.Utilities.MudColor,MudBlazor.Extensions.Core.MudExDimension)">
            <summary>
             Returns a default application image with given colors.
            </summary>        
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExSvg.ApplicationImage(MudBlazor.Utilities.MudColor,MudBlazor.Utilities.MudColor,MudBlazor.Utilities.MudColor,MudBlazor.Utilities.MudColor[],MudBlazor.Extensions.Core.MudExDimension)">
            <summary>
             Returns a default application image with given colors.
            </summary>        
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExSvg.ApplicationImage(MudBlazor.Utilities.MudColor,MudBlazor.Utilities.MudColor,MudBlazor.Utilities.MudColor,MudBlazor.Utilities.MudColor[],System.String,System.String)">
            <summary>
             Returns a default application image with given colors.
            </summary>    
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExSvg.ApplicationImage(System.String,System.String,System.String,System.String,System.String)">
            <summary>
             Returns a default application image with given colors.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExSvg.ApplicationImage(System.String,System.String,System.String,System.String[],System.String)">
            <summary>
             Returns a default application image with given colors.
            </summary>        
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExSvg.ApplicationImage(System.String,System.String,System.String,System.String,MudBlazor.Extensions.Core.MudExDimension)">
            <summary>
             Returns a default application image with given colors.
            </summary>    
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExSvg.ApplicationImage(System.String,System.String,System.String,System.String[],MudBlazor.Extensions.Core.MudExDimension)">
            <summary>
             Returns a default application image with given colors.
            </summary>    
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExSvg.ApplicationImage(System.String,System.String,System.String,System.String[],System.String,System.String)">
            <summary>
             Returns a default application image with given colors.
            </summary>    
        </member>
        <member name="T:MudBlazor.Extensions.Helper.SliceDirection">
            <summary>
            Enum to specify svg slice direction
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Helper.SliceDirection.Diagonal">
            <summary>
            Diagonal slice
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Helper.SliceDirection.Vertical">
            <summary>
            Vertical slice
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Helper.SliceDirection.Horizontal">
            <summary>
            Horizontal slice
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Helper.MudExThemeHelper">
            <summary>
            Static util MudExThemeHelper
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExThemeHelper.ToPaletteDark(MudBlazor.PaletteLight)">
            <summary>
            Convert PaletteLight to PaletteDark
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExThemeHelper.ToPaletteDark(MudBlazor.Palette)">
            <summary>
            Convert PaletteLight to PaletteDark
            </summary>    
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExThemeHelper.ToPaletteLight(MudBlazor.PaletteDark)">
            <summary>
            Convert PaletteDark to PaletteLight
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExThemeHelper.CloneTheme``1(``0)">
            <summary>
            Clones the theme
            </summary>
            <typeparam name="TTheme"></typeparam>
            <param name="theme"></param>
            <returns>Cloned theme with same options</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExThemeHelper.FromJson``1(System.String)">
            <summary>
            Creates a new theme from json
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Helper.MudExThemeHelper.AsJson``1(``0)">
            <summary>
            Converts Theme to json
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.MudDialogButton">
            <summary>
            Represents a custom dialog button within a MudBlazor dialog.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.MudDialogButton.#ctor(Microsoft.JSInterop.DotNetObjectReference{System.Object},System.String)">
            <summary>
            Constructs a new instance of MudDialogButton.
            </summary>
            <param name="callBackReference">A .NET object reference to use as a callback.</param>
            <param name="callbackName">The name of the callback method.</param>
        </member>
        <member name="P:MudBlazor.Extensions.MudDialogButton.CallBackReference">
            <summary>
            Gets the .NET object reference used as a callback.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.MudDialogButton.CallbackName">
            <summary>
            Gets the name of the callback method.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.MudDialogButton.Id">
            <summary>
            Gets or sets the ID of the button.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.MudDialogButton.Icon">
            <summary>
            Gets or sets the SVG icon for the button.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.MudDialogButton.Class">
            <summary>
            Gets or sets the CSS class(es) of the button.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.MudDialogButton.Html">
            <summary>
            Gets or sets the HTML content of the button.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.MudDialogButton.GetHtml(System.Int32)">
            <summary>
            Generates the HTML for the button, taking into account its position.
            </summary>
            <param name="pos">The position of the button.</param>
            <returns>A string containing the generated HTML.</returns>
        </member>
        <member name="T:MudBlazor.Extensions.MudExWebApp">
            <summary>
            MudBlazorExtensionsMiddlewareExtensions
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Options.AnimationIteration">
            <summary>
            Represents the animation timing function.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Options.AnimationIteration.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MudBlazor.Extensions.Options.AnimationIteration"/> class.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Options.AnimationIteration.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MudBlazor.Extensions.Options.AnimationIteration"/> class.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.AnimationIteration.Infinite">
            <summary>
            infinite
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Options.AnimationIteration.op_Implicit(MudBlazor.Extensions.Options.AnimationIteration)~System.String">
            <summary>
            Converts the value of the current AnimationIteration object to its equivalent string representation.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Options.AnimationIteration.op_Implicit(System.String)~MudBlazor.Extensions.Options.AnimationIteration">
            <summary>
            Converts the specified string to its equivalent AnimationIteration representation.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Options.AnimationIteration.op_Implicit(System.Int32)~MudBlazor.Extensions.Options.AnimationIteration">
            <summary>
            Converts the specified string to its equivalent AnimationIteration representation.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Options.AnimationIteration.ToString">
            <summary>
            Returns a string that represents the current timing function.
            </summary>
            <returns>A string that represents the current timing function.</returns>
        </member>
        <member name="T:MudBlazor.Extensions.Options.AnimationTimingFunction">
            <summary>
            Represents the animation timing function.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Options.AnimationTimingFunction.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MudBlazor.Extensions.Options.AnimationTimingFunction"/> class.
            </summary>
            <param name="timingFn">The timing function string.</param>
        </member>
        <member name="F:MudBlazor.Extensions.Options.AnimationTimingFunction.EaseInOut">
            <summary>
            Gets the 'ease-in-out' timing function.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.AnimationTimingFunction.Ease">
            <summary>
            Gets the 'ease' timing function.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.AnimationTimingFunction.EaseIn">
            <summary>
            Gets the 'ease-in' timing function.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.AnimationTimingFunction.EaseOut">
            <summary>
            Gets the 'ease-out' timing function.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.AnimationTimingFunction.Inherit">
            <summary>
            Gets the 'inherit' timing function.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.AnimationTimingFunction.Initial">
            <summary>
            Gets the 'initial' timing function.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.AnimationTimingFunction.Linear">
            <summary>
            Gets the 'linear' timing function.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.AnimationTimingFunction.StepEnd">
            <summary>
            Gets the 'step-end' timing function.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.AnimationTimingFunction.StepStart">
            <summary>
            Gets the 'step-start' timing function.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Options.AnimationTimingFunction.CubicBezier(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a 'cubic-bezier' timing function.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Options.AnimationTimingFunction.Steps(System.Int32,System.String)">
            <summary>
            Creates a 'steps' timing function.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Options.AnimationTimingFunction.op_Implicit(MudBlazor.Extensions.Options.AnimationTimingFunction)~System.String">
            <summary>
            Converts the value of the current AnimationTimingFunction object to its equivalent string representation.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Options.AnimationTimingFunction.op_Implicit(System.String)~MudBlazor.Extensions.Options.AnimationTimingFunction">
            <summary>
            Converts the specified string to its equivalent AnimationTimingFunction representation.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Options.AnimationTimingFunction.ToString">
            <summary>
            Returns a string that represents the current timing function.
            </summary>
            <returns>A string that represents the current timing function.</returns>
        </member>
        <member name="T:MudBlazor.Extensions.Options.AnimationType">
            <summary>
            Animation Type enum specifies all supported animations
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.AnimationType.Default">
            <summary>
            Default animation
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.AnimationType.SlideIn">
            <summary>
            Slide in animation
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.AnimationType.FadeIn">
            <summary>
            Fade in animation
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.AnimationType.Scale">
            <summary>
            Scale animation
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.AnimationType.Slide">
            <summary>
            Slide animation
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.AnimationType.Fade">
            <summary>
            Fade animation
            </summary>        
        </member>
        <member name="F:MudBlazor.Extensions.Options.AnimationType.Perspective3d">
            <summary>
            3D Perspective animation
            </summary>        
        </member>
        <member name="F:MudBlazor.Extensions.Options.AnimationType.LightSpeed">
            <summary>
            Light speed animation
            </summary>        
        </member>
        <member name="F:MudBlazor.Extensions.Options.AnimationType.Zoom">
            <summary>
            Zoom animation
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.AnimationType.JackInTheBox">
            <summary>
            Roll animation
            </summary>        
            <summary>
            Jack in the box animation
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.AnimationType.Hinge">
            <summary>
            Hinge animation
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.AnimationType.Rotate">
            <summary>
            Rotate animation
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.AnimationType.Bounce">
            <summary>
            Bounce animation
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.AnimationType.Back">
            <summary>
            Back animation
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.AnimationType.Jello">
            <summary>
            Jello animation
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.AnimationType.Wobble">
            <summary>
            Wobble animation
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.AnimationType.Tada">
            <summary>
            Tada animation
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.AnimationType.Swing">
            <summary>
            Swing animation
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.AnimationType.HeadShake">
            <summary>
            Head shake animation
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.AnimationType.Shake">
            <summary>
            Shake animation
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.AnimationType.RubberBand">
            <summary>
            Rubber band animation
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.AnimationType.Pulse">
            <summary>
            Pulse animation
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.AnimationType.Flip">
            <summary>
            Flip animation
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.AnimationType.FlipX">
            <summary>
            Flip in X axis animation
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.AnimationType.FlipY">
            <summary>
            Flip in Y axis animation
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Options.AnimationDirection">
            <summary>
            Direction of animation
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.AnimationDirection.In">
            <summary>
            Animation direction inwards
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.AnimationDirection.Out">
            <summary>
            Animation direction outwards
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Options.DialogOptionsEx">
            <summary>
            Extended Dialog Options class, inheriting from DialogOptions and ICloneable.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Options.DialogOptionsEx.SetAsDefaultDialogOptions">
            <summary>
            Sets the current instance of DialogOptionsEx as the default option for dialogs.
            </summary>
            <returns>A reference to the current instance.</returns>
        </member>
        <member name="P:MudBlazor.Extensions.Options.DialogOptionsEx.Position">
            <summary>
            The location of the dialog.
            </summary>
            <remarks>
            Defaults to <c>null</c>.
            </remarks>
        </member>
        <member name="P:MudBlazor.Extensions.Options.DialogOptionsEx.MaxWidth">
            <summary>
            The maximum allowed width of the dialog.
            </summary>
            <remarks>
            Defaults to <c>null</c>.
            </remarks>
        </member>
        <member name="P:MudBlazor.Extensions.Options.DialogOptionsEx.BackdropClick">
            <summary>
            Allows closing the dialog by clicking outside of the dialog.
            </summary>
            <remarks>
            Defaults to <c>true</c>.
            </remarks>
        </member>
        <member name="P:MudBlazor.Extensions.Options.DialogOptionsEx.CloseOnEscapeKey">
            <summary>
            Allows closing the dialog by pressing the Escape key.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Options.DialogOptionsEx.NoHeader">
            <summary>
            Hides the dialog header.
            </summary>
            <remarks>
            Defaults to <c>false</c>.
            </remarks>
        </member>
        <member name="P:MudBlazor.Extensions.Options.DialogOptionsEx.CloseButton">
            <summary>
            Shows a close button in the top-right corner of the dialog.
            </summary>
            <remarks>
            Defaults to <c>false</c>.
            </remarks>
        </member>
        <member name="P:MudBlazor.Extensions.Options.DialogOptionsEx.FullScreen">
            <summary>
            Sets the size of the dialog to the entire screen.
            </summary>
            <remarks>
            Defaults to <c>false</c>.
            </remarks>
        </member>
        <member name="P:MudBlazor.Extensions.Options.DialogOptionsEx.FullWidth">
            <summary>
            Sets the width of the dialog to the width of the screen.
            </summary>
            <remarks>
            Defaults to <c>false</c>.
            </remarks>
        </member>
        <member name="P:MudBlazor.Extensions.Options.DialogOptionsEx.BackgroundClass">
            <summary>
            The custom CSS classes to apply to the dialog background.
            </summary>
            <remarks>
            Multiple classes must be separated by spaces.
            </remarks>
        </member>
        <member name="P:MudBlazor.Extensions.Options.DialogOptionsEx.KeepMaxSizeConstraints">
            <summary>
            If true the dialog will keep the max size constraints for resizing defined with <see cref="P:MudBlazor.Extensions.Options.DialogOptionsEx.MaxHeight"/> and <see cref="P:MudBlazor.Extensions.Options.DialogOptionsEx.MaxWidth"/>.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Options.DialogOptionsEx.KeepRelations">
            <summary>
            If true the dialog will keep the relations to the parent component.
            That means sizes and positions will set to values in percentages.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Options.DialogOptionsEx.AnimateClose">
            <summary>
            If true the dialog will be animated on close
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Options.DialogOptionsEx.DialogAppearance">
            <summary>
            The look and feel of the dialog component dialog.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Options.DialogOptionsEx.DialogBackgroundAppearance">
            <summary>
            The look and feel of the dialog background.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Options.DialogOptionsEx.JsRuntime">
            <summary>
            The JavaScript Runtime used to interact with the browser's JavaScript host environment. 
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Options.DialogOptionsEx.Modal">
            <summary>
            A boolean value indicating whether the dialog is modal or not.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Options.DialogOptionsEx.MaximizeButton">
            <summary>
            A nullable boolean value indicating whether the maximize button is available or not.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Options.DialogOptionsEx.MinimizeButton">
            <summary>
            A nullable boolean value indicating whether the minimize button is available or not.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Options.DialogOptionsEx.CustomPosition">
            <summary>
            Here you can set your Own custom position where the dialog should be shown.
            Please notice that this only works when <see cref="P:MudBlazor.Extensions.Options.DialogOptionsEx.ShowAtCursor"/> is false. 
            Please also notice when this is set the <see cref="P:MudBlazor.DialogOptions.Position"/> will be ignored for the position but still used for the animation.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Options.DialogOptionsEx.CustomSize">
            <summary>
            Here you can set your own custom size that the dialog should have.
            Please notice when this is set the <see cref="P:MudBlazor.DialogOptions.MaxWidth"/>, <see cref="P:MudBlazor.Extensions.Options.DialogOptionsEx.MaxHeight"/>, <see cref="P:MudBlazor.Extensions.Options.DialogOptionsEx.FullHeight"/> and <see cref="P:MudBlazor.DialogOptions.FullWidth"/> will be ignored.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Options.DialogOptionsEx.ShowAtCursor">
            <summary>
            A boolean value indicating whether the dialog is shown at the cursor location or not.
            Please notice if this is true <see cref="P:MudBlazor.Extensions.Options.DialogOptionsEx.Position"/> and <see cref="P:MudBlazor.Extensions.Options.DialogOptionsEx.CustomPosition"/> will be ignored.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Options.DialogOptionsEx.CursorPositionOrigin">
            <summary>
            The point on the dialog box where the cursor is placed on showing the dialog box.
            this is only used when <see cref="P:MudBlazor.Extensions.Options.DialogOptionsEx.ShowAtCursor"/> is true.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Options.DialogOptionsEx.Resizeable">
            <summary>
            A boolean value indicating whether the dialog is resizable or not.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Options.DialogOptionsEx.Buttons">
            <summary>
            An array of MudDialogButton.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Options.DialogOptionsEx.CanCloseCallbackName">
            <summary>
            Here you can set a callback that will be called before the dialog is closed.
            Ensure your callback returns a boolean value and has the JsInvokable attribute set.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Options.DialogOptionsEx.CanCloseCallbackReference">
            <summary>
            the .NET object reference where the <see cref="P:MudBlazor.Extensions.Options.DialogOptionsEx.CanCloseCallbackName"/> is located.
            if you don't specify reference the dialog itself will be the reference.Then you need to have the CanCloseCallback Method on your DialogClass
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Options.DialogOptionsEx.DragMode">
            <summary>
            A MudDialogDragMode value indicating the drag mode of the dialog box.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Options.DialogOptionsEx.FullHeight">
            <summary>
            A nullable boolean value indicating whether the dialog full height mode is enabled or not.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Options.DialogOptionsEx.MaxHeight">
            <summary>
            MaxHeight is similar to original MaxWidth
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Options.DialogOptionsEx.DisablePositionMargin">
            <summary>
            A nullable boolean value indicating whether the dialog position margin is disabled or not.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Options.DialogOptionsEx.DisableSizeMarginX">
            <summary>
            A nullable boolean value indicating whether the dialog size margin x-axis is disabled or not.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Options.DialogOptionsEx.DisableSizeMarginY">
            <summary>
            A nullable boolean value indicating whether the dialog size margin y-axis is disabled or not.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Options.DialogOptionsEx.Animation">
            <summary>
            An animation type value indicating the animation effect of the dialog box.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Options.DialogOptionsEx.Animations">
            <summary>
            An array of animation type values indicating the set of animation effects of the dialog box.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Options.DialogOptionsEx.AnimationTimingFunction">
            <summary>
            An animation timing function value indicating the easing function used for the dialog box animation transitions.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Options.DialogOptionsEx.AnimationDuration">
            <summary>
            A time span value indicating the duration of the dialog animation effect.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Options.DialogOptionsEx.AnimationDurationInMs">
            <summary>
            A double value indicating the dialog animation duration in milliseconds.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Options.DialogOptionsEx.CursorPositionOriginName">
            <summary>
            The description string of the cursor position.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Options.DialogOptionsEx.AnimationStyle">
            <summary>
            A css style string indicating the animation effects of the dialog box.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Options.DialogOptionsEx.CloneOptions">
            <summary>
            Method that returns a clone object of the current instance.
            </summary>
            <returns>A cloned instance of the current object.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Options.DialogOptionsEx.Clone">
            <summary>       
            Method that returns a cloned instance of the current object. 
            </summary>
            <returns>A cloned object instance of the current object.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Options.DialogOptionsEx.ConfigureObjectEditMeta(MudBlazor.Extensions.Components.ObjectEdit.Options.ObjectEditMeta{MudBlazor.Extensions.Options.DialogOptionsEx})">
            <summary>
            Recommended default met config to render dialog options in mudex object edit.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Options.DialogOptionsEx.OverriddenDefaultOptions">
            <summary>
            A boolean value indicating whether the default options are overriden.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Options.DialogOptionsEx.DefaultDialogOptions">
            <summary>
            The default dialog options object.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Options.DialogOptionsEx.FileDisplayDialogOptions">
            <summary>
            Dialog options for file display dialog.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Options.DialogOptionsEx.SlideInFromRight">
            <summary>
            Dialog preset to slide in from right.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Options.DialogOptionsEx.SlideInFromLeft">
            <summary>
            Dialog preset to slide in from left.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Options.DialogOptionsEx.SlideInFromTop">
            <summary>
            Dialog preset to slide in from top.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Options.DialogOptionsEx.SlideInFromBottom">
            <summary>
            Dialog preset to slide in from bottom.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Options.HelperTextAlignment">
            <summary>
            Alignment of the helper text
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.HelperTextAlignment.Default">
            <summary>
            Default alignment
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.HelperTextAlignment.OnComponent">
            <summary>
            On the component
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.HelperTextAlignment.OnLabel">
            <summary>
            On the label
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Options.ItemSelectionMode">
            <summary>
            Item selection mode for multi or single select
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.ItemSelectionMode.None">
            <summary>
            No selection is allowed.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.ItemSelectionMode.Single">
            <summary>
            Only a single item can be selected at a time.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.ItemSelectionMode.MultiSelect">
            <summary>
            Multiple items can be selected without requiring any modifier key.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.ItemSelectionMode.MultiSelectWithCtrlKey">
            <summary>
            Multiple items can be selected, but requires the Ctrl key to be pressed during selection.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Options.MaxHeight">
            <summary>
            Max height of the Dialog
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.MaxHeight.False">
            <summary>
            No max height
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.MaxHeight.Large">
            <summary>
            Large max height
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.MaxHeight.Medium">
            <summary>
            Medium max height
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.MaxHeight.Small">
            <summary>
            Small max height
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.MaxHeight.ExtraLarge">
            <summary>
            Extra large max height
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.MaxHeight.ExtraExtraLarge">
            <summary>
            Extreme extra large max height
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.MaxHeight.ExtraSmall">
            <summary>
            Much smaller max height
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Options.MudExCodeLanguage">
            <summary>
            Language of the code
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.MudExCodeLanguage.Unknown">
            <summary>
            Unknown language to format
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.MudExCodeLanguage.Razor">
            <summary>
            C# Razor language
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.MudExCodeLanguage.CSharp">
            <summary>
            C# language
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.MudExCodeLanguage.JavaScript">
            <summary>
            JavaScript language
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.MudExCodeLanguage.JSX">
            <summary>
            JSX language
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.MudExCodeLanguage.TypeScript">
            <summary>
            TypeScript language
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.MudExCodeLanguage.Python">
            <summary>
            Python language
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.MudExCodeLanguage.Go">
            <summary>
            Go language
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.MudExCodeLanguage.Java">
            <summary>
            Java language
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.MudExCodeLanguage.Html">
            <summary>
            Html language
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.MudExCodeLanguage.Css">
            <summary>
            Css language
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.MudExCodeLanguage.Scss">
            <summary>
            Scss language
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.MudExCodeLanguage.Sass">
            <summary>
            Sass language
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.MudExCodeLanguage.Less">
            <summary>
            Less language
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.MudExCodeLanguage.Php">
            <summary>
            Php language
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.MudExCodeLanguage.Ruby">
            <summary>
            Ruby language
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.MudExCodeLanguage.Cpp">
            <summary>
            C++ language
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.MudExCodeLanguage.C">
            <summary>
            C language
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.MudExCodeLanguage.Rust">
            <summary>
            Rust language
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.MudExCodeLanguage.Lua">
            <summary>
            Lua language
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.MudExCodeLanguage.R">
            <summary>
            R language
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.MudExCodeLanguage.Bash">
            <summary>
            Bash language
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.MudExCodeLanguage.Sql">
            <summary>
            SQL language
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.MudExCodeLanguage.Perl">
            <summary>
            Perl language
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.MudExCodeLanguage.Swift">
            <summary>
            Swift language
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.MudExCodeLanguage.Kotlin">
            <summary>
            Kotlin Java language
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.MudExCodeLanguage.Groovy">
            <summary>
            Groovy language
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.MudExCodeLanguage.ObjectiveC">
            <summary>
            Objective-C language
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.MudExCodeLanguage.ObjectiveCpp">
            <summary>
            Objective-C++ language
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.MudExCodeLanguage.Fortran">
            <summary>
            Fortran language
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.MudExCodeLanguage.Prolog">
            <summary>
            Prolog language
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.MudExCodeLanguage.Ocaml">
            <summary>
            Ocaml language
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.MudExCodeLanguage.Scala">
            <summary>
            Scala language
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.MudExCodeLanguage.Haskell">
            <summary>
            Haskell language
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.MudExCodeLanguage.Clojure">
            <summary>
            Clojure language
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.MudExCodeLanguage.ClojureScript">
            <summary>
            ClojureScript language
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.MudExCodeLanguage.Elm">
            <summary>
            Elm language
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.MudExCodeLanguage.Erlang">
            <summary>
            Erlang language
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.MudExCodeLanguage.VbNet">
            <summary>
            Visual Basic .NET language
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.MudExCodeLanguage.VbScript">
            <summary>
            VBScript language
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.MudExCodeLanguage.Json">
            <summary>
            JSON language
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.MudExCodeLanguage.Yaml">
            <summary>
            YAML language
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.MudExCodeLanguage.Markdown">
            <summary>
            Markdown language
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.MudExCodeLanguage.Toml">
            <summary>
            TOML language
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.MudExCodeLanguage.Ini">
            <summary>
            Ini language
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.MudExCodeLanguage.Xml">
            <summary>
            XML language
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Options.MudExCodeLanguageExtensionsMapping">
            <summary>
            Extensions for MudExCodeLanguage
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Options.MudExCodeLanguageExtensionsMapping.GetCodeLanguageForFile(System.String)">
            <summary>
            Returns the code language for a file
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Options.MudExConfiguration">
            <summary>
            Represents the configuration options for MudBlazor Extended.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Options.MudExConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MudBlazor.Extensions.Options.MudExConfiguration"/> class.
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Options.MudExConfiguration.DisableAutomaticCssLoading">
            <summary>
            Set this to true to disable all automatic css loadings
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Options.MudExConfiguration.GoogleDriveClientId">
            <summary>
            Global google drive client id
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Options.MudExConfiguration.OneDriveClientId">
            <summary>
            Global one drive client id
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Options.MudExConfiguration.DropBoxApiKey">
            <summary>
            Global one drive client id
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Options.MudExConfiguration.EnableDropBoxIntegration(System.String)">
            <summary>
            Enable global drop box integration
            </summary>    
        </member>
        <member name="M:MudBlazor.Extensions.Options.MudExConfiguration.EnableGoogleDriveIntegration(System.String)">
            <summary>
            Enable global google drive integration
            </summary>    
        </member>
        <member name="M:MudBlazor.Extensions.Options.MudExConfiguration.EnableOneDriveIntegration(System.String)">
            <summary>
            Enable global google drive integration
            </summary>    
        </member>
        <member name="M:MudBlazor.Extensions.Options.MudExConfiguration.WithoutAutomaticCssLoading">
            <summary>
            Disables automatic Css loading. Then you need to ensure you have added the mud-ex styles in your index.html or _Host.cshtml
            </summary>    
        </member>
        <member name="M:MudBlazor.Extensions.Options.MudExConfiguration.WithAutomaticCssLoading">
            <summary>
            Enables automatic Css loading.
            </summary>    
        </member>
        <member name="M:MudBlazor.Extensions.Options.MudExConfiguration.WithJsBasePath(System.String)">
            <summary>
            Sets a specific base path for static js files
            </summary>    
        </member>
        <member name="M:MudBlazor.Extensions.Options.MudExConfiguration.WithJsMinification(System.Boolean)">
            <summary>
            Sets a specific base path for static js files
            </summary>    
        </member>
        <member name="M:MudBlazor.Extensions.Options.MudExConfiguration.With(System.Action{MudBlazor.Extensions.Options.MudExConfiguration}[])">
            <summary>
            Set specific options
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Options.MudExConfiguration.WithDefaultDialogOptions(System.Action{MudBlazor.Extensions.Options.DialogOptionsEx})">
            <summary>
            Configures the default dialog options using the provided action.
            </summary>
            <param name="options">The action to configure the default dialog options.</param>
            <returns>The current configuration instance.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Options.MudExConfiguration.WithDefaultDialogOptions(MudBlazor.Extensions.Options.DialogOptionsEx)">
            <summary>
            Sets the provided dialog options as the default dialog options.
            </summary>
            <param name="options">The options to set as the default dialog options.</param>
            <returns>The current configuration instance.</returns>
        </member>
        <member name="T:MudBlazor.Extensions.Options.MultiSelectionComponent">
            <summary>
            Component to use for multi selection
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.MultiSelectionComponent.None">
            <summary>
            No component is used item is selected by clicking
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.MultiSelectionComponent.CheckBox">
            <summary>
            A checkbox is used to select the item
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.MultiSelectionComponent.Switch">
            <summary>
            A switch is used to select the item
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Options.SelectAllPosition">
            <summary>
            Position of the select all button
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.SelectAllPosition.BeforeSearchBox">
            <summary>
            Before the search box
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.SelectAllPosition.NextToSearchBox">
            <summary>
            Next to the search box
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.SelectAllPosition.AfterSearchBox">
            <summary>
            After the search box
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Options.ValuePresenter">
            <summary>
            Value presenter for the MudExField
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.ValuePresenter.None">
            <summary>
            No value will be presented
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.ValuePresenter.Text">
            <summary>
            Value will be presented as text
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.ValuePresenter.Chip">
            <summary>
            Value will be presented as chip
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.ValuePresenter.ChipWithoutItemTemplate">
            <summary>
            Value will be presented as chip without the item template
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.Options.ValuePresenter.ItemContent">
            <summary>
            Value will be presented as item content based on given item template
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.MudDialogDragMode">
            <summary>
            Defines the dragging modes for a Mud Dialog.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.MudDialogDragMode.None">
            <summary>
            No dragging is allowed.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.MudDialogDragMode.Simple">
            <summary>
            Simple dragging mode, allowing basic move operations.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.MudDialogDragMode.WithoutBounds">
            <summary>
            Dragging mode allowing movement without restricting to certain bounds.
            </summary>
        </member>
        <member name="F:MudBlazor.Extensions.MudDialogDragMode.SnapDrag">
            <summary>
            Snap dragging mode (not currently implemented).
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.ServiceCollectionExtensions">
            <summary>
            Contains extension methods for IServiceCollection to configure MudBlazor services with extensions.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.ServiceCollectionExtensions.AddMudExtensions(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.Assembly[])">
            <summary>
            Adds MudBlazor extensions to the service collection.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.ServiceCollectionExtensions.AddMudExtensions(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{MudBlazor.Extensions.Options.MudExConfiguration},System.Reflection.Assembly[])">
            <summary>
            Adds MudBlazor extensions to the service collection with custom configuration.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.ServiceCollectionExtensions.AddMudServicesWithExtensions(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.Assembly[])">
            <summary>
            Adds MudBlazor services and extensions to the service collection.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.ServiceCollectionExtensions.AddMudServicesWithExtensions(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{MudBlazor.Services.MudServicesConfiguration},System.Reflection.Assembly[])">
            <summary>
            Adds MudBlazor services with custom configuration and extensions to the service collection.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.ServiceCollectionExtensions.AddMudServicesWithExtensions(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{MudBlazor.Extensions.Options.MudExConfiguration},System.Reflection.Assembly[])">
            <summary>
            Adds MudBlazor services and extensions with custom configuration to the service collection.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.ServiceCollectionExtensions.AddMudServicesWithExtensions(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{MudBlazor.Services.MudServicesConfiguration},System.Action{MudBlazor.Extensions.Options.MudExConfiguration},System.Reflection.Assembly[])">
            <summary>
            Adds MudBlazor services with custom configuration and extensions with custom configuration to the service collection.
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Services.DialogEventService">
            <summary>
            Dialog event service
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Services.DialogEventService.Subscribe``1(System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Subscribe to a dialog event
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Services.DialogEventService.Unsubscribe``1(System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Unsubscribe from a dialog event
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Services.DialogEventService.Publish``1(``0)">
            <summary>
            Publish a dialog event
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Services.MudExAppearanceService">
            <summary>
            Service class to manage and apply appearances to components.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Services.MudExAppearanceService.#ctor(Microsoft.JSInterop.IJSRuntime)">
            <summary>
            Creates a new instance of the service.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Services.MudExAppearanceService.ApplyTemporarilyToAsync``1(``0,MudBlazor.MudComponentBase,System.Func{System.Boolean},System.Boolean)">
            <summary>
            Applies the specified appearance to a MudBlazor component temporarily.
            </summary>
            <returns>The applied appearance.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Services.MudExAppearanceService.ApplyTemporarilyToAsync``1(``0,Microsoft.AspNetCore.Components.ElementReference,System.Func{System.Boolean},System.Boolean)">
            <summary>
            Applies the specified appearance to a ElementReference temporarily.
            </summary>
            <returns>The applied appearance.</returns>    
        </member>
        <member name="M:MudBlazor.Extensions.Services.MudExAppearanceService.ApplyTemporarilyToAsync``1(``0,System.String,System.Func{System.Boolean},System.Boolean)">
            <summary>
            Applies the specified appearance to a element that will searched by a selector temporarily.
            </summary>
            <returns>The applied appearance.</returns>  
        </member>
        <member name="M:MudBlazor.Extensions.Services.MudExAppearanceService.ApplyTemporarilyToAsync``1(``0,MudBlazor.IDialogReference,System.Func{System.Boolean},System.Boolean)">
            <summary>
            Applies the specified appearance to a dialog reference temporarily.
            </summary>
            <returns>The applied appearance.</returns>  
        </member>
        <member name="M:MudBlazor.Extensions.Services.MudExAppearanceService.ApplyTemporarilyToAsync``1(``0,MudBlazor.MudComponentBase,System.Nullable{System.TimeSpan},System.Boolean)">
            <summary>
            Applies the specified appearance to a MudBlazor component temporarily.
            </summary>
            <returns>The applied appearance.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Services.MudExAppearanceService.ApplyTemporarilyToAsync``1(``0,Microsoft.AspNetCore.Components.ElementReference,System.Nullable{System.TimeSpan},System.Boolean)">
            <summary>
            Applies the specified appearance to a ElementReference temporarily.
            </summary>
            <returns>The applied appearance.</returns>    
        </member>
        <member name="M:MudBlazor.Extensions.Services.MudExAppearanceService.ApplyTemporarilyToAsync``1(``0,System.String,System.Nullable{System.TimeSpan},System.Boolean)">
            <summary>
            Applies the specified appearance to a element that will searched by a selector temporarily.
            </summary>
            <returns>The applied appearance.</returns>  
        </member>
        <member name="M:MudBlazor.Extensions.Services.MudExAppearanceService.ApplyTemporarilyToAsync``1(``0,MudBlazor.IDialogReference,System.Nullable{System.TimeSpan},System.Boolean)">
            <summary>
            Applies the specified appearance to a dialog reference temporarily.
            </summary>
            <returns>The applied appearance.</returns>  
        </member>
        <member name="M:MudBlazor.Extensions.Services.MudExAppearanceService.ApplyAsClassOnlyToAsync``2(``0,``1,System.Action{``1,System.String})">
            <summary>
            Applies the specified appearance to a component, updating only its class attribute.
            </summary>
            <param name="appearance">The appearance to apply.</param>
            <param name="component">The component to which the appearance will be applied.</param>
            <param name="updateFunc">Function to update the class of the component.</param>
            <returns>The applied appearance.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Services.MudExAppearanceService.ApplyToAsync``1(``0,MudBlazor.MudComponentBase,System.Boolean)">
            <summary>
            Applies the specified appearance to a MudBlazor component.
            </summary>
            <param name="appearance">The appearance to apply.</param>
            <param name="component">The component to which the appearance will be applied.</param>
            <param name="keepExisting">Flag indicating whether to keep existing class and style attributes.</param>
            <returns>The applied appearance.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Services.MudExAppearanceService.ApplyToAsync``1(``0,System.String,System.Boolean)">
            <summary>
            Applies the specified appearance to an HTML element using its selector.
            </summary>
            <param name="appearance">The appearance to apply.</param>
            <param name="elementSelector">The selector of the element to which the appearance will be applied.</param>
            <param name="keepExisting">Flag indicating whether to keep existing class and style attributes.</param>
            <returns>The applied appearance.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Services.MudExAppearanceService.ApplyToAsync``1(``0,Microsoft.AspNetCore.Components.ElementReference,System.Boolean)">
            <summary>
            Applies the specified appearance to an HTML element using its reference.
            </summary>
            <param name="appearance">The appearance to apply.</param>
            <param name="elementRef">Reference to element</param>
            <param name="keepExisting">Flag indicating whether to keep existing class and style attributes.</param>
            <returns>The applied appearance.</returns>    
        </member>
        <member name="M:MudBlazor.Extensions.Services.MudExAppearanceService.ApplyToAsync``1(``0,MudBlazor.IDialogReference,System.Boolean)">
            <summary>
             Applies the specified appearance to a dialog
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Services.MudExAppearanceService.RemoveFromAsync``1(``0,MudBlazor.MudComponentBase)">
            <summary>
            Removes the specified appearance from a MudBlazor component.
            </summary>
            <param name="appearance">The appearance to remove.</param>
            <param name="component">The component from which the appearance will be removed.</param>
            <returns>The removed appearance.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Services.MudExAppearanceService.RemoveFromAsync``1(``0,System.String)">
            <summary>
            Removes the specified appearance from an HTML element using its selector.
            </summary>
            <param name="appearance">The appearance to remove.</param>
            <param name="elementSelector">The selector of the element from which the appearance will be removed.</param>
            <returns>The removed appearance.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Services.MudExAppearanceService.RemoveFromAsync``1(``0,Microsoft.AspNetCore.Components.ElementReference)">
            <summary>
            Removes the specified appearance from an HTML element using its ElementReference.
            </summary>
            <param name="appearance">The appearance to remove.</param>
            <param name="elementRef">The ElementReference of the HTML element from which the appearance will be removed.</param>
            <returns>The removed appearance.</returns>
        </member>
        <member name="M:MudBlazor.Extensions.Services.MudExAppearanceService.RemoveFromAsync``1(``0,MudBlazor.IDialogReference)">
            <summary>
            Removes the specified appearance from a dialog.
            </summary>
            <param name="appearance">The appearance to remove.</param>
            <param name="dialogReference">The reference to the dialog from which the appearance will be removed.</param>
            <returns>The removed appearance.</returns>
        </member>
        <member name="T:MudBlazor.Extensions.Services.MudExCaptureNotificationService">
            <summary>
            Capture service for capturing audio and video.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Services.MudExCaptureNotificationService.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="T:MudBlazor.Extensions.Services.MudExCaptureService">
            <summary>
            Capture service for capturing audio and video.
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Services.MudExCaptureService.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Services.MudExCaptureService.EditCaptureOptionsAsync(MudBlazor.Extensions.Core.Capture.CaptureOptionsEditMode,MudBlazor.Extensions.Core.Capture.CaptureOptions)">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Services.MudExCaptureService.StartCaptureAsync(MudBlazor.Extensions.Core.Capture.CaptureOptions,System.Action{MudBlazor.Extensions.Core.Capture.CaptureResult},System.Action{MudBlazor.Extensions.Core.Capture.CaptureId})">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Services.MudExCaptureService.StopCaptureAsync(MudBlazor.Extensions.Core.Capture.CaptureId)">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Services.MudExCaptureService.StopAllCapturesAsync">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Services.MudExCaptureService.GetAudioDevicesAsync">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Services.MudExCaptureService.GetVideoDevicesAsync">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Services.MudExCaptureService.SelectCaptureSourceAsync(MudBlazor.Extensions.Core.W3C.DisplayMediaOptions,OneOf.OneOf{Microsoft.AspNetCore.Components.ElementReference,System.String})">
            <inheritdoc />
        </member>
        <member name="T:MudBlazor.Extensions.Services.MudExDialogService">
            <summary>
            Overriden DialogService to provide additional functionality
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Services.MudExDialogService.JSRuntime">
            <summary>
            JsRuntime
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Services.MudExDialogService.ServiceProvider">
            <summary>
            ServiceProvider
            </summary>
        </member>
        <member name="P:MudBlazor.Extensions.Services.MudExDialogService.AppearanceService">
            <summary>
            AppearanceService
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Services.MudExDialogService.GetDialogReference(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Services.MudExDialogService.GetDialogUsedDialogOptions(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Services.MudExDialogService.#ctor(Microsoft.JSInterop.IJSRuntime,System.IServiceProvider,MudBlazor.Extensions.Services.MudExAppearanceService,MudBlazor.Extensions.Core.IDialogEventService)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:MudBlazor.Extensions.Services.MudExFileService">
            <summary>
            Service to handle file operations
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Services.MudExFileService.#ctor(Microsoft.JSInterop.IJSRuntime,System.IServiceProvider)">
            <summary>
            Creates a new instance of MudExFileService
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Services.MudExFileService.ReadAsStringFromStream(System.IO.Stream)">
            <summary>
            Returns the content of a file as string
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Services.MudExFileService.ReadStreamAsync(MudBlazor.Extensions.Components.IMudExFileDisplayInfos)">
            <summary>
            Reads filedisplay info as stream. this stream is a copy and needs to be disposed and closed.
            </summary>
            <param name="fileDisplayInfos"></param>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.Extensions.Services.MudExFileService.ReadAsStringFromFileDisplayInfosAsync(MudBlazor.Extensions.Components.IMudExFileDisplayInfos)">
            <summary>
            Returns the content of a file as string
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Services.MudExFileService.ToBlobUrlAsync(System.String,System.String)">
            <summary>
            Converts a url to a blob url
            </summary>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.Extensions.Services.MudExFileService.ToDataUrlAsync(System.String,System.String)">
            <summary>
            Converts a url to a data url
            </summary>    
            <returns></returns>
        </member>
        <member name="M:MudBlazor.Extensions.Services.MudExFileService.ReadAsStringFromUrlAsync(System.String)">
            <summary>
            Reads a string from an url
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Services.MudExFileService.ReadBytesAsync(System.String)">
            <summary>
            Reads bytes from an url
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Services.MudExFileService.ReadStreamAsync(System.String)">
            <summary>
            Reads a stream from an url
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Services.MudExFileService.ReadDataUrlForStreamAsync(System.IO.Stream,System.String,System.Boolean)">
            <summary>
            Reads a data url for a stream
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Services.MudExFileService.CreateDataUrlAsync(System.Byte[],System.String,System.Boolean)">
            <summary>
            Creates a data url from bytes this can be a blob url or a data url
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Services.MudExFileService.CreateDataUrlAsync(Microsoft.AspNetCore.Components.Forms.IBrowserFile,System.Boolean)">
            <summary>
            Creates an url from a file this can be a blob url or a data url
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Services.MudExFileService.RevokeBlobUrlAsync(System.String)">
            <summary>
            Revokes a blob url
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Services.MudExFileService.ReadArchiveAsync(System.Byte[],System.String,System.String)">
            <summary>
            Reads an archive with SharpCompress
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Services.MudExFileService.ReadArchiveAsync(System.IO.Stream,System.String,System.String)">
            <summary>
            Reads an archive with SharpCompress
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Services.MudExFileService.ReadArchiveWithSystemCompressionAsync(System.IO.Stream,System.String,System.String)">
            <summary>
            Reads an archive with system compression
            </summary>
        </member>
        <member name="M:MudBlazor.Extensions.Services.MudExFileService.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="M:MudBlazor.Extensions.Services.MudExFileService.ReadExcelFile(System.IO.Stream,System.String)">
            <summary>
            Reads a stream as excel file
            </summary>
        </member>
    </members>
</doc>
