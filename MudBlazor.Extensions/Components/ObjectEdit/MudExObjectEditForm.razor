@using Nextended.Core.Extensions
@using Microsoft.AspNetCore.Components.Rendering
@using System.Reflection
@using Microsoft.Extensions.Logging
@using Microsoft.Extensions.Logging.Abstractions
@using MudBlazor.Extensions.Helper
@inherits MudExObjectEdit<T>
@typeparam T

<EditForm class="@($"mud-ex-object-edit-form {FormClass}")" style="@FormStyle" @ref="Form" Model="@Value" OnValidSubmit="@OnSubmit">
    
    <FluentValidationValidator @ref="_fluentValidationValidator" />
    <DataAnnotationsValidator @ref="_dataAnnotationValidator" />

    <MudCard Class="@($"mud-ex-object-edit-form-card {CardClass}")" Elevation="@Elevation" Outlined="false" Style="position: relative;">
        <MudCardContent Class="mud-ex-object-edit-form-card-content pl-0 pr-0 pt-0 pb-0">
            @Inherited()
        </MudCardContent>
        
        @* <ValidationSummary></ValidationSummary> *@
        
        @if (!OverwriteActionBar)
        {
            @RenderActionBar
        }
    </MudCard >
</EditForm>

@code {

    private RenderFragment Inherited() => builder => base.BuildRenderTree(builder);

    protected override RenderFragment InternalToolBarContent => RenderFormActionsInToolBar ? RenderActions : null;
    
    RenderFragment RenderSaveButton() => (SaveButtonAsIconButton
    ? @<MudIconButton OnClick="@OnSubmitButtonClick" title="@(!string.IsNullOrWhiteSpace(SaveButtonText) ? LocalizerToUse.TryLocalize(SaveButtonText) : "")" DropShadow Variant="@SaveButtonVariant" Icon="@SaveButtonIcon" ButtonType="@SubmitButtonType" Disabled="@(!Validated || IsLoading || IsInternalLoading)" Color="@SaveButtonColor"></MudIconButton>
    : @<MudButton OnClick="@OnSubmitButtonClick" DropShadow="false" Variant="@SaveButtonVariant" EndIcon="@(SaveButtonIconAlignment == ActionAlignment.Right ? SaveButtonIcon : null)" StartIcon="@(SaveButtonIconAlignment == ActionAlignment.Left ? SaveButtonIcon : null)" ButtonType="@SubmitButtonType" Disabled="@(!Validated || IsLoading || IsInternalLoading)" Color="@SaveButtonColor">@(!string.IsNullOrWhiteSpace(SaveButtonText) ? LocalizerToUse.TryLocalize(SaveButtonText) : "")</MudButton>
    );


    RenderFragment RenderCancelButton() => (CancelButtonAsIconButton
    ? @<MudIconButton title="@(!string.IsNullOrWhiteSpace(CancelButtonText) ? LocalizerToUse.TryLocalize(CancelButtonText) : "")" DropShadow="false" Variant="@CancelButtonVariant" Icon="@CancelButtonIcon" Disabled="@(IsLoading || IsInternalLoading)" Class="mr-2" Color="@CancelButtonColor" OnClick="@Cancel"></MudIconButton>
    : @<MudButton DropShadow="false" Variant="@CancelButtonVariant" EndIcon="@(CancelButtonIconAlignment == ActionAlignment.Right ? CancelButtonIcon : null)" StartIcon="@(CancelButtonIconAlignment == ActionAlignment.Left ? CancelButtonIcon : null)" Disabled="@(IsLoading || IsInternalLoading)" Class="mr-2" Color="@CancelButtonColor" OnClick="@Cancel">@(!string.IsNullOrWhiteSpace(CancelButtonText) ? LocalizerToUse.TryLocalize(CancelButtonText) : "")</MudButton>
        );

    protected void RenderActionBar(RenderTreeBuilder __builder)
    {
        if (!RenderFormActionsInToolBar)
        {
            if (ActionContent != null || ShowSaveButton || ShowCancelButton)
            {
                <MudCardActions Class="@GetActionBarClass()" Style="@GetActionBarStyle()">
                    <div class="@(ActionBarActionAlignment == ActionAlignment.Right ? "ml-auto" : "")">

                        @if (RenderActionContentFirst && ActionContent != null)
                        {
                            @ActionContent
                        }
                        @if (!RenderFormActionsInToolBar)
                        {
                            @RenderActions
                        }
                        @if (!RenderActionContentFirst && ActionContent != null)
                        {
                            @ActionContent
                        }

                    </div>
                </MudCardActions>
            }
        }
    }
    
    protected void RenderActions(RenderTreeBuilder __builder)
    {
        @if (ShowCancelButton)
        {
            @RenderCancelButton()
        }

        @if (ShowSaveButton)
        {
            @if (HasErrors && !Validated)
            {
                <MudTooltip Placement="Placement.Top" Color="Color.Error">
                    <ChildContent>
                        @RenderSaveButton()
                    </ChildContent>
                    <TooltipContent>
                        @if (!Validated)
                        {
                            <MudIcon Icon="@Icons.Material.Filled.Error"/>
                            @foreach (var message in GetErrors())
                            {
                                <MudText Typo="Typo.body2">@message</MudText>
                            }
                        }
                    </TooltipContent>
                </MudTooltip>
            }
            else
            {
                @RenderSaveButton()
            }
        }
    }
}
