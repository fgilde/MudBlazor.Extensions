@using MudBlazor.Extensions.Components.ObjectEdit.Options
@using MudBlazor.Extensions.Helper
@using MudBlazor.Extensions.Options
@using Microsoft.AspNetCore.Components.Rendering
@using Nextended.Core.Extensions

@typeparam T
@inherits MudExBaseComponent<MudExObjectEdit<T>>
<style>
    .mud-ex-object-edit-group-flat .mud-expand-panel-text:after {
        background-color: @(GroupLineColor.ToCssStringValue());
    }
</style>

@Render

@code {

    private void Render(RenderTreeBuilder __builder)
    {

        @if (AllowImport)
        {
            <InputFile accept="application/json" id="importInput" OnChange="Import" hidden />
        }

        @if (AutoOverlay && (IsLoading || IsInternalLoading))
        {
            <MudOverlay Class="mud-ex-loading-overlay" Visible="@(AutoOverlay && (IsLoading || IsInternalLoading))" DarkBackground="@(!LightOverlayLoadingBackground)" LightBackground="@LightOverlayLoadingBackground" Absolute="true">
                <MudProgressCircular Size="Size.Large" Color="Color.Primary" Indeterminate="true" />
            </MudOverlay>
        }

        @if (RenderWithType != null && HasRegistrationForWholeObject)
        {
            <div style="margin-left: 20px">
                <!-- Render the whole object with an registered editor for it -->
                <DynamicComponent Type="@RenderWithType" Parameters="GetCompatibleParameters(RenderWithType)"></DynamicComponent>
            </div>
        }
        else if (Primitive)
        {
            <DynamicComponent Type="@typeof(MudExObjectEdit<ModelForPrimitive<T>>)" Parameters="GetAttributesForPrimitive()"></DynamicComponent>
        }
        else
        {
            @*<div style="@GetStyle()" class="@($"mud-ex-object-edit {Class} mud-ex-overflow")">*@
            <div style="@GetStyle()" class="@($"mud-ex-object-edit {Class} {GetOverflowClass()}")">
            <MudPaper Class="@($"{ToolBarPaperClass} {(StickyToolbar ? "mud-ex-toolbar-sticky" : "")}")" Style="@ToolbarStyle()" Elevation="@ToolBarElevation">
                @if (ShowToolbar)
                {
                    <MudToolBar Class="@($"{ToolBarClass} pr-4 mt-2 mb-2")">
                        @if (InternalToolBarContent != null)
                        {
                            @InternalToolBarContent
                        }
                        @if (ToolBarContent != null)
                        {
                            @ToolBarContent
                        }
                        @if (ToolBarActionAlignment == ActionAlignment.Right)
                        {
                            <MudSpacer />
                        }

                        @if (AllowSearch)
                        {
                            <MudExToggleableSearch @bind-SearchActive="SearchActive" MultiSearch="@MultiSearch" @bind-Filter="@Filter" @bind-Filters="@Filters" SearchButtonColor="@ToolbarButtonColor" SearchIcon="@SearchIcon" FilterMode="@FilterMode" />
                        }
                        @if (AllowExport)
                        {
                            <MudTooltip Text="@TryLocalize("Export")">
                                <MudIconButton Icon="@ExportIcon" OnClick="@(Export)" Color="@ToolbarButtonColor" />
                            </MudTooltip>
                        }
                        @if (AllowImport)
                        {
                            <MudTooltip Text="@TryLocalize("Import")">
                                <MudIconButton HtmlTag="label" for="importInput" Icon="@ImportIcon" Color="@_importButtonColor" />
                            </MudTooltip>
                        }
                        @if (GroupsCollapsible && _groups.Count > 1)
                        {
                            <MudTooltip Text="@TryLocalize("Expand/Collapse")">
                                <MudIconButton Icon="@ExpandCollapseIcon" OnClick="@(ExpandCollapse)" Color="@ToolbarButtonColor" />
                            </MudTooltip>
                        }
                        @if (GlobalResetSettings.AllowReset)
                        {
                            <MudTooltip Text="@TryLocalize(GlobalResetSettings.ResetText)">
                                <MudIconButton Icon="@GlobalResetSettings.ResetIcon" OnClick="@(OnResetClick)" Color="@ToolbarButtonColor" />
                            </MudTooltip>
                        }
                    </MudToolBar>
                }
                @if (!String.IsNullOrWhiteSpace(ErrorMessage))
                {
                    <MudAlert Class="@($"mud-alert-message-w-100")"
                              CloseIconClicked="@(() => ErrorMessage = null)"
                              Style="@($"animation: {AnimationType.Pulse.GetAnimationCssStyle(TimeSpan.FromMilliseconds(400))}")"
                              Icon="@Icons.Material.Filled.ErrorOutline" ShowCloseIcon="true" ContentAlignment="HorizontalAlignment.Center" Elevation="5" Severity="Severity.Error" Variant="Variant.Filled">
                        @ErrorMessage
                    </MudAlert>
                }
            </MudPaper>

                @BuildWrapped(
                    GetGroupStyleOuterCmp(),
                    @<MudVirtualize Items="@GroupedMetaPropertyInfos()" Context="grouping" Enabled="@Virtualize">
                        @{
                            var objectEditPropertyMetas = MetaInformation?.Ordered(grouping).ToList();
                            var renderableProperties = objectEditPropertyMetas?.Where(p => p.ShouldRender()).ToList();
                            var ignoredProperties = objectEditPropertyMetas?.Except(renderableProperties ?? Enumerable.Empty<ObjectEditPropertyMeta>()).ToList();

                            var groupNameRaw = !string.IsNullOrWhiteSpace(grouping.Key) ? grouping.Key : DefaultGroupName;

                            var pathStr = string.Join(" > ",
                                objectEditPropertyMetas?.FirstOrDefault()?.PropertyName?.Split('.').SkipLast(1)
                                ?? Array.Empty<string>());

                            var displayName = groupNameRaw;
                            if (PathDisplayMode == PathDisplayMode.DisplayAsGroupName && !string.IsNullOrEmpty(pathStr))
                                displayName = pathStr;

                            displayName = !string.IsNullOrWhiteSpace(displayName) ? TryLocalize(displayName) : displayName;

                            if (renderableProperties?.Any() == true)
                            {
                                var groupId = Guid.NewGuid().ToString("N");
                                var groupCss = $"mt-3 {(!string.IsNullOrWhiteSpace(groupNameRaw) ? CssClassName : "mud-ex-hidden-group")}";

                                RenderFragment innerCombined = b =>
                                {
                                    if (PathDisplayMode == PathDisplayMode.DisplaySeparate && !string.IsNullOrEmpty(pathStr) && pathStr != displayName)
                                    {
                                        b.OpenElement(0, "p");
                                        b.AddAttribute(1, "class",
                                            GroupingStyle == GroupingStyle.Flat
                                                ? "mud-ex-group-path-text-flat"
                                                : "mud-ex-group-path-text-default");
                                        b.AddContent(2, pathStr);
                                        b.CloseElement();
                                    }

                                    var innerCore = BuildWrapped(
                                        OuterWrapperComponents(grouping),
                                        RenderPropertyEdits(renderableProperties)
                                    );

                                    innerCore(b);
                                };

                                @BuildWrapped(
                                    GetGroupStyleInnerCmp(displayName, groupId, groupCss),
                                    innerCombined
                                )
                            }

                            if (ignoredProperties?.Any() == true)
                            {
                                <div style="display:none;" class="__ignored">
                                    @RenderPropertyEdits(ignoredProperties)
                                </div>
                            }
                        }
                    </MudVirtualize>
                )


                @if (AddScrollToTop)
                {
                    <MudScrollToTop Class="@($"mud-ex-scroll-to-top {ScrollToTopPosition.ToDescriptionString()}")" ScrollBehavior="ScrollBehavior.Smooth">
                        <MudFab Color="Color.Tertiary" Icon="@Icons.Material.Filled.ArrowCircleUp" />
                    </MudScrollToTop>
                }
            </div>
        }
    }

    private RenderFragment BuildWrapped(
        IEnumerable<(Type type, IDictionary<string, object?>? parameters)> wrappers,
        RenderFragment inner)
    {
        var current = inner;

        foreach (var (t, parms) in wrappers.Reverse())
        {
            var child = current; // important closure capture
            current = @<DynamicComponent Type="@t"
                                         @ref="@DynamicComponentRef"
                              Parameters="@((parms ?? new Dictionary<string, object>()).MergeWith(new Dictionary<string, object?> { [nameof(FragmentWrapper.ChildContent)] = child }))" />;
        }

        return current;
    }

    private RenderFragment BuildWrapped(IEnumerable<Type> wrappers, RenderFragment inner)
    {
        var current = inner;

        foreach (var t in wrappers.Reverse())
        {
            var child = current; // important closure capture
            current = @<DynamicComponent Type="@t"
                                        @ref="@DynamicComponentRef"
                                         Parameters="@(new Dictionary<string, object?>
                                                     {
                                                         [nameof(FragmentWrapper.ChildContent)] = child
                                                     })" />;
        }

        return current;
    }

    private RenderFragment RenderPropertyEdits(IList<ObjectEditPropertyMeta> objectEditPropertyMetas)
    {
        return @<MudVirtualize Items="@objectEditPropertyMetas" Context="property" Enabled="@Virtualize">
        @RenderPropertyEdit(property)
    </MudVirtualize>;
    }

    RenderFragment RenderPropertyEdit(ObjectEditPropertyMeta property)
    {
        return
    @<MudExPropertyEdit @ref="@Ref" DisableFieldFallback="@DisableFieldFallback"
                                    RenderKey="@RenderKey"
                                    AutoFocus="@HasAutoFocus(property)"
                                    ReadOnlyOverwrite="@ReadOnlyOverwrite"
                                    StoreAndReadValueFromUrl="@StoreAndReadValueFromUrl"
                                    ShowPathAsTitle="@ShowPathAsTitleForEachProperty"
                                    IsLoading="@(IsLoading || IsInternalLoading)"
                                    AutoSkeletonOnLoad="@AutoSkeletonOnLoad"
                                    PropertyValueChanged="@OnPropertyChange"
                                    ActiveFilterTerm="@Filter"
                                    Localizer="@LocalizerToUse"
                                    PropertyResetSettings="@DefaultPropertyResetSettings"
                                    PropertyMeta="@property">
    </MudExPropertyEdit>;
    }
}
