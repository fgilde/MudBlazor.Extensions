@using Microsoft.AspNetCore.Components.Rendering
@using Microsoft.AspNetCore.Components
@using MudBlazor.Extensions.Components.ObjectEdit.Options
@using MudBlazor.Extensions.Helper
@using Nextended.Core.Extensions;

@inherits MudExBaseComponent<MudExPropertyEdit>

@if (PropertyMeta?.ShouldRender() == true)
{
    @Render
}

@code {

    private void Render(RenderTreeBuilder __builder)
    {
        @RenderWrapper(PropertyMeta?.RenderData?.Wrapper);
    }
    
    private RenderFragment RenderWrapper(IRenderData wrapper, bool renderEditorAfter = true)
    {
        if (wrapper == null)
            return renderEditorAfter ? RenderEditor() : null;
        return @<DynamicComponent Type="@wrapper.ComponentType" Parameters="@wrapper.Attributes.AddOrUpdate("ChildContent", RenderWrapper(wrapper.Wrapper, renderEditorAfter))"></DynamicComponent>;
    }

    private RenderFragment RenderEditor()
    {
        var reset = GetResetSettings();
        if (!reset.AllowReset || !PropertyMeta.Settings.IsEditable)
            return RenderPropertyMetaAndLabelIf();
        return @<div title="@Title()" class="@($"mud-ex-property-container mud-ex-property-container-for-{PropertyMeta.PropertyName.Replace(".", "-")}")">
                       @RenderPropertyMetaAndLabelIf()
                       <div @onclick="@(ResetAsync)" class="mud-ex-property-reset-conatiner">
                           @if (reset.ShowResetText)
                           {
                               <span>@(Localizer != null ? Localizer.TryLocalize(reset.ResetText) : reset.ResetText)</span>
                           }
                           <MudIconButton OnClick="@(ResetAsync)" Title="@(string.Format(Localizer != null ? Localizer.TryLocalize(reset.ResetText) : reset.ResetText, PropertyMeta.Settings.LabelFor(Localizer)))" Icon="@reset.ResetIcon" Size="Size.Small"></MudIconButton>
                       </div>
                </div>;
    }

    private RenderFragment RenderPropertyMetaAndLabelIf()
    {
        if (PropertyMeta.Settings.LabelBehaviour == LabelBehaviour.SeparateLabelComponentOnly || PropertyMeta.Settings.LabelBehaviour == LabelBehaviour.Both)
        {
            return @<div>
                       <MudHighlighter Text="@PropertyMeta.Settings.LabelFor(Localizer)" HighlightedText="@ActiveFilterTerm" />
                       @RenderPropertyMeta()
                   </div>;
        }
        return RenderPropertyMeta();
    }
    
    private RenderFragment RenderPropertyMeta()
    {
        RenderFragment result;
        if (IsLoading && AutoSkeletonOnLoad)
        {
            return @<MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="40px"/>;
        }
        if (PropertyMeta.RenderData?.CustomRenderer != null)
        {
            result = builder => RenderAs(builder, PropertyMeta); // Void render as fragment
        }
        else if (PropertyMeta.RenderData != null)
        {
            result = @<DynamicComponent @ref="Editor" Type="@PropertyMeta.RenderData.ComponentType" Parameters="GetPreparedAttributes()"></DynamicComponent>;
        }
        else if (DisableFieldFallback)
        {
            return null;
        }
        else
        {
            //Todo we need to have value changed or something to raise also this PropertyValueChanged
            result = @<MudTextField ReadOnly="@(!PropertyMeta.Settings.IsEditable)"
                                    For="@(CreateFieldForExpression<string>())"
                                    HelperText="@(PropertyMeta.Settings.DescriptionFor(Localizer))"
                                    Label="@(PropertyMeta.Settings.LabelFor(Localizer))"
                                    @bind-Value="PropertyMeta.As<string>(true).Value">
                     </MudTextField>;
        }

        if (PropertyMeta.Settings.ValidationComponent || PropertyMeta.RenderData?.RenderDataBeforeComponent?.Any() == true || PropertyMeta.RenderData?.RenderDataAfterComponent?.Any() == true)
        {
            return @<div class="@($"mud-ex-property-component-wrapper mud-ex-property-component-wrapper-for-{PropertyMeta.PropertyName.Replace(".", "-")}")">
                       @foreach (var data in PropertyMeta.RenderData?.RenderDataBeforeComponent ?? Enumerable.Empty<IRenderData>())
                       { @RenderWrapper(data, false)}
  
                       @result
                       
                       @foreach (var data in PropertyMeta.RenderData?.RenderDataAfterComponent ?? Enumerable.Empty<IRenderData>())
                       { @RenderWrapper(data, false)}
                       
                       @if(PropertyMeta.Settings.ValidationComponent) {
                           <MudTextField Class="mud-ex-property-validation-component" Underline="false" For="@(CreateFieldForExpression<string>())" ReadOnly="true"/>
                       }
                   </div>;
        }
        
        return result;
    }

}