@using System.IO
@using Microsoft.AspNetCore.Components.Rendering
@using MudBlazor.Extensions.Helper
@using BlazorJS
@namespace MudBlazor.Extensions.Components
@inherits MudExJsRequiredBaseComponent<MudExFileDisplay>

<BrowserDetect @bind-BrowserInfo="@Info" />

<div @ref=ElementReference class="mud-ex-file-display-container">

    <MoveContent ElementSelector="@($".mud-ex-file-display-toolbar-{ElementId}")">
        <Found>
            @RenderMenu
        </Found>
        <NotFound>
            <MudToolBar Class="@($"mud-ex-file-display-toolbar mud-ex-file-display-toolbar-{ElementId}")" Dense="true">
                @RenderMenu
            </MudToolBar>
        </NotFound>
    </MoveContent>


    @if (_componentForFile.ControlType != null)
    {
        _isNativeRendered = false;
        @if (_componentForFile.ShouldAddDiv)
        {
            <div class="mud-ex-file-display">
                <DynamicComponent Type="@_componentForFile.ControlType" Parameters="@_componentForFile.Parameters" />
            </div>
        }
        else
        {
            <DynamicComponent Type="@_componentForFile.ControlType" Parameters="@_componentForFile.Parameters" />
        }
    }
    else
    {
        _isNativeRendered = true;
        <div class="mud-ex-file-display">
            @if (renderInfos != null)
            {
                <MudElement UserAttributes="@renderInfos.Value.attributes" HtmlTag="@renderInfos.Value.tag" />
            }
        </div>
    }

    @if (ShowContentError)
    {
        <div id="content-type-display-error">
            <MudAlert Class="mud-alert-close-no-flex" Severity="Severity.Error" Variant="Variant.Outlined" ContentAlignment="HorizontalAlignment.Center" ShowCloseIcon="true" CloseIconClicked="CloseContentError">
                <p>
                    @if (!string.IsNullOrWhiteSpace(CustomContentErrorMessage))
                    {
                        @CustomContentErrorMessage
                    }
                    else
                    {
                        @TryLocalize("The content type {0} cannot be displayed without a suitable plugin", ContentType)
                    }
                </p>

                @if (PossiblePlugin != null)
                {
                    <MudButton HtmlTag="label"
                       Class="w-100 my-4"
                       Variant="Variant.Text"
                       Color="Color.Primary"
                       Size="Size.Small"
                       Href="@PossiblePlugin.Url"
                       Target="_blank"
                       StartIcon="@(Icons.TwoTone.Shop)">
                        @(TryLocalize("The Plugin '{0}' may be able to help", PossiblePlugin.Name))
                    </MudButton>
                }
            </MudAlert>
        </div>
    }
</div>

@code {
    
    private void RenderMenu(RenderTreeBuilder __builder)
    {
        @if (!string.IsNullOrEmpty(FileName))
        {
            <MudSpacer />
            <MudMenu Style="margin-bottom:2px;" AnchorOrigin="Origin.TopRight" TransformOrigin="Origin.TopRight" Dense="@Dense" Size="Size.Medium" Icon="@MudExSvg.CombineIconsHorizontal(Icons.Material.Filled.MoreVert, BrowserFileExt.IconForFile(ContentType))">
                <div class="mud-ex-file-display-menu-header">
                    <MudIcon Icon="@BrowserFileExt.IconForFile(ContentType)"></MudIcon>
                    <MudText Class="mud-ex-file-display-toolbar-text">@FileName</MudText>
                </div>
                @foreach (var c in _possibleRenderControls.Where(c => c.GetType() != _componentForFile.ControlType))
                {
                    <MudMenuItem Class="mud-ex-file-display-menu-item-action" OnClick="@(() => RenderWith(c))" IconSize="Size.Small" Icon="@Icons.Material.Filled.Extension">@($"{TryLocalize("Render with {0}", c.Name ?? c.GetType().Name)}")</MudMenuItem>
                }
                @if (!_isNativeRendered)
                {
                    <MudMenuItem Class="mud-ex-file-display-menu-item-action" OnClick="@(() => RenderWith(null))" IconSize="Size.Small" Icon="@Icons.Material.Filled.ExtensionOff">@($"{TryLocalize("Render with native control")}")</MudMenuItem>
                }
                @if (AllowCopyUrl && !string.IsNullOrEmpty(Url))
                {
                    <MudMenuItem Class="mud-ex-file-display-menu-item-action" OnClick="@(CopyUrl)" Icon="@Icons.Material.Filled.ContentCopy">@($"{TryLocalize("Copy url")}")</MudMenuItem>
                }
                @if (AllowDownload)
                {
                    <MudMenuItem Class="mud-ex-file-display-menu-item-action" OnClick="@(Download)" Icon="@Icons.Material.Filled.Download">@($"{TryLocalize("Download")}")</MudMenuItem>
                }
                <MudDivider/>
                <MudMenuItem Class="mud-ex-file-display-menu-item-action" OnClick="@(ShowInfo)" Icon="@Icons.Material.Filled.Info">@($"{TryLocalize("Info")}")</MudMenuItem>

                @if (CanClose)
                {
                    <MudDivider/>                    
                    <MudMenuItem Class="mud-ex-file-display-menu-item-action" OnClick="@(OnCloseClick)" Icon="@Icons.Material.Filled.Close">@($"{TryLocalize("Close")}")</MudMenuItem>
                }
            </MudMenu>
        }
    }
}
