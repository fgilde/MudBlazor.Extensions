@using MudBlazor.Extensions.Helper
@using Nextended.Core.Extensions
@using Microsoft.AspNetCore.Components.Rendering
@using MudBlazor.Extensions.Core
@inherits MudExJsRequiredBaseFormComponent<MudExUploadEdit<T>, IList<T>, string>
@typeparam T;


<MudInputControl Class="@Class" Style="@Style" Error="HasErrors" ErrorText="@GetErrorText()" Required="@Required">
    <InputContent>
        @Render
    </InputContent>
</MudInputControl>

@code
{

    private void Render(RenderTreeBuilder __builder)
    {

        @if (!string.IsNullOrWhiteSpace(Label))
        {
            <label class="@($"{(UploadRequests?.Any() == true ? "upload-request-label-small" : "")} upload-request-label mud-input-label-animated mud-input-label-text")">@Label</label>
        }

        <div class="@GetOuterCls()" style="@GetOuterStyle()">

            <div @ref="ElementReference" style="@StyleStr()" class="upload-request-edit @(AllowDrop ? "drop-zone" : "") @Class">

                @if (!string.IsNullOrWhiteSpace(_errorMessage) && DisplayErrors)
                {
                    <MudAlert Style="@($"animation: {ErrorAnimation.GetAnimationCssStyle(TimeSpan.FromMilliseconds(300))};")" Severity="Severity.Error" Class="upload-request-alert" ShowCloseIcon="true" CloseIconClicked="@(() => SetError())">
                        <span class="upload-request-alert-text">@_errorMessage</span>
                    </MudAlert>

                }
                else if (AllowDrop && !string.IsNullOrEmpty(TextDropZone) && !HasData())
                {
                    @RenderDropZone()
                }

                <MudStack Spacing="2">

                    @if (!ReadOnly)
                    {
                        @if (AllowMultiple)
                        {
                            <InputFile @ref="_inputFile" id="@(UploadFieldId)" hidden multiple OnChange="UploadFiles" accept="@($"{_accept}")" />
                        }
                        else
                        {
                            <InputFile @ref="_inputFile" id="@(UploadFieldId)" hidden OnChange="UploadFiles" accept="@($"{_accept}")" />
                        }
                    }

                    @if (_loading || _mimeUpdating)
                    {
                        <MudProgressLinear Color="MudBlazor.Color.Primary" Indeterminate="true" Class="my-7" />
                    }
                    else
                    {
                        @foreach (var request in (UploadRequests ?? Enumerable.Empty<T>()))
                        {
                            @if (ItemIsVisibleFunc(request))
                            {
                                @RenderItem(request)
                            }
                        }
                    }
                </MudStack>
            </div>

            @if (ShowClearButton && HasData() && !ReadOnly)
            {
                <MudGrid Class="mr-5 mt-2 pr-12" Justify="Justify.FlexEnd">
                    <MudExIconButton ToolTip="@TryLocalize(TextRemoveAll)" OnClick="@RemoveAll" Icon="@Icons.Material.Filled.DeleteForever" Color="@ButtonColor" Size="Size.Small" />
                </MudGrid>
            }

            <MudGrid Justify="@ButtonsJustify" Class="mt-5 multi-upload-actions">
                @if (AllowAudioRecording && !ReadOnly)
                {
                    <div style="align-self: center;">
                        <MudExSpeechToTextButton Disabled="@(_loading || _mimeUpdating)"
                                                 ShowSpectrumOnRecording="true"
                                                 Size="@ButtonSize"
                                                 Color="@ButtonColor"
                                                 Variant="ButtonVariant"
                                                 ToolTip="@TryLocalize(TextStartRecording)"
                                                 RecordingBorderAnimation="@(ButtonVariant != Variant.Text)"
                                                 Class="mr-2 ml-2"
                                                 DeviceSelection="DeviceSelectionType.PopupEveryTime"
                                                 Language=""
                                                 OnRecognized="@AudioRecordingCallback" />
                    </div>
                }
                @if (ShowFileUploadButton && !ReadOnly)
                {

                    <MudButton HtmlTag="label"
                               Variant="@ButtonVariant"
                               Color="@ButtonColor"
                               Size="@ButtonSize"
                               Disabled="@(_loading || _mimeUpdating)"
                               StartIcon="@(AllowMultiple ? Icons.Material.Filled.FileUpload : Icons.Material.Filled.UploadFile)"
                               for="@UploadFieldId">
                        @(AllowMultiple ? TryLocalize(TextUploadFiles) : TryLocalize(TextUploadFile))
                    </MudButton>

                }

                @if (AllowFolderUpload && AllowMultiple && ShowFolderUploadButton && !ReadOnly)
                {
                    <span class="action-margin"></span>
                    <MudButton HtmlTag="label"
                               OnClick="@(UploadFolder)"
                               Variant="@ButtonVariant"
                               Color="@ButtonColor"
                               Disabled="@(_loading || _mimeUpdating)"
                               Size="@ButtonSize"
                               StartIcon="@Icons.Material.Filled.DriveFolderUpload">
                        @TryLocalize(TextUploadFolder)
                    </MudButton>
                }

                @if ((AllowExternalUrl || (RenderPickerInDialog && AnyExternalFilePicker())) && !ReadOnly)
                {
                    <span class="action-margin"></span>
                    <MudButton HtmlTag="label"
                               OnClick="@(AddUrl)"
                               Variant="@ButtonVariant"
                               Disabled="@(_loading || _mimeUpdating)"
                               Color="@ButtonColor"
                               Size="@ButtonSize"
                               StartIcon="@Icons.Material.Filled.CloudUpload">
                        @TryLocalize(RenderPickerInDialog ? TextAddExternal : TextAddUrl)
                    </MudButton>
                }

                @if (ExternalProviderRendering is ExternalProviderRendering.ActionButtons or ExternalProviderRendering.Images)
                {
                    @RenderExternalPicker
                }
                else if (!RenderPickerInDialog)
                {
                    <MudItem xs="12">
                        <MudGrid Justify="@ButtonsJustify">
                            <MudItem>
                                @RenderExternalPicker
                            </MudItem>
                        </MudGrid>
                    </MudItem>
                }
                else if (DropZoneClickAction is DropZoneClickAction.PickFromDropBox or DropZoneClickAction.PickFromGoogleDrive or DropZoneClickAction.PickFromOneDrive)
                {
                    @* Render hidden because needed for drop zone click action *@
                    <div style="display: none">
                        @RenderExternalPicker
                    </div>
                }
            </MudGrid>
        </div>

        <MudExDialog @bind-Visible="_urlDialogVisible" OptionsEx="@ExternalDialogOptions">
            <TitleContent>
                <MudText Typo="Typo.h6">
                    <MudExIcon Color="MudBlazor.Color.Secondary" Icon="@Icons.Material.Filled.CloudUpload" Class="mr-3 mb-n1" />
                    @TryLocalize(AllowExternalUrl ? TextAddUrlTitle : TextAddExternal)
                </MudText>
            </TitleContent>
            <DialogContent>
                @if (AllowExternalUrl)
                {
                    <MudText>@TryLocalize(TextAddUrlMessage)</MudText>
                    <MudTextField Immediate="true" T="string" @bind-Value="_externalUrl" Variant="Variant.Outlined"></MudTextField>
                }

                @if (RenderPickerInDialog)
                {
                    <MudGrid Class="mt-5 p-4" Justify="@ButtonsJustify">
                        <MudItem>
                            @RenderExternalPicker
                        </MudItem>
                    </MudGrid>
                }
            </DialogContent>
            <DialogActions>
                <MudButton Color="@(AllowExternalUrl ? MudBlazor.Color.Default : MudBlazor.Color.Error)" Variant="@(AllowExternalUrl ? Variant.Text :Variant.Filled)" OnClick="@AddUrl">@TryLocalize("Close")</MudButton>

                @if (AllowExternalUrl)
                {
                    <MudButton Disabled="@(!IsValidUrl(_externalUrl))"
                               Color="MudBlazor.Color.Error"
                               Variant="Variant.Filled"
                               OnClick="@(() => Add(_externalUrl).ContinueWith(_ => { _externalUrl = string.Empty; _urlDialogVisible = false; }))">
                        @TryLocalize(TextAddUrl)
                    </MudButton>
                }
            </DialogActions>
        </MudExDialog>

        @if (!string.IsNullOrWhiteSpace(HelperText))
        {
            <label style="margin-left: 8px;" class="mud-input-helper-text">@HelperText</label>
        }
    }

    private RenderFragment RenderDropZone()
    {
        @if (DropZoneTemplate != null)
            return DropZoneTemplate(this);
        return @<p style="@($"{(HasValidDropZoneClickAction ? "cursor:pointer;" : "")} {(HasErrors ? $"color: {MudExColor.Error.ToCssStringValue()}" : "")}")" @onclick="@(() => DropZoneClick(UploadFieldId))" class="mud-ex-upload-edit-drop-zone-text">@GetTextDropZone()</p>;
    }

    private RenderFragment RenderItem(T request)
    {
        var isLoading = IsLoading(request);
        var textFieldId = $"rename-{request.GetHashCode()}";
        var loadingState = isLoading ? _loadings[request] : default;
        if (ItemTemplate != null)
            return ItemTemplate((request, this));

        return @<div>
        @if (ActionsAdornment == Adornment.Start)
    {
        @RenderActionIcons(request, isLoading, textFieldId)
    }
        <MudAlert NoIcon="true"
                  Class="@($"mud-alert-message-w-100 {(SelectItemsMode == SelectItemsMode.ShowPreviewOnClick ? "mud-ex-alert-link" : "")}")"
                  Severity="@(IsSelected(request) ? Severity.Warning : (_withErrors.Contains(request) ? Severity.Error : Severity.Normal))"
                  OnClick="(a) => Select(request, a)"
                  ShowCloseIcon="@(RemoveItemButtonAlwaysRight && AllowRemovingItems && !ReadOnly && !isLoading && CanRemoveItemFunc(request))"
                  CloseIcon="@Icons.Material.Filled.Delete"
                  CloseIconClicked="(() => Remove(request))">

            <div title="@($"{request.Path?.EnsureEndsWith("/")}{request.FileName}")" style="display: flex; align-items: center; width: 90%">
                @if (isLoading)
            {
                <MudProgressCircular Class="mr-3" Size="@Size.Small" Color="@MudBlazor.Color.Info" Indeterminate="@(!ShowProgressForLoadingData)" Max="@loadingState.Size" Value="@loadingState.ReadBytes" />
            }
            else
            {
                <MudExIcon Class="mr-3" Color="@GetIconColor(request)" Icon="@GetIcon(request)" />
            }
                @if (AllowRename && !ReadOnly && !isLoading)
            {
                <MudTextField id="@textFieldId" Style="margin-top: 5px;" Class="mud-ex-collection-inline-string-edit" For="@(() => request.FileName)" Underline="false" Error="@(string.IsNullOrWhiteSpace(request.FileName))" @bind-Value="@request.FileName"></MudTextField>
            }
            else
            {
                <MudText Style="height: 12px; margin-top: -13px" Typo="Typo.subtitle1">@request.FileName</MudText>
            }
            </div>
            @if (ActionsAdornment == Adornment.End)
        {
            @RenderActionIcons(request, isLoading, textFieldId)
        }
        </MudAlert>
    </div>;
    }

    private RenderFragment RenderActionIcons(T request, bool isLoading, string textFieldId)
    {
        return @<div style="@(ActionsAdornment == Adornment.Start ? "float:left; margin-top: 15px;" : "float: right; margin-top: -24px;")">
        @if (AllowPreview && !isLoading)
    {
        <MudTooltip Text="@TryLocalize("Preview")">
            <MudIconButton OnClick="@(() => Preview(request))" Class="ml-2" Icon="@PreviewIcon" Color="@PreviewIconColor" Size="PreviewButtonSize" />
        </MudTooltip>
    }
        @if (AllowRename && ShowRenameButton && !isLoading)
    {
        <MudTooltip Text="@TryLocalize("Rename")">
            <MudIconButton OnClick="@(() => Rename(textFieldId))" Class="ml-2" Icon="@Icons.Material.Filled.Edit" Color="@PreviewIconColor" Size="PreviewButtonSize" />
        </MudTooltip>
    }
        @if (!RemoveItemButtonAlwaysRight && AllowRemovingItems && !ReadOnly && !isLoading && CanRemoveItemFunc(request))
    {
        <MudTooltip Text="@TryLocalize("Remove")">
            <MudIconButton OnClick="@(() => Remove(request))" Class="ml-2" Icon="@Icons.Material.Filled.Delete" Color="@PreviewIconColor" Size="PreviewButtonSize" />
        </MudTooltip>
    }
    </div>;
    }

    private void RenderExternalPicker(RenderTreeBuilder __builder)
    {
        @if (IsRendered)
        {
            @if (CanUseGoogleDrive && !ReadOnly)
            {
                <span class="action-margin"></span>
                <MudExGoogleFilePicker @ref="_googleFilePicker"
                                       ClientId="@GoogleDriveClientId"
                                       ActionViewMode="@ExternalPickerIconsActionViewMode()"
                                       IconsWithoutColors="@RemoveColorsFromExternalPickerIcons()"
                                       Variant="@ButtonVariant"
                                       ImageSize="@ExternalPickerImageSize"
                                       RenderBehaviourWhileInitialization="FilePickerInitialRenderBehaviour.Normal"
                                       Color="@ButtonColor"
                                       Size="@ButtonSize"
                                       MultiSelect="@AllowMultiple"
                                       AllowFolderNavigation="true"
                                       AutoLoadFileDataBytes="@AutoLoadFileDataBytes"
                                       AllowFolderSelect="@AllowFolderUpload"
                                       AllowedMimeTypes="@_allowedMimeTypes"
                                       FilesSelected="@Add">
                    @TryLocalize(TextAddFromGoogle)
                </MudExGoogleFilePicker>
            }

            @if (CanUseDropBox && !ReadOnly)
            {
                <span class="action-margin"></span>
                <MudExDropBoxFilePicker @ref="_dropBoxFilePicker"
                                        ApiKey="@DropBoxApiKey"
                                        ActionViewMode="@ExternalPickerIconsActionViewMode()"
                                        IconsWithoutColors="@RemoveColorsFromExternalPickerIcons()"
                                        RenderBehaviourWhileInitialization="FilePickerInitialRenderBehaviour.Normal"
                                        Variant="@ButtonVariant"
                                        ImageSize="@ExternalPickerImageSize"
                                        Color="@ButtonColor"
                                        Size="@ButtonSize"
                                        MaxFileSize="@MaxFileSize"
                                        MultiSelect="@AllowMultiple"
                                        AutoLoadFileDataBytes="@AutoLoadFileDataBytes"
                                        AllowedMimeTypes="@_allowedMimeTypes"
                                        FilesSelected="@Add">
                    @TryLocalize(TextAddFromDropBox)
                </MudExDropBoxFilePicker>
            }
            @if (CanUseOneDrive && !ReadOnly)
            {
                <span class="action-margin"></span>
                <MudExOneDriveFilePicker @ref="_oneDriveFilePicker"
                                         ClientId="@OneDriveClientId"
                                         ActionViewMode="@ExternalPickerIconsActionViewMode()"
                                         IconsWithoutColors="@RemoveColorsFromExternalPickerIcons()"
                                         RenderBehaviourWhileInitialization="FilePickerInitialRenderBehaviour.Normal"
                                         Variant="@ButtonVariant"
                                         ImageSize="@ExternalPickerImageSize"
                                         Color="@ButtonColor"
                                         Size="@ButtonSize"
                                         AllowFolderSelect="@AllowFolderUpload"
                                         MultiSelect="@AllowMultiple"
                                         AutoLoadFileDataBytes="@AutoLoadFileDataBytes"
                                         AllowedMimeTypes="@_allowedMimeTypes"
                                         FilesSelected="@Add">
                    @TryLocalize(TextAddFromOneDrive)
                </MudExOneDriveFilePicker>
            }
        }
    }
}
