@using MudBlazor.Extensions.Helper
@inherits MudExJsRequiredBaseComponent<MudExUploadEdit<T>>
@typeparam T;

@if (!string.IsNullOrWhiteSpace(Label))
{
    <label class="@($"{(UploadRequests?.Any() == true ? "upload-request-label-small" : "")} upload-request-label mud-input-label-animated mud-input-label-text")">@Label</label>
}

<div class="@(Variant == Variant.Outlined ? "upload-request-outlined-border" : "")">

    <div @ref="ElementReference" style="@StyleStr()" class="upload-request-edit @(AllowDrop ? "drop-zone" : "") @Class">

        @if (!string.IsNullOrWhiteSpace(_errorMessage) && DisplayErrors)
        {
            <MudAlert Style="@($"animation: {ErrorAnimation.GetAnimationCssStyle(TimeSpan.FromMilliseconds(300))};")"  Severity="Severity.Error" Class="upload-request-alert" ShowCloseIcon="true" CloseIconClicked="@(() => SetError())">
                <span class="upload-request-alert-text">@_errorMessage</span>
            </MudAlert>
        
        }
        else if (AllowDrop && !string.IsNullOrEmpty(TextDropZone) && !HasData())
        {
            <p class="mud-ex-upload-edit-drop-zone-text">@TextDropZone</p>
        }

        <MudGrid Spacing="1">

            @if (!ReadOnly)
            {
                @if (AllowMultiple)
                {
                    <InputFile @ref="_inputFile" id="@(UploadFieldId)" hidden multiple OnChange="UploadFiles" accept="@($"{GetAccept()}")" />
                }
                else
                {
                    <InputFile @ref="_inputFile" id="@(UploadFieldId)" hidden OnChange="UploadFiles" accept="@($"{GetAccept()}")" />
                }
            }

            @foreach (var request in (UploadRequests ?? Enumerable.Empty<T>()).Where(r => r?.Data != null || !string.IsNullOrEmpty(r?.Url)))
            {
                <MudItem xs="12">
                    <MudItem>
                        <MudAlert 
                              NoIcon="true"                              
                              Class="mud-alert-message-w-100"
                              Severity="@(IsSelected(request) ? Severity.Warning : (_withErrors.Contains(request) ? Severity.Error : Severity.Normal))"
                              OnClick="(a) => Select(request, a)"
                              ShowCloseIcon="@(AllowRemovingItems && !ReadOnly)"
                              CloseIcon="@Icons.Material.Filled.Delete"
                              CloseIconClicked="(() => Remove(request))">
                            <div style="display: flex; align-items: center; width: 90%">
                                <MudExIcon Class="mr-3" Color="@GetIconColor(request)" Icon="@GetIcon(request)" />
                                @if (AllowRename && !ReadOnly)
                                {
                                      <MudTextField Style="height: 12px;" Class="mud-ex-collection-inline-string-edit" DisableUnderLine="true" Error="@(string.IsNullOrWhiteSpace(request.FileName))" @bind-Value="@request.FileName"></MudTextField>
                                }
                                else
                                {
                                    <MudText Style="height: 12px; margin-top: -13px" Typo="Typo.subtitle1">@request.FileName</MudText>
                                }
                            </div>
                            @if (AllowPreview)
                            {
                                <MudIconButton OnClick="@(() => Preview(request))" Style="margin-top: -24px; float: right;" Icon="@Icons.Material.Filled.ZoomIn" Color="Color.Inherit" Size="Size.Small" />
                            }
                        </MudAlert>
                    </MudItem>
                </MudItem>
            }
        </MudGrid>
    </div>

    <div class="multi-upload-actions">
        @if (ShowFileUploadButton && !ReadOnly)
        {

            <MudButton HtmlTag="label"
                   Variant="Variant.Text"
                   Color="Color.Primary"
                   Size="Size.Small"
                   StartIcon="@(AllowMultiple ? Icons.Material.Filled.FileUpload : Icons.Material.Filled.UploadFile)"
                   for="@UploadFieldId">
                @(AllowMultiple ? TryLocalize(TextUploadFiles) : TryLocalize(TextUploadFile))
            </MudButton>

        }

        @if (AllowFolderUpload && AllowMultiple && ShowFolderUploadButton && !ReadOnly)
        {
            <span class="action-margin"></span>
            <MudButton HtmlTag="label"
                   OnClick="@(UploadFolder)"
                   Variant="Variant.Text"
                   Color="Color.Primary"
                   Size="Size.Small"
                   StartIcon="@Icons.Material.Filled.DriveFolderUpload">
                @TryLocalize(TextUploadFolder)
            </MudButton>
        }

        @if (AllowExternalUrl && !ReadOnly)
        {
            <span class="action-margin"></span>
            <MudButton HtmlTag="label"
                   OnClick="@(AddUrl)"
                   Variant="Variant.Text"
                   Color="Color.Primary"
                   Size="Size.Small"
                   StartIcon="@Icons.Material.Filled.MoreHoriz">
                @TryLocalize(TextAddUrl)
            </MudButton>
        }

        @if (ShowClearButton && HasData() && !ReadOnly)
        {
            <MudIconButton Title="@TryLocalize(TextRemoveAll)" OnClick="@RemoveAll" Style="float: right; margin-right: 15px;" Icon="@Icons.Material.Filled.DeleteForever" Color="Color.Primary" Size="Size.Small" />
        }
    </div>
</div>

@if (!string.IsNullOrWhiteSpace(HelperText))
{
    <label style="margin-left: 8px;" class="mud-input-helper-text">@HelperText</label>
}