@typeparam T
@inherits MudExTreeViewBase<T>
@namespace MudBlazor.Extensions.Components

@using Nextended.Core.Extensions
@using Nextended.Core.Types

@RenderSearchBar()

<MudList T="T" Class="@Class" Style="@StyleStr()" Dense="@Dense">

    @foreach (var item in FlattedItems().EmptyIfNull())
    {
        var search = FilterManager.GetMatchedSearch(item);
        if (search.Found && IsAllowedToSelect(item))
        {
            @ItemRender(item, search.Term)
        }
    }
</MudList>

@code {
 
    private RenderFragment ItemRender(T item, string search = "")
    {
        var context = CreateContext(item, search);
        if (ItemTemplate != null)
            return ItemTemplate(context);

        return IsSeparator(item) ? RenderSeparator() : RenderItem(context);
    }

    public virtual RenderFragment RenderItem(TreeViewItemContext<T> context)
    {
        return
        @<MudListItem T="T" Value="@context.Value" Style="@ItemStyleStr(context)" Class="@ItemClassStr(context)" OnClick="@(() => NodeClick(context.Value))">
             @RenderItemContent(context, true, true)
        </MudListItem>;
    }

    protected RenderFragment RenderPath(TreeViewItemContext<T> context)
    {
        return @<RenderChild Condition="@ShowPath">
                    <MudText Style="font-size:8pt">@context.Value.GetPathString(TextFunc, PathSeparator)</MudText>
               </RenderChild>;
    }

    protected RenderFragment RenderItemContent(TreeViewItemContext<T> context, bool checkTemplate, bool path)
    {
        return @<RenderChild>
                   @if (checkTemplate && ItemContentTemplate != null)
                   {
                       @ItemContentTemplate(context)
                   }
                   else
                   {
                       @base.RenderItemContent(context, checkTemplate)
                   }
                   @if (path)
                   {
                       @RenderPath(context)
                   }
               </RenderChild>;
    }

}
