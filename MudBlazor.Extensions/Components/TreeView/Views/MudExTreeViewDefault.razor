@typeparam T
@inherits MudExTreeViewBase<T>
@namespace MudBlazor.Extensions.Components

@RenderSearchBar()
@* <MudTreeView T="T" Class="@Class" Style="@StyleStr()" Hover="true" Items="@FilterManager.FilteredItems()" Dense="@Dense">
    <ItemTemplate>
        @{
            var search = FilterManager.GetMatchedSearch(context);
            @if (search.Found)
            {
                @ItemRender(context, search.Term)
            }
        }
    </ItemTemplate>
</MudTreeView> *@

@code {

    // private RenderFragment ItemRender(T item, string search = "")
    // {
    //     var context = CreateContext(item, search);
    //     if (ItemTemplate != null)
    //         return ItemTemplate(context);

    //     return IsSeparator(item) ? RenderSeparator() : RenderItem(context);
    // }

    // public virtual RenderFragment RenderItem(TreeViewItemContext<T> context)
    // {
    //     return
    //         @<MudTreeViewItem Expanded="@context.IsExpanded"
    //                           T="T"
    //                           Style="@ItemStyleStr(context)"
    //                           Class="@ItemClassStr(context)"
    //                           OnClick="@(() => NodeClick(context.Item))"
    //                           Items="@(context.Item?.Children?.ToHashSet())">
    //         <Content>
    //             <div style="@ContentFlexStyleStr()">
    //                 @if (ExpandBehaviour != Core.Enums.TreeViewExpandBehaviour.None)
    //                 {
    //                     <MudTreeViewItemToggleButton ExpandedIcon="@ExpandedIcon" ExpandedChanged="@(expanded => SetExpanded(context.Item, expanded))" Expanded="@context.IsExpanded" Visible="@(context.Item?.Children?.Any() == true)"/>
    //                 }
    //                 @RenderItemContent(context, true)
    //             </div>
    //         </Content>
    //     </MudTreeViewItem>;
    // }
}
