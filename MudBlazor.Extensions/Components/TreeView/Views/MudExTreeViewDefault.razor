@typeparam T
@inherits MudExTreeViewBase<T>
@namespace MudBlazor.Extensions.Components

@RenderSearchBar()
<MudTreeView T="T" Class="@Class" Style="@StyleStr()" Hover="true" Items="@FilteredItems" Dense="@Dense">
    <ItemTemplate>
        @{
            // TODO: Can in general removed but we need a statechange after filtering to update items
            var search = FilterManager.GetMatchedSearch(context.Value);
            if (search.Found)
            {
                // @ItemRender(context as TreeViewItemContext<T>)
                @ItemRender(CreateContext(context.Value, search.Term ))
            }
        }
    </ItemTemplate>
</MudTreeView>

@code {

    private RenderFragment ItemRender(TreeViewItemContext<T> context)
    {
        if (ItemTemplate != null)
            return ItemTemplate(context);

        return IsSeparator(context.Value) ? RenderSeparator() : RenderItem(context);
    }

    public virtual RenderFragment RenderItem(TreeViewItemContext<T> context)
    {
        return
            @<MudTreeViewItem @bind-Expanded="@context.Expanded"
                              T="T"
                              Style="@ItemStyleStr(context)"
                              Class="@ItemClassStr(context)"
                              OnClick="@(() => NodeClick(context.Value))"
                                  Items="@(context.Value?.Children?.Select(i => CreateContext(i, "")).ToHashSet())">
            <Content>
                <div style="@ContentFlexStyleStr()">
                    @if (ExpandBehaviour != Core.Enums.TreeViewExpandBehaviour.None)
                    {
                        <MudTreeViewItemToggleButton ExpandedIcon="@ExpandedIcon" ExpandedChanged="@(expanded => SetExpanded(context.Value, expanded))" Expanded="@context.Expanded" Visible="@(context.Value?.Children?.Any() == true)"/>
                    }
                    @RenderItemContent(context, true)
                </div>
            </Content>
        </MudTreeViewItem>;
    }
}
