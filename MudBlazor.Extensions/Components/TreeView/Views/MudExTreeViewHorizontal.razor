@typeparam T
@using Nextended.Core.Types
@inherits MudExTreeViewBase<T>
@namespace MudBlazor.Extensions.Components


<div id="@_treeId" 
     class="mud-ex-horizontal-tree-wrapper">
    @RenderSearchBar()
    <div @onkeydown="KeyDown"
         @onkeydown:stopPropagation="@KeyDownHandled"
         @onkeydown:preventDefault="@KeyDownHandled"
         @onwheel="OnWheel" 
         @onwheel:stopPropagation="true" 
         @onwheel:preventDefault="true"
         tabindex="0"
         class="mud-ex-horizontal-tree" 
         style="@StyleStr()">
        <div style="@ScrollHorizontalTree(LastSelectedNode)" class="mud-ex-horizontal-tree-scroll-wrapper">
            @{
                var items = FilterManager.FilteredItems()?.Where(n => FilterManager.GetMatchedSearch(n).Found).ToList() ?? new List<T>();
            }
            @NodeColumn(items, NodeOffset(items))
            @foreach (var node in Path().Where(n => FilterManager.GetMatchedSearch(n).Found))
            {
                @if (IsExpanded(node))
                {
                    @NodeColumn(node, NodeOffset(node))
                }
            }
        </div>
    </div>
</div>


@code {

        private RenderFragment NodeColumn(T node, double top)
        {
            return NodeColumn(node?.Children?.Where(n => FilterManager.GetMatchedSearch(n).Found), top);
        }

        private RenderFragment NodeColumn(IEnumerable<T> nodes, double top)
        {
            return 
                @<RenderChild>
                       <div class="mud-ex-horizontal-tree-column">
                           @foreach (var child in nodes ?? Enumerable.Empty<T>())
                           {
                               var search = FilterManager.GetMatchedSearch(child);
                               @if (search.Found)
                               {
                                   <div class="@GetNodeClass(child)" style="@GetNodeStyle(child, top)" @onclick="() => NodeClick(child)">
                                       <div style="@ItemStyleStr(CreateContext(child, search.Term))">
                                           @ItemRender(child, search.Term)
                                       </div>
                                   </div>
                               }
                           }
                       </div>
                       @if (AllowColumnSizeChange)
                       {
                           <MudExSplitter Dragging="ColumnSizeChanged" DontApply="true" Opacity="0" HoverOpacity="0.4" Size="@LineWidth" Vertical="true"/>
                       }
                 </RenderChild>;
        }

    private RenderFragment ItemRender(T item, string search = "")
    {
        var context = CreateContext(item, search);
        if (ItemTemplate != null)
            return ItemTemplate(context);

        return IsSeparator(item) ? RenderSeparator() : RenderItem(context);
    }

    public virtual RenderFragment RenderItem(TreeViewItemContext<T> context)
    {
        return
        @<div class="@InnerItemClassStr()">
            @RenderItemContent(context, true)
            @if(context.Value.HasChildren())
            {
                <MudExIconButton Size="Size.Small" OnClick="@(() => ToggleExpand(context.Value))" Icon="@ExpandedIcon" />
            }
        </div>;
    }
}

