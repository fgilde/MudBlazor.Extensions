@inherits MudPicker<MudExColor>
@implements IMudExComponent
@using MudBlazor.Extensions.Core
@using System.Reflection;

@Render


@code {

    protected override RenderFragment PickerContent => GetPickerContent();

    private RenderFragment DividerContent(string label)
    {
        return @<div style="margin:25px 0; position: sticky; top: 5px; z-index: 3;">
        <MudExDivider Label="@TryLocalize(label)" Size="2" Color="Color.Primary" />
    </div>;
    }

    private RenderFragment GetPickerContent()
    {
        return
            @<MudTabs Class="mud-ex-color-edit-picker" TabHeaderClass="mud-ex-tab-bar-sticky" Elevation="0" Rounded="true" ApplyEffectsToContainer="true">
                @if (HasDefinedColors)
                {
                    <MudTabPanel Text="@TryLocalize(LabelDefinedTab)">
                        @if (LegacyRender)
                        {
                            @GetOldColorSelectionList();
                        }else{
                            @GetColorSelectionList()
                        }
                    </MudTabPanel>
                }
                <MudTabPanel OnClick="@CustomTabClick" Text="@TryLocalize(@LabelCustomTab)">
                    <MudExColorPicker InitialColor="@_initialMudColorValue" ColorPickerMode="ColorPickerMode.HEX" DisableToolbar="@DisableToolbar" ValueChanged="@(Select)" PickerVariant="PickerVariant.Static" />
                </MudTabPanel>
            </MudTabs>;
    }

    private RenderFragment GetColorSelectionList()
    {
        return 
            @<MudExList GroupBy="@(x => x.Group)"
                                       Dense="true"
                                       Style="height: 450px"
                                       Virtualize="true"
                                       GroupingEnabled="true"
                                       GroupsNested="false"
                                       MultiSelection="false"
                                       SearchBoxVariant="@FilterVariant"
                                       SelectAll="false"
                                       ItemCollection="_colors" SearchBox="true" T="ColorItem">
                <ItemTemplate>           
                        <MudButton FullWidth="true" Style="@ColorItemStyle(context)" OnClick="@(_ => Select(context.Name))">
                            <MudExIcon Color="@context.Color" Icon="@Icons.Material.Filled.ColorLens"></MudExIcon>
                            <MudText Class="ml-5">@context.Name</MudText>
                        </MudButton>                    
                </ItemTemplate>
            </MudExList>;
    }

    private RenderFragment GetOldColorSelectionList()
    {
        return
            @<div>
                <MudTextField Class="mt-5 mr-5 ml-5 mb-2" Clearable="true" Variant="@FilterVariant" Immediate="true" Placeholder="@TryLocalize("Filter")" @bind-Value="@Filter" T="string"></MudTextField>
                <MudPaper Elevation="0">
                    <MudList Dense="true" Class="m-0" Clickable="true">
                        @foreach (var group in _colors.Where(c => Matches(c.Name)).GroupBy(c => c.Group))
                        {
                            @DividerContent(group.Key)
                            foreach (var context in group)
                            {
                                <MudListItem Dense="true">
                                    <MudButton FullWidth="true" Style="@ColorItemStyle(context)" OnClick="@(_ => Select(context.Name))">
                                        <MudExIcon Color="@context.Color" Icon="@Icons.Material.Filled.ColorLens"></MudExIcon>
                                        <MudText Class="ml-5">@context.Name</MudText>
                                    </MudButton>
                                </MudListItem>
                            }
                        }
                    </MudList>
                </MudPaper>
            </div>;
    }
}