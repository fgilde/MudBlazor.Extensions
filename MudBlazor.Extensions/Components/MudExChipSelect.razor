@using Nextended.Core.Extensions
@using Microsoft.AspNetCore.Components.Rendering
@inherits MudExSelect<T>
@typeparam T

@Inherited()

@*
<MudGrid>
    @if (ViewMode == ViewMode.ChipsAdditionalAbove)
    {
        <MudItem xs="12" md="12">
            @RenderChips
        </MudItem>
    }

    <MudItem xs="12" md="12">
 
        <div class="select-container">
            <MudExSelect T="@T" MultiSelectionTextFunc="MultiSelectionTextFunc"
                       Variant="@(ViewMode != ViewMode.ChipsOnly ? Variant : Variant.Text)"
                       Label="@(!Label.IsNullOrWhiteSpace() ? TryLocalize(Label) : "")" 
                       HelperText="@(!HelperText.IsNullOrWhiteSpace() ? TryLocalize(HelperText) : "")"
                       Clearable="@(!ReadOnly && Clearable)"
                       OnClose="@OnClose"
                       OnOpen="@OnOpen"
                       ReadOnly="@ReadOnly"
                       Adornment="@(ReadOnly ? Adornment.None : Adornment)"
                       SelectAll="false"
                       DisableUnderLine="@DisableUnderLine"
                       Class="@($"{CssName} {Class}")"
                       PopoverClass="@($"{CssName}-over chip-select-over")"
                       MultiSelection="@MultiSelect" 
                       AnchorOrigin="Origin.BottomCenter"
                       Style="@Style"
                       SearchBox="@FilterEnabled"
                       ChipCloseable="true"
                         SearchBoxVariant="Variant.Text"
                         SearchBoxPlaceholder="Filter"
                       ValuePresenter="@(ViewMode == ViewMode.ChipsOnly ? Enums.ValuePresenter.Chip : Enums.ValuePresenter.Text)"
                       @bind-Value="Value" 
                       @bind-SelectedValues="Selected"
                       ItemCollection="@AvailableItems"                       
                       AdornmentIcon="@AdornmentIcon">
          
            </MudExSelect>
            @if (RenderValidationComponent && For != null)
            {
                <MudTextField Class="mt-5" Style="@StyleForValidationComponent" DisableUnderLine="@DisableUnderLineForValidationComponent" For="@For" ReadOnly="true"/>
            }
        </div>
    </MudItem>
    
    @if (ViewMode == ViewMode.ChipsAdditionalBelow)
    {
        <MudItem xs="12" md="12">
            @RenderChips
        </MudItem>
    }

</MudGrid>

@code
{
    private void RenderChips(RenderTreeBuilder builder)
    {
        foreach (var item in Selected.Where(arg => arg != null))
        {
            RenderChip(builder, item);
        }
    }

    private void RenderChip(RenderTreeBuilder __builder, T item)
    {
    <MudChip Size="Size.Large" Variant="@ChipVariant" OnClose="@(( ReadOnly ? null : chip => Remove(chip, item)))" Color="@ChipColor" CloseIcon="@Icons.Material.Filled.Close">
        @RenderItem(item)
    </MudChip>
    }

    protected virtual RenderFragment RenderItem(T item)
    {
        if (ItemTemplate != null)
            return ItemTemplate(item);
        string name = ItemNameRender(item);
        return @<p>@name</p>;
    }


}
*@