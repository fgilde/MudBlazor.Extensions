@using System.Reflection
@using System.Text.RegularExpressions
@using Microsoft.AspNetCore.Components.Rendering
@using MudBlazor.Extensions.Api
@using MudBlazor.Extensions.Core.Css
@using MudBlazor.Extensions.Helper
@using MudBlazor.Extensions.Options
@using Nextended.Core.Extensions

@if (ShowHeader)
{
   @*  <HeaderForType Type="@Type"></HeaderForType> *@
}

@if (ShowInheritance)
{
    <MudBreadcrumbs Items="Inheritance.Value" Separator="<">
        <ItemTemplate Context="item">
            @if (item.Disabled)
            {
                <MudText Typo="Typo.subtitle2" Color="Color.Warning">@item.Text</MudText>
            }
            else
            {
                <MudLink Typo="Typo.subtitle2" Disabled="@item.Disabled" Href="@item.Href">@item.Text</MudLink>
            }
        </ItemTemplate>
    </MudBreadcrumbs>
}
@if (ShowTools)
{
    <MudToolBar>
        <MudSwitch Color="Color.Primary" @bind-Value="ShowInherited">Show inherited</MudSwitch>
        <MudSpacer/>
        <MudExToggleableSearch AutoCloseOnBlur="false"
                               OnKeyUp="@(() => { _= _methodPanel.ExpandAsync(); _= _propertyPanel.ExpandAsync(); })"
                               @bind-Filter="_searchString"></MudExToggleableSearch>
    </MudToolBar>
}

@if (Type.IsEnum)
{
    <p>Enum</p>

    var names = Enum.GetNames(Type).Where(s => string.IsNullOrEmpty(_searchString) || s.Contains(_searchString, StringComparison.OrdinalIgnoreCase));
    <MudExpansionPanel Expanded="@Expanded" Text="Enum Member">
        <MudTable Items="@names" Hover="true" Breakpoint="Breakpoint.Sm">
            <RowTemplate>
                <MudTd DataLabel="Member">@context</MudTd>
            </RowTemplate>
        </MudTable>
    </MudExpansionPanel>
}

@if (ShowProperties)
{
    <MudExpansionPanel @ref="_propertyPanel" Disabled="@Compact" ExpandedChanged="@OnExpandedChanged" Expanded="@(Expanded)" Text="Properties">
        @if (_properties?.Any() == true)
        {
            <MudDataGrid T="ApiMemberInfo<PropertyInfo>" Items="@_properties.Where(p => (ShowInherited || !p.IsInherited) && (ShowOnly == null || ShowOnly.Contains(p.Name)))" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter"
                         DragDropColumnReordering="true" ApplyDropClassesOnDragStarted="true"
                         DragIndicatorIcon="@Icons.Material.Filled.DragIndicator" ColumnResizeMode="ResizeMode.Column">
                
                <ToolBarContent>
                    @if (ShowHeader)
                    {
                        <MudText Typo="Typo.h6">Properties</MudText>
                    }
                </ToolBarContent>
                
                <Columns>
                    <PropertyColumn CellStyle="@CellStyleName()" Property="x => x.Name">
                        <CellTemplate>
                            @((MarkupString)(context.Item.IsStatic ? "static" : ""))
                            <a name="@context.Item.Name"></a>
                            <MudHighlighter Text="@(context.Item.Name)" HighlightedText="@_searchString"></MudHighlighter>
                        </CellTemplate>
                    </PropertyColumn>
                    @if (!Compact)
                    {
                        <PropertyColumn Property="x => x.TypeName" Title="PropertyType">
                            <CellTemplate>
                                @RenderLinks(context.Item.TypeName)
                            </CellTemplate>
                        </PropertyColumn>
                        <PropertyColumn Property="x => x.Default">
                            <CellTemplate>
                                @if (context?.Item?.Default?.StartsWith("@") == true)
                                {
                                    <MudLink Typo="Typo.subtitle2" OnClick="@(() => ShowValueForIcon(context.Item.Default))">@(context.Item.Default)</MudLink>
                                }
                                else
                                {
                                    <p>@(context?.Item.Default)</p>
                                }
                            </CellTemplate>
                        </PropertyColumn>

                        <PropertyColumn Hidden="@(!ShowInherited)" Property="x => x.MemberInfo" Title="Declared on">
                            <CellTemplate>
                                <MudLink Typo="Typo.subtitle2" Href="@($"/{ApiLinkPath.EnsureEndsWith("/")}{context.Item.MemberInfo.DeclaringType.Name}")">@ApiMemberInfo.GetGenericFriendlyTypeName(context.Item.MemberInfo.DeclaringType)</MudLink>
                            </CellTemplate>
                        </PropertyColumn>
                    }
                    <PropertyColumn Property="x => x.Description">
                        <CellTemplate>
                            @RenderLinksInDescription(context.Item.Description)
                        </CellTemplate>
                    </PropertyColumn>
                </Columns>
            </MudDataGrid>
        }
        else
        {
            if (!_loaded)
            {
                <p>Please wait...</p>
                <MudSkeleton/>
                <MudSkeleton Animation="Animation.False"/>
                <MudSkeleton Animation="Animation.Wave"/>
            }
            else
            {
                <MudAlert Severity="Severity.Info">No properties found</MudAlert>
            }
        }
    </MudExpansionPanel>
}

@if (ShowMethods)
{
    <MudExpansionPanel @ref="_methodPanel" Disabled="@Compact" ExpandedChanged="@OnExpandedChanged" Expanded="@Expanded" Text="Methods">
        @if (_methods?.Any() == true)
        {
            <MudDataGrid T="ApiMemberInfo<MethodInfo>" Items="@_methods.Where(p => ShowInherited || !p.IsInherited && (ShowOnly == null || ShowOnly.Contains(p.Name)))" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter"
                         DragDropColumnReordering="true" ApplyDropClassesOnDragStarted="true"
                         DragIndicatorIcon="@Icons.Material.Filled.DragIndicator" ColumnResizeMode="ResizeMode.Column">
                <ToolBarContent>
                    @if (ShowHeader)
                    {
                        <MudText Typo="Typo.h6">Methods</MudText>
                    }
                </ToolBarContent>
                    
                <Columns>
                    @*<PropertyColumn CellStyle="@CellStyleName()" Property="x => x.Name" />*@
                    <PropertyColumn CellStyle="@CellStyleName()" Property="x => x.Name">
                        <CellTemplate>
                            <a name="@context.Item.Name"></a>
                            @((MarkupString)(context.Item.IsStatic ? "static" : ""))
                            @RenderFunction(context.Item.Name)
                        </CellTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x => x.TypeName" Title="ReturnType">
                        <CellTemplate>
                            @RenderLinks(context.Item.TypeName)
                        </CellTemplate>
                    </PropertyColumn>

                    <PropertyColumn Hidden="@(!ShowInherited)" Property="x => x.MemberInfo" Title="Declared on">
                        <CellTemplate>
                            <MudLink Typo="Typo.subtitle2" Href="@($"/{ApiLinkPath.EnsureEndsWith("/")}{context.Item.MemberInfo.DeclaringType.Name}")">@ApiMemberInfo.GetGenericFriendlyTypeName(context.Item.MemberInfo.DeclaringType)</MudLink>
                        </CellTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x => x.Description"/>
                </Columns>
            </MudDataGrid>
        }
        else
        {
            if (!_loaded)
            {
                <p>Please wait...</p>
                <MudSkeleton/>
                <MudSkeleton Animation="Animation.False"/>
                <MudSkeleton Animation="Animation.Wave"/>
            }
            else
            {
                <MudAlert Severity="Severity.Info">No methods found</MudAlert>
            }
        }
    </MudExpansionPanel>
}

@code {
#pragma warning disable All

    private async Task ShowValueForIcon(string iconName)
    {
        var value = MudExSvg.SvgPropertyValueForName(iconName);

        await DialogService?.ShowComponentInDialogAsync<MudExIconPicker>(iconName, "",
            new Dictionary<string, object>()
                .AddOrUpdate(nameof(MudExIconPicker.PickerVariant), PickerVariant.Static)
                .AddOrUpdate(nameof(MudExIconPicker.DisableList), true)
                .AddOrUpdate(nameof(MudExIconPicker.ReadOnly), true)
                .AddOrUpdate(nameof(MudExIconPicker.PickerHeight), 230)
                .AddOrUpdate(nameof(MudExIconPicker.PickerWidth), 400)
                .AddOrUpdate(nameof(MudExIconPicker.Value), value),
            dialog =>
            {
                dialog.Icon = value;
                dialog.Buttons = MudExDialogResultAction.Ok();
            }, (DialogOptionsEx.DefaultDialogOptions ?? new DialogOptionsEx()).SetProperties(d =>
            {
                d.Resizeable = true;
                d.DragMode = MudDialogDragMode.Simple;
            })
            );
    }

    private RenderFragment RenderLinks(string typeName)
    {
        return builder => { RenderLinksRecursive(builder, typeName, 0); };
    }

    private RenderFragment RenderFunction(string function)
    {
        return builder => { RenderFunctionRecursive(builder, function, 0); };
    }

    private RenderFragment RenderLinksInDescription(string description)
    {
        return builder => { RenderLinksInDescription(builder, description, 0); };
    }

    private void RenderFunctionRecursive(RenderTreeBuilder builder, string function, int level)
    {
    // Split the function into tokens based on space, preserving other characters for processing
        var tokens = function.Split(' ');

    // Flag to control whether the next token is a method name
        bool isMethodName = false;

        for (int i = 0; i < tokens.Length; i++)
        {
            var token = tokens[i];

    // If the token is a method name, add it as plain text and set the flag to false
            if (isMethodName)
            {
                builder.AddContent(level, token);
                isMethodName = false;
            }
            else if (token.Contains("(")) // If the token contains a '(', this is the method name. Set the flag to true
            {
                builder.AddContent(level, token.Substring(0, token.IndexOf("(")));
                RenderLinksRecursive(builder, token.Substring(token.IndexOf("(")), level);
                isMethodName = true;
            }
            else if (Regex.IsMatch(token, @"^[A-Z]\w*$")) // If the token looks like a type name, linkify it
            {
                RenderLinksRecursive(builder, token, level);
            }
            else // Otherwise, add it as plain text
            {
                builder.AddContent(level, token);
            }

    // Add a space after each token, except the last one and those ending with a comma or parenthesis
            if (i < tokens.Length - 1 && !token.EndsWith(",") && !token.EndsWith("(") && !token.EndsWith(")"))
            {
                builder.AddContent(level++, " ");
            }
        }
    }


    private void RenderLinksRecursive(RenderTreeBuilder builder, string typeName, int level)
    {
        if (string.IsNullOrWhiteSpace(typeName)) return;

    // Special case: nullable type
        if (typeName.EndsWith("?"))
        {
            RenderLinksRecursive(builder, typeName.Remove(typeName.Length - 1), level);
            builder.AddContent(level++, "?");
            return;
        }

    // Special case: array type
        if (typeName.EndsWith("[]"))
        {
            RenderLinksRecursive(builder, typeName.Remove(typeName.Length - 2), level);
            builder.AddContent(level++, "[]");
            return;
        }

    // Use a regular expression to find generic types
        var match = Regex.Match(typeName, @"(.*?)(<(.*)>)?$");
        if (match.Success)
        {
    // The type without generics
            var mainType = match.Groups[1].Value;
            var linkUriForType = GetLinkUriForType(mainType);
            if (!string.IsNullOrEmpty(linkUriForType))
            {
                builder.OpenElement(level++, "a");
                builder.AddAttribute(level, "href", linkUriForType);
    //builder.AddAttribute(level, "style", TypeLinkStyleFor(mainType));
                builder.AddAttribute(level, "class", "api-link");
                builder.AddContent(level, mainType);
                builder.CloseElement();

    // The generic arguments (if any)
                var genericArgs = match.Groups[3].Value;
                var args = SplitTypes(genericArgs);
                if (args.Count > 0)
                    builder.AddContent(level++, "<");

                foreach (var arg in args)
                {
                    if (args.IndexOf(arg) > 0)
                        builder.AddContent(level++, ", ");

    // Recursive call to handle nested generic arguments
                    RenderLinksRecursive(builder, arg, level);
                }
                if (args.Count > 0)
                    builder.AddContent(level++, ">");
            }
            else
            {
                builder.AddContent(level++, mainType);
            }
        }

    }

    private void RenderLinksInDescription(RenderTreeBuilder builder, string description, int level, bool isToolTipContent = false)
    {
        if (description?.Contains("{{{") == true)
        {
            string pattern = @"\([^)]*\)"; // This regex pattern finds everything between ( and )
            string result = Regex.Replace(description, pattern, string.Empty);

            var parsedDescription = ParseDescription(result);
            foreach (var segment in parsedDescription)
            {
                if (segment.isLink)
                {
                    string tooltip = _properties?.FirstOrDefault(x => x.Name == segment.text)?.Description ?? _methods?.FirstOrDefault(m => m.Name == segment.text)?.Description;

                    if (!string.IsNullOrEmpty(tooltip) && !isToolTipContent) // Don't create a tooltip for tooltip content
                    {
                        builder.OpenComponent<MudTooltip>(level++);
                        builder.AddAttribute(level, nameof(MudTooltip.Delay), (double)1000);

                        builder.AddAttribute(level, "ChildContent", (RenderFragment)((tooltipBuilder) =>
                        {
                            // Here we render the link which is the trigger for the tooltip
                            tooltipBuilder.OpenElement(level++, "a");
                            tooltipBuilder.AddAttribute(level, "href", segment.linkHref);
                            // Hack because click events don't work ... 
                            tooltipBuilder.AddAttribute(level, "onmousedown", EventCallback.Factory.Create<MouseEventArgs>(this, () => HandleLinkClicked(segment)));
                            tooltipBuilder.AddAttribute(level, "class", "api-link");
                            tooltipBuilder.AddContent(level, segment.text);
                            tooltipBuilder.CloseElement();
                        }));

                        builder.AddAttribute(level, "TooltipContent", (RenderFragment)((tooltipContentBuilder) =>
                        {
                            // Here we render the tooltip content, which might itself contain links
                            tooltipContentBuilder.OpenElement(level++, "h4");
                            tooltipContentBuilder.AddContent(level, segment.text);
                            tooltipContentBuilder.CloseElement();
                            RenderLinksInDescription(tooltipContentBuilder, tooltip, level, true);
                        }));

                        builder.CloseComponent();
                    }
                    else
                    {
                        // If there's no tooltip, just render the link
                        builder.OpenElement(level++, "a");
                        builder.AddAttribute(level, "href", segment.linkHref);
                        builder.AddAttribute(level, "class", "api-link");
                        builder.AddContent(level, segment.text);
                        builder.CloseElement();
                    }
                }
                else
                {
                    builder.AddContent(level++, segment.text);
                }
            }
        }
        else
        {
            builder.AddContent(level++, description);
        }
    }



    private IEnumerable<(bool isLink, string text, string linkHref)> ParseDescription(string description)
    {
        // Adjusted regex pattern to capture the new notation
        var regex = new Regex(@"\{\{\{([^}]+)\}\}\}");
        int lastIdx = 0;

        foreach (Match match in regex.Matches(description))
        {
            if (match.Index > lastIdx)
            {
                yield return (false, description[lastIdx..match.Index], null); // Text before the match
            }

            // Process the matched link
            string fullName = match.Groups[1].Value;
            string linkHref = GenerateLinkHref(fullName);
            string linkText = ExtractDisplayName(fullName); // A method to extract a user-friendly name

            yield return (true, linkText, linkHref); // The link

            lastIdx = match.Index + match.Length;
        }

        if (lastIdx < description.Length)
        {
            yield return (false, description[lastIdx..], null); // Remaining text
        }
    }

    // Helper method to generate the href for the link
    private string GenerateLinkHref(string fullName)
    {
        // Assuming fullName format is like "P:MudBlazor.Extensions.Components.MudExUploadEdit`1.AllowDuplicates"
        // You will need to extract the DeclaringType and MemberName appropriately.
        // Below is a simplistic approach and might need adjustment.

        var parts = fullName.Split(new[] { '.' }, StringSplitOptions.RemoveEmptyEntries);
        string memberName = parts.Last();
        string declaringType = parts[^2]; // Second to last part is the declaring type

        // Removing backtick and generic count (e.g., `1) from type names
        declaringType = Regex.Replace(declaringType, @"`\d+", "");

        //return $"/api/{declaringType}#{memberName}";
        return $"/{ApiLinkPath.EnsureEndsWith("/")}{declaringType}/{memberName}";
    }

    // Helper method to extract a user-friendly display name from the full name
    private string ExtractDisplayName(string fullName)
    {
        // Logic to extract a more user-friendly display name
        // For now, let's just return the last part after the last period which should be the member name.
        return fullName.Split('.').Last();
    }

    private string GetLinkUriForType(string mainType)
    {
        if (string.IsNullOrEmpty(mainType))
            return null;
        if (mainType.StartsWith("("))
            mainType = mainType.TrimStart('(');
        if (string.IsNullOrEmpty(mainType) || mainType == ")" || mainType == "(" || mainType == "T" || (mainType.Length > 1 && mainType.StartsWith("T") && char.IsUpper(mainType[1])))
            return null;
        return $"/{ApiLinkPath.EnsureEndsWith("/")}{mainType}";
    }


    private List<string> SplitTypes(string types)
    {
        var result = new List<string>();
        var stack = new Stack<int>();
        var lastIndex = 0;

        for (var i = 0; i < types.Length; i++)
        {
            if (types[i] == '<')
            {
                stack.Push(i);
            }
            else if (types[i] == '>')
            {
                stack.Pop();
            }
            else if (stack.Count == 0 && types[i] == ',')
            {
                result.Add(types.Substring(lastIndex, i - lastIndex).Trim());
                lastIndex = i + 1;
            }
        }

        if (lastIndex < types.Length)
        {
            result.Add(types.Substring(lastIndex).Trim());
        }

        return result;
    }


    private string CellStyleName()
    {
        return MudExStyleBuilder.Empty()
            .WithColor(Color.Info)
            .WithFontWeight(FontWeight.Bold)
            .Build();
    }

    private Func<IApiMemberInfo, bool> _quickFilter => x =>
    {
        return string.IsNullOrWhiteSpace(_searchString)
               || x == null
               || x.Name?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true
               || x.Description?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true
               || x.TypeName?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true
               || x.Default?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true;
    };

#pragma warning restore All

}

