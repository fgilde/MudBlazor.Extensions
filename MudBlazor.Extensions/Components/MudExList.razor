@typeparam T
@inherits MudExBaseComponent<MudExList<T>>
@using MudBlazor
@using MudBlazor.Extensions.Helper
@using MudBlazor.Extensions.Helper.Internal
@using MudBlazor.Extensions.Options;

<div @attributes="UserAttributes" id="@_elementId" class="@Classname" style="@StyleStr" tabindex="-1" @onkeydown="HandleKeyDown" @onfocusout="HandleOnFocusOut" @onscroll="HandleOnScroll">
    <CascadingValue Value="@this" IsFixed="true">
        @SelectAllRender(Options.SelectAllPosition.BeforeSearchBox)

        @if (ItemCollection != null)
        {
            @if (SearchBox)
            {
                @SearchBoxRender
            }

            if (GroupingEnabled && GroupBy != null)
            {
                var gr = GetSearchedItems().GroupBy(GroupBy);
                @foreach (var group in gr)
                {
                    <MudExSelectItemGroup T="string" Text="@group.Key.ToString()" StickyTop="GetStickyTop()" Sticky="@GroupsSticky" Nested="@GroupsNested" InitiallyExpanded="@GroupsInitiallyExpanded">
                        @{
                            var groupList = group.ToList();
                        }
                        <MudVirtualize Enabled="@Virtualize" Items="groupList" Context="item" OverscanCount="@OverscanCount">
                            @ItemRender(item)
                        </MudVirtualize>
                    </MudExSelectItemGroup>
                }

            }
            else
            {

                <MudVirtualize Enabled="@Virtualize" Items="GetSearchedItems()" Context="item" OverscanCount="@OverscanCount">
                    @ItemRender(item)
                </MudVirtualize>
            }
        }
        else
        {
            @ChildContent
        }
    </CascadingValue>
</div>

@code {
    private RenderFragment SelectAllRender(Options.SelectAllPosition position) => @<div>
        @{
            if (MultiSelection && SelectAll && SelectAllPosition == position && ParentList == null)
            {
                if (SelectAllTemplate != null)
                {
                    <div class="mud-ripple" @onclick="@(() => SelectAllItems(AllSelected))" tabindex="-1">
                        @SelectAllTemplate
                    </div>
                }
                else
                {
                    <MudExListItem IgnoreItemTemplate="true" T="T" Style="cursor: pointer;" IsFunctional="true" Icon="@SelectAllCheckBoxIcon" IconColor="@Color" Text="@SelectAllText" OverrideMultiSelectionComponent="MultiSelectionComponent.None" OnClick="@(() => SelectAllItems(AllSelected))" OnClickHandlerPreventDefault="true" Dense="@(Dense || position == SelectAllPosition.NextToSearchBox)"
                           Class="@MudExCssBuilder.Default.AddClass("mb-2", position != SelectAllPosition.NextToSearchBox).Build()" />
                    @if (position == SelectAllPosition.AfterSearchBox || position == SelectAllPosition.BeforeSearchBox)
                    {
                        <MudExDivider Style="@($"{(position == SelectAllPosition.BeforeSearchBox ? "margin-bottom: 8px;" : "")}")"
                                      Color="@Color"
                                      Vertical="false"/>
                    }
                }
            }
        }
    </div>;

    private RenderFragment SearchBoxRender => @<MudExListSubheader T="T" Style="@($"position: sticky; top: -8px; padding-top: 24px; margin-top: -9px; background-color: {SearchBoxBackgroundColor.ToCssStringValue()}; z-index: 10")">
        <MudExTextField @ref="_searchField" @bind-Value="@SearchString" Class="@ClassSearchBox" Placeholder="@TryLocalize(SearchBoxPlaceholder)" KeyDownStopPropagation="@(_keyDownHandled)" KeyDownPreventDefault="@(_keyDownHandled)" OnKeyDown="SearchBoxHandleKeyDown" OnKeyUp="@(() => UpdateSelectedStyles())" OnClearButtonClick="@(() => UpdateSelectedStyles())" Immediate="true" Variant="SearchBoxVariant" Margin="Margin.Dense"
                            Color="Color" Adornment="SearchBoxAdornment" AdornmentIcon="@Icons.Material.Filled.Search" Style="@($"color:{Color}")" AdornmentColor="@(Color.IsColor ? Color.AsColor : MudBlazor.Color.Default)" AutoFocus="@SearchBoxAutoFocus" Clearable="@SearchBoxClearable">
                <MudExAdditionalAdornment Position="MoveContentPosition.AfterEnd">
                    @SelectAllRender(Options.SelectAllPosition.NextToSearchBox)
                </MudExAdditionalAdornment>
            </MudExTextField>
        @SelectAllRender(Options.SelectAllPosition.AfterSearchBox)
    </MudExListSubheader>;


    private RenderFragment ItemRender(T item) => @<div>
        @{
            if (MudExSelect != null)
            { 
                // In select box
                <MudExSelectItem Value="@item" Text="@(ItemNameRender(item))" />
            }
            else
            {
                // In list box
                <MudExListItem Value="@item" @ondblclick="@(() => OnDoubleClickHandler(new MouseEventArgs(), item))" Text="@(ItemNameRender(item))" />
            }
        }
    </div>;
}
