<Project Sdk="Microsoft.NET.Sdk.BlazorWebAssembly">

  <Import Project="..\..\MudBlazor.Extensions\version.generated.props"
          Condition="Exists('..\..\MudBlazor.Extensions\version.generated.props')" />
  <Import Condition="Exists('..\..\Shared.props')" Project="..\..\Shared.props"/>
  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <ServiceWorkerAssetsManifest>service-worker-assets.js</ServiceWorkerAssetsManifest>
    <BlazorWebAssemblyLoadAllGlobalizationData>true</BlazorWebAssemblyLoadAllGlobalizationData>
  </PropertyGroup>

  <PropertyGroup>
    <PackageName>MudBlazor.Extensions</PackageName>
    <PackageVersion>$(MudEx_PackageVersion)</PackageVersion>
    <MajorVersion>$(MudEx_MajorVersion)</MajorVersion>
    <MinorVersion>$(MudEx_MinorVersion)</MinorVersion>
    <MudBlazorVersion>$(MudBlazor_Version)</MudBlazorVersion>

    <!-- Optional: Cache-Token auf Package-Version legen -->
    <CACHE_TOKEN>$(PackageVersion)</CACHE_TOKEN>
  </PropertyGroup>

  <ItemGroup>
    <EmbeddedResource Include="Resources\ar-SA.yml" />
    <EmbeddedResource Include="Resources\bg-BG.yml" />
    <EmbeddedResource Include="Resources\cs-CZ.yml" />
    <EmbeddedResource Include="Resources\da-DK.yml" />
    <EmbeddedResource Include="Resources\de-DE.yml" />
    <EmbeddedResource Include="Resources\el-CY.yml" />
    <EmbeddedResource Include="Resources\en-US.yml" />
    <EmbeddedResource Include="Resources\es-ES.yml" />
    <EmbeddedResource Include="Resources\fr-FR.yml" />
    <EmbeddedResource Include="Resources\hr-HR.yml" />
    <EmbeddedResource Include="Resources\it-IT.yml" />
    <EmbeddedResource Include="Resources\ja-JP.yml" />
    <EmbeddedResource Include="Resources\ko-KR.yml" />
    <EmbeddedResource Include="Resources\nl-NL.yml" />
    <EmbeddedResource Include="Resources\pl-PL.yml" />
    <EmbeddedResource Include="Resources\sv-SE.yml" />
    <EmbeddedResource Include="Resources\tr-TR.yml" />
    <EmbeddedResource Include="Shared\Disqus.razor.css" />
  </ItemGroup>

  <ItemGroup>
    <None Include=".scripts\Export-CloudFlare-Deployments.ps1" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Bromix.MudBlazor.MaterialDesignIcons" Version="7.4.47.56" />
    <PackageReference Include="Microsoft.AspNetCore.Components.WebAssembly" Version="8.0.19" />
    <PackageReference Include="Microsoft.AspNetCore.Components.WebAssembly.DevServer" Version="8.0.19" PrivateAssets="all" />
    <PackageReference Include="Microsoft.Extensions.Localization" Version="8.0.19" />
    <PackageReference Include="BlazorMonaco" Version="3.3.0" />
    <PackageReference Condition="'$(Configuration)' == 'Release'" Include="MudBlazor.Extensions" Version="*-*" />
    <PackageReference Condition="'$(Configuration)' == 'Release'" Include="MudExObjectEdit.CodeGatorAdapter" Version="*-*" />
    <PackageReference Include="AKSoftware.Localization.MultiLanguages.Blazor" Version="1.5.0" />

  </ItemGroup>

  <ItemGroup Condition="'$(Configuration)' != 'Release'">
    <ProjectReference Include="..\..\MudBlazor.Extensions\MudBlazor.Extensions.csproj" />
    <ProjectReference Include="..\..\MudBlazor.Extensions.CodeGator.Adapter\MudBlazor.Extensions.CodeGator.Adapter.csproj" />
  </ItemGroup>

  <ItemGroup>
    <ServiceWorker Include="wwwroot\service-worker.js" PublishedContent="wwwroot\service-worker.published.js" />
  </ItemGroup>

  <Target Name="Translate" AfterTargets="Build" Condition="'$(Configuration)' == 'Debug'">
    <Exec IgnoreExitCode="true" Command="dotnet tool install --global ResourceTranslator.CLI" />
    <Exec IgnoreExitCode="true" Command="resourceTranslator --optionsfile $(ProjectDir)resourceTranslationOptions.json -f $(ProjectDir)Resources/en-US.yml" />
  </Target>

  <!-- Collect deployments -->
  <PropertyGroup>
    <DeploymentsOutputFile>$(ProjectDir)wwwroot/deployments.json</DeploymentsOutputFile>
  </PropertyGroup>
  <Target Name="ExportCloudflareDeployments" AfterTargets="Build" Condition="$(UpdateReadMeAndDeployments)">
    <Exec IgnoreExitCode="true" Command="powershell -NoProfile -ExecutionPolicy Bypass -File &quot;$(ProjectDir).scripts\Export-CloudFlare-Deployments.ps1&quot; -OutputFile &quot;$(DeploymentsOutputFile)&quot;" WorkingDirectory="$(ProjectDir)" />
  </Target>
  <!-- END Collect deployments -->



  <PropertyGroup>
    <!-- Quelle/Ziel -->
    <IndexTemplate>$(ProjectDir)wwwroot\index.template.html</IndexTemplate>
    <IndexOutput>$(ProjectDir)wwwroot\index.html</IndexOutput>
  </PropertyGroup>

  <!-- Erzeugt index.html VOR Build/DevServer/StaticAssets -->
  <Target Name="GenerateIndexHtml" BeforeTargets="Build;ResolveStaticWebAssets">
    <Message Importance="High" Text="Generating $(IndexOutput) from $(IndexTemplate)" />

    <!-- Hart abbrechen, wenn Template fehlt -->
    <Error Condition="!Exists('$(IndexTemplate)')"
           Text="Template not found: $(IndexTemplate). Create wwwroot\index.template.html first." />

    <!-- Token-Replacement via PowerShell (rein .NET-String.Replace, kein Regex) -->
    <Exec Command="powershell -NoProfile -ExecutionPolicy Bypass -Command ^
    $ErrorActionPreference='Stop'; ^
    $in='$(IndexTemplate)'; $out='$(IndexOutput)'; ^
    $text=[System.IO.File]::ReadAllText($in); ^
    $map=@{ ^
      'PackageName'='$(PackageName)'; ^
      'PackageVersion'='$(PackageVersion)'; ^
      'MudBlazorVersion'='$(MudBlazorVersion)'; ^
      'ComponentCount'='$(ComponentCount)'; ^
      'DemoCount'='$(DemoCount)'; ^
      'CACHE_TOKEN'='$(CACHE_TOKEN)'; ^
    }; ^
    foreach($k in $map.Keys){ $text = $text.Replace('#{'+$k+'}#', $map[$k]) }; ^
    [System.IO.File]::WriteAllText($out, $text, [System.Text.Encoding]::UTF8)" />

    <!-- sicherstellen, dass die generierte Datei veröffentlicht wird -->
    <ItemGroup>
      <Content Include="$(IndexOutput)">
        <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
        <CopyToPublishDirectory>Always</CopyToPublishDirectory>
      </Content>
      <!-- Template nicht veröffentlichen -->
      <None Include="$(IndexTemplate)" />
    </ItemGroup>

    <!-- Nachkontrolle -->
    <Error Condition="!Exists('$(IndexOutput)')" Text="Failed to generate $(IndexOutput)." />
  </Target>


</Project>
