@page "/capture-service"
@inherits BasePage
@using MudBlazor.Extensions.Core;
@using MudBlazor.Extensions.Core.Capture;
@using MudBlazor.Extensions.Core.W3C

@attribute [Demo(Name = "Capture service", Order = 0, Icon = Icons.Material.Outlined.VideoCameraBack, Documentation = "This sample demonstrate how to use the MudExCaptureService", ForComponentType = typeof(ICaptureService))]

<style>
    .p-info {
        position: absolute;
        margin-top: 35px;
        margin-left: 15px;
        z-index: 1;
        font-weight: bold;
        color: cadetblue;
    }
</style>


<DemoComponent PageType="@GetType()">

    @if (_captureId != null)
    {
        <MudButton Class="ma-5" StartIcon="@Icons.Material.Filled.Stop" Variant="Variant.Filled" Color="Color.Error" OnClick="@StopRecording">Stop Capture</MudButton>
    }
    else
    {
        <MudMenu Class="ma-5" StartIcon="@Icons.Material.Filled.VideoCameraBack" EndIcon="@Icons.Material.Filled.KeyboardArrowDown" Label="@L["Start Capture"]" Color="Color.Primary" Variant="Variant.Filled">
            <MudMenuItem OnClick="@Record">@L["Specify Options..."]</MudMenuItem>
            <MudMenuItem OnClick="@RecordQuick">@L["Specify Quick Options..."]</MudMenuItem>
            <MudDivider />
            <MudMenuItem OnClick="@RecordScreen">@L["Record Screen"]</MudMenuItem>
            <MudMenuItem OnClick="@RecordMainCamera">@L["Record Main Camera"]</MudMenuItem>
            <MudMenuItem OnClick="@RecordMainCameraLow">@L["Record Main Camera Lower Quality"]</MudMenuItem>
            <MudDivider />
            <MudMenuItem OnClick="@TakePhotoFromMainCamera">@L["Take Photo from Main camera"]</MudMenuItem>
            <MudMenuItem OnClick="@TakePhotoFromMainCamera5Sec">@L["Take Photo from Main camera in 5 seconds"]</MudMenuItem>
        </MudMenu>
    }

    @if (_captureResult != null && _captureId == null)
    {
        <MudGrid Spacing="4" Justify="Justify.Center">
            @if (_captureResult.CombinedData != null)
            {
                <MudItem xs="12">
                    <MudPaper Height="400px" Width="100%">
                        <p class="p-info">Combined result</p>
                        <MudExFileDisplay Dense="true" Style="height: 100%" FileName="@FileName("Combined", _captureResult.Options.TakePhoto)" Url="@_captureResult.CombinedData.BlobUrl" ContentType="@_captureResult.CombinedData.ContentType"></MudExFileDisplay>
                    </MudPaper>
                </MudItem>
            }
            @if (_captureResult.AudioData != null)
            {
                <MudItem xs="6">
                    <MudPaper Height="400px" Width="100%">
                        <p class="p-info">Audio result</p>
                        <MudExFileDisplay Dense="true" Style="height: 100%" FileName="Audio.mp3" Url="@_captureResult.AudioData.BlobUrl" ContentType="@_captureResult.AudioData.ContentType"></MudExFileDisplay>
                    </MudPaper>
                </MudItem>
            }
            @if (_captureResult.SystemAudioData != null)
            {
                <MudItem xs="6">
                    <MudPaper Height="400px" Width="100%">
                        <p class="p-info">System audio result</p>
                        <MudExFileDisplay Dense="true" Style="height: 100%" FileName="System audio.mp3" Url="@_captureResult.SystemAudioData.BlobUrl" ContentType="@_captureResult.SystemAudioData.ContentType"></MudExFileDisplay>
                    </MudPaper>
                </MudItem>
            }
            @if (_captureResult.CaptureData != null)
            {
                <MudItem xs="6">
                    <MudPaper Height="400px" Width="100%">
                        <p class="p-info">Capture result</p>
                        <MudExFileDisplay Dense="true" Style="height: 100%" FileName="@FileName("Captured", _captureResult.Options.TakePhoto)" Url="@_captureResult.CaptureData.BlobUrl" ContentType="@_captureResult.CaptureData.ContentType"></MudExFileDisplay>
                    </MudPaper>
                </MudItem>
            }
            @if (_captureResult.CameraData != null)
            {
                <MudItem xs="6">
                    <MudPaper Height="400px" Width="100%">
                        <p class="p-info">Camera result</p>
                        <MudExFileDisplay Dense="true" Style="height: 100%" FileName="@FileName("Camera", _captureResult.Options.TakePhoto)" Url="@_captureResult.CameraData.BlobUrl" ContentType="@_captureResult.CameraData.ContentType"></MudExFileDisplay>
                    </MudPaper>
                </MudItem>
            }
        </MudGrid>
        <div style="height: 100px;"></div>
    }

</DemoComponent>

@code {

    [Inject] private ICaptureService _captureService { get; set; }

    private CaptureResult? _captureResult;
    private CaptureId? _captureId;
    private Task StopRecording() => _captureService.StopCaptureAsync(_captureId);

    private string FileName(string name, bool isImage) => isImage ? $"{name}.png" : $"{name}.mp4";

    private void CaptureCallback(CaptureResult obj)
    {
        _captureResult = obj;
        StateHasChanged();
    }

    private async Task RecordWithOptions(CaptureOptions options)
    {
        if (options?.Valid() == true)
            _captureId = await _captureService.StartCaptureAsync(options, CaptureCallback, s => _captureId = null);
    }


    private async Task Record() => await RecordWithOptions(await _captureService.EditCaptureOptionsAsync(CaptureOptionsEditMode.Full));
    private async Task RecordQuick() => await RecordWithOptions(await _captureService.EditCaptureOptionsAsync(CaptureOptionsEditMode.Simple));

    private Task RecordScreen() => RecordWithOptions(new CaptureOptions() { ScreenCapture = true });
    private Task RecordMainCamera() => RecordWithOptions(new CaptureOptions { VideoDevice = VideoDevice.Default.ToConstraints() });
    private Task RecordMainCameraLow() => RecordWithOptions(new CaptureOptions { VideoDevice = new VideoConstraints { DeviceId = VideoDevice.Default.DeviceId, AspectRatio = 1.7, Width = 10, Height = 10 } });

    private Task TakePhotoFromMainCamera() => RecordWithOptions(new CaptureOptions { TakePhoto = true, VideoDevice = VideoDevice.Default.ToConstraints() });
    private Task TakePhotoFromMainCamera5Sec() => RecordWithOptions(new CaptureOptions { TakePhoto = true, StartDelay = TimeSpan.FromSeconds(5), VideoDevice = VideoDevice.Default.ToConstraints() });
}