@page "/dialog-appearance"
@using MudBlazor.Extensions.Options
@using MudBlazor.Extensions.Helper
@using MudBlazor.Extensions.Core
@using MudBlazor.Utilities
@using Nextended.Core.Extensions

@inject IDialogService dialogService;
@inject IJSRuntime js;

@attribute [Demo(Group = "Dialog Samples", Name = "Dialog Appearance", Documentation = "Demo for using Dialog and DialogBackground Appearance in DialogOptionsEx", Order = 0, Icon = Icons.Material.Outlined.DesktopWindows)]


<DemoComponent PageType="@GetType()">
    <SplitContainer>
        <Left>
            <div>
                <MudButton OnClick="@ShowSample1" Variant="Variant.Filled" Color="Color.Primary">Show Sample 1</MudButton>
                <MudButton OnClick="@ShowSample2" Variant="Variant.Filled" Color="Color.Primary">Show Sample 2</MudButton>
                <MudButton OnClick="@ShowSample3" Variant="Variant.Filled" Color="Color.Primary">Show Sample 3</MudButton>
            </div>
            
            @if (!string.IsNullOrEmpty(_code))
            {
                <div style="position: absolute;top: 45px;border-radius: 30px;border: 2px solid var(--mud-palette-primary);padding: 20px;overflow: auto;max-height: 400px;">
                    <MudExCodeView Theme="@(MainLayout.Instance?.IsDark == true ? CodeBlockTheme.AtomOneDark : CodeBlockTheme.Default)" Code="@_code" />
                </div>
            }

        </Left>
        <Right>
            @if (_loaded)
            {
                <MudExObjectEdit @ref="_edit" T="DialogOptionsEx" StickyToolbar="true" ToolbarColor="Color.Surface" StickyToolbarTop="-8px" DefaultGroupName="Other" Value="@Options">
                    <ToolBarContent>
                        <MudButton OnClick="@Show" Variant="Variant.Filled" Color="Color.Primary">Show With this Options</MudButton>
                    </ToolBarContent>
                </MudExObjectEdit>
            }
        </Right>
    </SplitContainer>
</DemoComponent>

@code {
    private bool _loaded;
    private string _code;
    private MudExObjectEdit<DialogOptionsEx> _edit;
    private MudColor _primaryColor;
    public DialogOptionsEx? Options { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _primaryColor = await Color.Primary.ToMudColorAsync(js);
            CreateOptions();
            _loaded = true;
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private void CreateOptions()
    {
        Options = new DialogOptionsEx
            {
                MaximizeButton = true,
                CloseButton = true,
                FullHeight = false,
                MaxWidth = MaxWidth.Medium,
                FullWidth = true,
                DragMode = MudDialogDragMode.Simple,
                Animations = new[] { AnimationType.Pulse },
                Position = DialogPosition.Center
            };
    }


    private async void Show()
    {
        _loaded = false;
        var r = await dialogService.ShowEx<SampleDialog>("Simple Dialog", dialog => { dialog.ContentMessage = "Hello from dialog sample page"; }, Options);
        _loaded = true;
        await r.Result;
        StateHasChanged();

    }

    private void ShowSample1()
    {
        _code = MudExCodeView.ExecuteAndReturnFuncAsString(() =>
        {
            Options.DialogAppearance = MudExAppearance.FromCss(MudExCss.Classes.Dialog.ColorfullGlass)
                .WithStyle(b => b
                    .WithSize(50, CssUnit.Percentage)
                    .WithMaxSize(90, 60, CssUnit.Percentage)
                    .WithBoxShadow($" 0 8px 32px 0 {_primaryColor.SetAlpha(0.4).ToString(MudColorOutputFormats.RGBA)}")
                    .WithBackgroundColor(_primaryColor.SetAlpha(0.2))
                );
            Options.DialogBackgroundAppearance = MudExAppearance.FromCss(MudExCss.Classes.Backgrounds.MovingDots)
                .WithStyle(new
                {
                    Border = "4px solid",
                    BorderColor = Color.Secondary,
                    BorderRadius = 8
                });
        });
        Show();
    }

    private void ShowSample2()
    {
        _code = MudExCodeView.ExecuteAndReturnFuncAsString(() =>
        {
            Options.DialogAppearance = MudExAppearance.FromCss(MudExCss.Classes.Dialog.Glass);
            Options.DialogBackgroundAppearance = MudExAppearance.FromCss(MudExCss.Classes.Backgrounds.LightBulb);
        });
        Show();
    }

    private void ShowSample3()
    {
        _code = MudExCodeView.ExecuteAndReturnFuncAsString(() =>
        {
            Options.SetProperties(ex => ex.Resizeable = true);
            Options.DialogAppearance = MudExAppearance.FromStyle(b =>
            {
                b.WithBackgroundColor(Color.Secondary)
                .WithOpacity(0.6)
                .WithSize(600)
                .WithMinSize(400, 300);
            });
            Options.DialogBackgroundAppearance = MudExAppearance.FromCss(MudExCss.Classes.Backgrounds.EmptyIndicator)
                .WithStyle(b => b.WithOpacity(0.5));
        });
        Show();
    }

}
