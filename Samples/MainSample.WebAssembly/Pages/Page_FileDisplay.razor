@page "/file-display"
@using MudBlazor.Extensions.Helper
@using MudBlazor.Extensions.Options
@inject IDialogService dialogService
@inject SampleDataService sampleDataService

@attribute [DemoUpdated(Group = "File Handling", Name = "File Display", Order = 0, Documentation = "See how to use MudExFileDisplay to display file contents. Also a demonstration how to implement the interface IMudExFileDisplay to provide own components for specific file types.", Icon = Icons.Material.Outlined.FolderZip, ForComponentTypes = new[] { typeof(MudExFileDisplay) })]

<DemoComponent PageType="@GetType()" CodeFiles="@(new [] {$"Pages/{GetType().Name}.razor", "Shared/MySimpleJsonDisplay.razor", "SampleDataService.cs"})">

    <MudExSelect ValuePresenter="ValuePresenter.ItemContent" HelperText="Select sample file (See weather.json to check how own components for files can be created)" ItemCollection="@_samples" Variant="Variant.Outlined" ToStringFunc="@(f => f.name)" @bind-Value="SampleFile">
        <ItemTemplate>
            <MudIcon Icon="@BrowserFileExt.IconForFile(context.contentType)"></MudIcon>
            <MudText>@context.name</MudText>
            <MudText>@context.contentType</MudText>
        </ItemTemplate>        
    </MudExSelect>

    @if (SampleFile.url != null)
    {
        <div style="width: 100%; height: 800px; margin-top: 20px">
            <MudExFileDisplay HandleContentErrorFunc="@HandleContentError"
                          Dense="true"
                          FileName="@SampleFile.name" Url="@SampleFile.url" ContentType="@SampleFile.contentType"></MudExFileDisplay>
        </div>
        <MudButton OnClick="@OpenAsDialog" Variant="Variant.Filled" Color="Color.Primary">Show As Dialog</MudButton>
    }
</DemoComponent>


@code {
    private string url;
    private List<(string url, string contentType, string name)> _samples = new ();

    protected override Task OnInitializedAsync()
    {
        _samples.AddRange(sampleDataService.GetSampleFiles());
        return Task.CompletedTask;
    }
    
    private async Task OpenAsDialog()
    {
        await dialogService.ShowFileDisplayDialog(SampleFile.url, SampleFile.name, SampleFile.contentType, HandleContentError);
    }

    private Task<MudExFileDisplayContentErrorResult> HandleContentError(IMudExFileDisplayInfos arg)
    {
        if (arg.ContentType.Contains("word"))
        {
            return Task.FromResult(MudExFileDisplayContentErrorResult
                .RedirectTo("https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTiZiqnBKWS8NHcKbRH04UkYjrCgxUMz6sVNw&usqp=CAU", "image/png")
                .WithMessage("No word plugin found we display a sheep"));
        }
        return Task.FromResult(MudExFileDisplayContentErrorResult.Unhandled);
    }


    public (string? url, string contentType, string name) SampleFile { get; set; }

}