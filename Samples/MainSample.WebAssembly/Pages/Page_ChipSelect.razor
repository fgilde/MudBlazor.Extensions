@page "/chip-select"
@using MudBlazor.Extensions.Components.ObjectEdit.Options
@inject IDialogService dialogService;

@attribute [Demo(Name = "MudExChipSelect", Icon = Icons.Material.Outlined.BubbleChart, Documentation = "MudExChipSelect can used to select items from a collection as chips", ForComponentType = typeof(MudExChipSelect<>))]


<DemoComponent PageType="@GetType()">
    <SplitContainer>
        <Left>
            <MudExChipSelect AvailableItems="@Available" @bind-SelectedValues="Selected" @ref="component"></MudExChipSelect>
            <MudButton Class="mt-5" OnClick="@OnShowClick">Show selected</MudButton>
        </Left>
        <Right>
            <ComponentPropertyGrid MetaConfiguration="@Configure()" Value="@component"></ComponentPropertyGrid>
        </Right>
    </SplitContainer>
</DemoComponent>

@code {
    
    public IEnumerable<MyChipItem> Selected { get; set; }
    public List<MyChipItem> Available { get; set; } = new()
    {
        new MyChipItem {Id = 1, Name = "Item 1"},
        new MyChipItem {Id = 2, Name = "Item 2"},
        new MyChipItem {Id = 3, Name = "Item 3"},
        new MyChipItem {Id = 4, Name = "Item 4"},
        new MyChipItem {Id = 5, Name = "Item 5"}
    };

    MudExChipSelect<MyChipItem> component;
    private Action<ObjectEditMeta<MudExChipSelect<MyChipItem>>> Configure()
    {
        return meta =>
        {
            meta.Properties(m => m.AvailableItemsLoadFunc, m => m.SelectedValues, m => m.Value, m => m.ItemTemplate, m => m.Localizer).Ignore();
            meta.IgnoreAllReadOnlyFields();
        };
    }

    public class MyChipItem
    {
        public string Name { get; set; }  
        public int Id { get; set; }  
        public override string ToString() => Name;
    }

    private async Task OnShowClick()
    {
        string str = $"{string.Join(", ", Selected.Select(s => s.Name))}";
        await dialogService.ShowInformationAsync("Selected", str);
    }

}