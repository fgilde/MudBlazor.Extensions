@page "/doc/{File?}"
@page "/d/{File?}"
@page "/doc/{File?}/{TypeName?}"
@page "/d/{File?}/{TypeName?}"
@page "/a/{TypeName?}/{Search?}"
@page "/api/{TypeName?}/{Search?}"
@using Nextended.Core.Extensions
@using MudBlazor.Extensions.Attribute
@using System.Reflection
@using MudBlazor.Extensions.Api

@if (_loaded)
{
    @if (type != null && !string.IsNullOrEmpty(TypeName))
    {
        <HeaderForType Type="@type"></HeaderForType>
        @RenderTypeApiDoc(type, GetActivePanel(), true, DocumentationValue)
    }
    else if (DocumentationAvailable)
    {
        <PageHeader>@Path.GetFileNameWithoutExtension(File)</PageHeader>
        <DemoMarkdown Value="@DocumentationValue"></DemoMarkdown>
    }
    else
    {
        <PageHeader>API</PageHeader>
        <MudExpansionPanels MultiExpansion="true">
            @foreach (var c in ComponentTypes.Api())
            {
                string docFile = GetDocFileFileForType(c);
                int idx = string.IsNullOrEmpty(docFile) ? 0 : 1;
                <MudExpansionPanel Expanded="false" Text="@ApiMemberInfo.GetGenericFriendlyTypeName(c)">
                    <ChildContent>
                        <HeaderForType DocumentationOnly="true" Typo="Typo.subtitle1" Type="@c"></HeaderForType>
                        @RenderTypeApiDoc(c, idx, false, docFile)
                    </ChildContent>
                </MudExpansionPanel>
            }
        </MudExpansionPanels>
    }
}
else
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}

@code
{
    private RenderFragment RenderTypeApiDoc(Type type, int activePanel, bool forSingleType, string documentationValue)
    {
        //<MudTabs ActivePanelIndex="@activePanel" Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
        return @<MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
                       @if (!string.IsNullOrEmpty(documentationValue))
                       {
                           <MudTabPanel Text="Documentation">
                                <DemoMarkdown Value="@documentationValue"></DemoMarkdown>
                           </MudTabPanel>
                       }
                       <MudTabPanel Text="API">
                            <MudExApiView Search="@Search" ShowHeader="false" Expanded="@forSingleType" Type="@type"></MudExApiView>
                       </MudTabPanel>
            </MudTabs>
    ;
    }

    bool _loaded;

    [Parameter]
    public string? File { get; set; }

    [Parameter]
    public string? TypeName { get; set; }

    [Parameter]
    public string? Search { get; set; }

    private Type? type = null;
    protected override async Task OnParametersSetAsync()
    {
        _loaded = false;
        await base.OnParametersSetAsync();
        if (MainLayout.Instance != null)
            MainLayout.Instance.ThemeChanged += (_, _) => StateHasChanged();
        await UpdateDocumentationOrTypeInfos();
        _loaded = true;
    }

    private async Task UpdateDocumentationOrTypeInfos()
    {
        DocumentationValue = await Http.LoadDocumentation(File.EnsureEndsWith(".md"));
        if (string.IsNullOrEmpty(DocumentationValue))
        {
            TypeName ??= File;
            File = null;
        }

        if (TypeName != null)
        {
            type = Render.GetTypeByName(TypeName);
            if (File == null && type != null)
            {
                File = GetDocFileFileForType(type);
                if (File != null)
                    DocumentationValue = await Http.LoadDocumentation(File.EnsureEndsWith(".md"));
            }
        }
    }

    private string? GetDocFileFileForType(Type t) => t?.GetCustomAttribute<HasDocumentationAttribute>()?.MarkdownFile;

    private async Task<string> GetDocumentForType(Type t)
    {
        var file = GetDocFileFileForType(t);
        return await Http.LoadDocumentation(file.EnsureEndsWith(".md"));
    }


    private string DocumentationValue { get; set; }

    private int GetActivePanel()
    {
        var uri = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        var isApiLink = uri.StartsWith("/api") || uri.StartsWith("/a") || uri.StartsWith("api/") || uri.StartsWith("a/");
        return isApiLink && DocumentationAvailable ? 1 : 0;
    }

    private bool DocumentationAvailable => !string.IsNullOrEmpty(DocumentationValue);
}
