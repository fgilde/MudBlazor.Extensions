@page "/mudex-object-edit-with-configuration"
@inject IDialogService dialogService;
@using Newtonsoft.Json
@using MudBlazor.Extensions.Components.ObjectEdit.Options
@using System.ComponentModel.DataAnnotations
@using MudBlazor.Extensions.Options

@attribute [Demo(Group = "MudExObjectEdit", Name = "With custom configuration", Order = 1, Documentation = "Demo for using MudExObjectEdit for the same model with the default Demo but with some Meta configuration", Icon = Icons.Material.Outlined.TextSnippet, ForComponentTypes = new[] { typeof(MudExObjectEdit<>), typeof(MudExObjectEditForm<>) })]

<DemoComponent PageType="@GetType()" DocFiles="@(new [] {"Docs/ObjectEdit.md"})" CodeFiles="@(new []{$"Pages/{GetType().Name}.razor", "ObjectEditMetaConfig/MySimpleTypeRegistrations.cs", "Shared/ProgrammingSkillSelect.razor"})">
    <MudButton Variant="Variant.Outlined" Color="Color.Warning" OnClick="@(() => _isLoading = !_isLoading)">Toggle loading</MudButton>
    <MudExObjectEditForm 
        T="UserInformation"
        @ref="form"
        IsLoading="@_isLoading"
        ImportNeedsConfirmation="true"
        LightOverlayLoadingBackground="@(!MainLayout.Instance.IsDark)" 
        AllowExport="true"
        AllowImport="true"
        BeforeImport="OnBeforeImport"
        AutoSkeletonOnLoad="true"
        DefaultGroupName="Misc"
        MetaConfiguration="@Configure"
        OnValidSubmit="@OnSubmit"
        Value="@User"
        StickyToolbar="true"
        StickyActionBar="true"
        ActionBarColor="@("#007799")"
        ToolbarColor="Color.Surface"
        CancelButtonVariant="Variant.Outlined"
        CancelButtonColor="Color.Warning"
        GroupLineColor="@("#cceeaa")"
        AutoSaveRestoreState="true"
        GroupingStyle="GroupingStyle.Flat">
        <ActionContent>
            <MudButton Class="ml-2" DisableElevation Variant="Variant.Filled" Color="Color.Warning">My Custom action</MudButton>
        </ActionContent>
        <ToolBarContent>
            <MudIconButton Title="Clear" Icon="@Icons.Material.Filled.ClearAll" OnClick="@(() => form.Clear())"/>
        </ToolBarContent>
    </MudExObjectEditForm>
</DemoComponent>


@code {
    MudExObjectEditForm<UserInformation> form;
    private bool _isLoading;

    private void Configure(ObjectEditMeta<UserInformation> meta)
    {
        meta.WrapEachIn<UserInformation, MudItem>(i => i.xs = 12);
        meta.WithLabelLocalizerPattern("Label_for_{0}")
            .WithDescriptionLocalizerPattern("Description_for_{0}")
            .AllProperties.WithAdditionalAttributes(new Dictionary<string, object>
                {
                {nameof(MudTextField<string>.Variant), Variant.Outlined}
                });
        meta.Property(m => m.Id).WithOrder(0).WithGroup("Name").WithAdditionalAttributes<MudTextField<string>>(true, t => t.Variant = Variant.Filled).AsReadOnly();

        meta.Property(m => m.FirstName).RenderWith(f => f.Value, new MudTextField<string>
            {
                Label = "Name",
                AdornmentColor = Color.Warning,
                Adornment = Adornment.End,
                AdornmentIcon = Icons.Filled.Key
            }).WithGroup("Name").WrapInMudItem(i => i.xs = 6);

        meta.Properties(m => m.Age, m => m.Gender).WithAdditionalAttribute("Variant", Variant.Text, true).WrapInMudItem(x => x.xs = 6);
        meta.Property(m => m.Gender)
            .WithDescription("This changes the Variant if Age is at least 18 and is enabled if Age is more than 1")
            .AsReadOnlyIf(m => m.Age < 1)
            .WithAttributesIf(model => model.Age >= 18, new Dictionary<string, object>
                {
                {nameof(MudSelect<string>.Variant), Variant.Filled}
                });

        meta.Property(m => m.LastName).WithLabel("Surname").WithAdditionalAttributes<MudTextField<string>>(
            t => t.AdornmentIcon = Icons.Outlined.Abc,
            t => t.Adornment = Adornment.End,
            t => t.Immediate = true,
            t => t.Counter = 22)
            .WithGroup("Name").WrapInMudItem(i => i.xs = 6);

        meta.Property(m => m.SomeUnimportantTestModel).RenderWith<MudTextField<string>, TestModel, string>(f => f.Value, tf =>
        {
            tf.Variant = Variant.Outlined;
                tf.Lines = 8;
            }, 
            model => JsonConvert.SerializeObject(model, Formatting.Indented), JsonConvert.DeserializeObject<TestModel>)
            .WithLabelResolver(pi => $"{pi.Name} as Json")
            .WithDescription("This is a Json representation of the TestModel. This is ignored for Export and Import")
            .WithGroup("SubModel as Json")
            .IgnoreOnExportAndImport()
            .WrapInMudItem(i => i.xs = 12);

        meta.Property(m => m.MainAddress.HouseNumber)
            .RenderWith<MudNumericField<int>, string, int>(f => f.Value, tf => tf.Variant = Variant.Outlined, int.Parse, i => i.ToString())
            .WithDescription("Here only number is configured to render with NumEdit edit but DataType is string. Also this field is ignored for import")
            .IgnoreOnImport()
            .WrapInMudItem(i => i.xs = 6);
        meta.Properties(m => m.MainAddress.Street, m => m.MainAddress.City, m => m.MainAddress.PostalCode)
            .WrapInMudItem(i => i.xs = 6);


    }

    
  // Sample data for the form
    public UserInformation User { get; set; } = new()
    {
        Id = Guid.NewGuid().ToString(),
        FirstName = "Florian",
        LastName = "Gilde",
        SomeUnimportantTestModel = new TestModel
        {
            Property1 = "Value for Property 1",
            Property2 = "Value for Property 2",
        },
        MainAddress = new Address
        {
            Street = "Street",
            HouseNumber = "1",
            PostalCode = "12345",
            City = "City"
        },
        OtherAddresses = new List<Address>
        {
            new()
            {
                Street = "Street 2",
                HouseNumber = "2",
                PostalCode = "32365",
                City = "City 2"
            }
        },
        ProgramingSkills = new List<ProgramingSkill>
        {
            new()
            {
                Name = "C#"
            },
            new()
            {
                Name = "JavaScript"
            }
        }
    };

    public class UserInformation
    {
        public string Id { get; set; }
        [Required]
        [MinLength(3)]
        public string FirstName { get; set; }
        [Required]
        [MinLength(3)]
        public string LastName { get; set; }

        [Range(10, 100)]
        [Required]
        public int Age { get; set; }
        
        [Range(1, 3)]
        public Gender Gender { get; set; }

        [Required]
        [MinLength(1)]
        public ICollection<ProgramingSkill> ProgramingSkills { get; set; }
        public Address MainAddress { get; set; }
        public ICollection<Address> OtherAddresses { get; set; }
        public string Notice { get; set; }
        public TestModel SomeUnimportantTestModel { get; set; }
    }

    public class ProgramingSkill : IEquatable<ProgramingSkill>
    {
        public bool Equals(ProgramingSkill? other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;
            return Name == other.Name;
        }

        public override bool Equals(object? obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != this.GetType()) return false;
            return Equals((ProgramingSkill) obj);
        }

        public override int GetHashCode()
        {
            return Name.GetHashCode();
        }

        public static bool operator ==(ProgramingSkill? left, ProgramingSkill? right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ProgramingSkill? left, ProgramingSkill? right)
        {
            return !Equals(left, right);
        }


        public string Name { get; set; }
        public override string ToString() => Name;
    }

    public class Address
    {
        [Required]
        public string Street { get; set; }
        public string HouseNumber { get; set; }
        public string PostalCode { get; set; }
        [Required]
        public string City { get; set; }
        public override string ToString() => $"{Street} {HouseNumber}, {PostalCode} {City}";
    }
    
    public class TestModel
    {
        public string Property1 { get; set; }
        public string Property2 { get; set; }
    }

    public enum Gender
    {
        PleaseSelect,
        Male,
        Female,
        Other
    }

    private async Task OnSubmit(EditContext ctx)
    {
        await Task.Delay(1000); // Simulate server save or whatever
        var asString = JsonConvert.SerializeObject(ctx.Model, Formatting.Indented);
        await dialogService.ShowEx<SampleDialog>("Result", sd => sd.ContentMessage = asString, new DialogOptionsEx
        {
            Position = DialogPosition.TopCenter,
            Animation = AnimationType.Slide,
            MaxWidth = MaxWidth.Medium
        });
    }

    private void OnBeforeImport(ImportData<UserInformation> importData)
    {
        // Here you can modify the data before it is imported
        // For example you can remove some properties or change the values
        // This is called before the import is executed
        // importData.Json = "{\"FirstName\": \"Changed Test\"}";

    }

}