@page "/test"
@using MudBlazor.Extensions.Core
@using MudBlazor.Extensions.Enums


<MudGrid>
    <MudItem xs="12" sm="6">
        <MudExSelect Label="Select Player" ToStringFunc="@(new Func<Tuple<string, string, bool>, string>(StringFunc))" Placeholder="Standard" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
            @foreach (var item in _players)
            {
                <MudExSelectItem Value="item">@(item.Item1 + " - Total Score: " + item.Item2)</MudExSelectItem>
            }
        </MudExSelect>
    </MudItem>

    <MudItem xs="12" sm="6">
        <MudExSelect ItemCollection="_players" ValuePresenter="ValuePresenter.ItemContent" Placeholder="Template & ItemContent" Label="Select Player" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
            <ItemTemplate>
                <MudStack Class="mud-width-full" Justify="Justify.SpaceBetween">
                    <MudText><b>@context.Value.Item1</b></MudText>
                    <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                        <MudStack Row="true">
                            <MudIcon Icon="@Icons.Material.Outlined.Person" />
                            <MudText>@(context.Value.Item3 == true ? "Retired" : "Active")</MudText>
                            </MudStack>
                            <MudChip Color="Color.Info" Variant="Variant.Outlined">Total Score: @context.Value.Item2</MudChip>
                        </MudStack>
                    </MudStack>
                </ItemTemplate>
            </MudExSelect>
        </MudItem>

        <MudItem xs="12" sm="6">
            <MudExSelect ItemCollection="_players" DisableSelectedBackground="true" ValuePresenter="ValuePresenter.Chip" MultiSelection="true" Placeholder="Both Templates & MultiSelection" Label="Select Player" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                <ItemTemplate>
                    <MudStack Class="mud-width-full" Justify="Justify.SpaceBetween">
                        <MudText><b>@context.Value.Item1</b></MudText>
                        <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                            <MudStack Row="true">
                                <MudIcon Icon="@Icons.Material.Outlined.Person" />
                                <MudText>@(context.Value.Item3 == true ? "Retired" : "Active")</MudText>
                            </MudStack>
                            <MudChip Color="Color.Info" Variant="Variant.Outlined">Total Score: @context.Value.Item2</MudChip>
                        </MudStack>
                    </MudStack>
                </ItemTemplate>

                <ItemSelectedTemplate>
                    <MudStack Class="mud-width-full" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                        <MudText><b>@context.Value.Item1</b></MudText>
                        <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                            <MudStack Row="true">
                                <MudIcon Icon="@Icons.Material.Outlined.Person" />
                                @*<MudText>@(context.Value.Item3 == true ? "Retired" : "Active")</MudText>*@
                            </MudStack>
                            <MudChip Color="Color.Info" Variant="Variant.Outlined">Total Score: @context.Value.Item2</MudChip>
                        </MudStack>
                    </MudStack>
                </ItemSelectedTemplate>
            </MudExSelect>
        </MudItem>

        <MudItem xs="12" sm="6">
            <MudExSelect Label="Select Player" ToStringFunc="@(new Func<Tuple<string, string, bool>, string>(StringFunc))" Placeholder="Disabled Template" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                <ChildContent>
                @foreach (var item in _players)
                {
                    <MudExSelectItem Value="item" Disabled="@(item.Item1.Contains("LeBron") ? false : true)">@(item.Item1 + " - Total Score: " + item.Item2)</MudExSelectItem>
                }
            </ChildContent>

            <ItemDisabledTemplate>
                <MudStack Row="true">
                    <MudText>@context.Value.Item1</MudText>
                    <MudText>Player is unavailable</MudText>
                </MudStack>
            </ItemDisabledTemplate>
        </MudExSelect>
    </MudItem>
</MudGrid>

<MudGrid>
    <MudItem xs="12" sm="8" Class="d-flex gap-4">
        <MudExSelect MultiSelection="@_multiselection" ItemCollection="_states" SearchBox="true" SearchBoxAutoFocus="@_searchBoxAutoFocus" T="string" Label="Standard Search" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" HelperText="Search with 'Contains' logic" SearchBoxClearable="_searchBoxClearable" />
        <MudExSelect MultiSelection="@_multiselection" ItemCollection="_states" SearchBox="true" SearchBoxAutoFocus="@_searchBoxAutoFocus" SearchFunc="@(new Func<string, string, bool>(SearchItems))" T="string" Label="Custom Search Func" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" SearchBoxPlaceholder="Some Placeholder" HelperText="Search with 'StartsWith' logic" SearchBoxClearable="_searchBoxClearable" />
    </MudItem>

    <MudItem xs="12" sm="4">
        <MudStack>
            <MudSwitch @bind-Checked="_multiselection" Color="Color.Primary" Label="MultiSelection" />
            <MudSwitch @bind-Checked="_searchBoxAutoFocus" Color="Color.Primary" Label="AutoFocus (SearchBox)" />
            <MudSwitch @bind-Checked="_searchBoxClearable" Color="Color.Primary" Label="Clearable (SearchBox)" />
        </MudStack>
    </MudItem>
</MudGrid>

@code {
    bool _multiselection;
    bool _searchBoxAutoFocus;
    bool _searchBoxClearable;

    private string[] _states =
    {
        "Alabama", "Alaska", "American Samoa", "Arizona",
        "Arkansas", "California", "Colorado", "Connecticut",
        "Delaware", "District of Columbia", "Federated States of Micronesia",
        "Florida", "Georgia", "Guam", "Hawaii", "Idaho",
        "Illinois", "Indiana", "Iowa", "Kansas", "Kentucky",
        "Louisiana", "Maine", "Marshall Islands", "Maryland",
        "Massachusetts", "Michigan", "Minnesota", "Mississippi",
        "Missouri", "Montana", "Nebraska", "Nevada",
        "New Hampshire", "New Jersey", "New Mexico", "New York",
        "North Carolina", "North Dakota", "Northern Mariana Islands", "Ohio",
        "Oklahoma", "Oregon", "Palau", "Pennsylvania", "Puerto Rico",
        "Rhode Island", "South Carolina", "South Dakota", "Tennessee",
        "Texas", "Utah", "Vermont", "Virgin Island", "Virginia",
        "Washington", "West Virginia", "Wisconsin", "Wyoming",
    };

    private bool SearchItems(string value, string searchString)
    {
        if (searchString == "")
        {
            return true;
        }

        if (value.StartsWith(searchString, StringComparison.CurrentCultureIgnoreCase))
        {
            return true;
        }

        return false;
    }
    Tuple<string, string, bool>[] _players = new Tuple<string, string, bool>[]
    {
       new Tuple<string, string, bool>("Kareem Abdul-Jabbar", "38.387", true),
       new Tuple<string, string, bool>("LeBron James", "37.062", false),
       new Tuple<string, string, bool>("Karl Malone", "36.928", true),
       new Tuple<string, string, bool>("Kobe Bryant", "33.643", true),
       new Tuple<string, string, bool>("Michael Jordan", "32.292", true),
    };

    private string StringFunc(Tuple<string, string, bool> tuple)
    {
        if (tuple == null)
        {
            return null;
        }
        return tuple.Item1 + " - Total Score: " + tuple.Item2;
    }
}

