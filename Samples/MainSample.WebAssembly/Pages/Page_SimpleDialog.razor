@page "/simple-dialogs"
@inherits BasePage

@using BlazorJS
@using MudBlazor.Extensions.Core

@attribute [Demo(Group = "Dialog Samples", Name = "Simple Dialogs", Documentation = "Demo for simple integrated useful dialogs. Prompt, Info, MessageBox", Order = 80, Icon = MaterialDesignIcons.Normal.FormTextbox, ForComponentTypes = new[] { typeof(MudExMessageDialog), typeof(MudExPromptDialog) })]

<DemoComponent PageType="@GetType()">

    <MudExGroupBox Text="Simple Dialogs">
        <MudGrid Style="width: 100%" Justify="Justify.Center">
            <MudItem xs="3" Class="mb-4">
                <MudMenu Class="ma-5" EndIcon="@Icons.Material.Filled.KeyboardArrowDown" Label="Simple Prompt" Color="Color.Primary" Variant="Variant.Filled">
                    <MudMenuItem OnClick="@Prompt">@L["Simple Prompt"]</MudMenuItem>
                    <MudMenuItem OnClick="@PromptWithColors">Simple Prompt with Colors</MudMenuItem>
                </MudMenu>
            </MudItem>
            <MudItem xs="3" Class="mb-4">
                <MudButton Class="mt-3" Size="Size.Large" OnClick="@MessageBox" Variant="Variant.Outlined" Color="Color.Primary">@L["Simple Confirmation"]</MudButton>
            </MudItem>
            <MudItem xs="3" Class="mb-4">
                <MudButton Class="mt-3" Size="Size.Large" OnClick="@ShowInfo" Variant="Variant.Outlined" Color="Color.Secondary">@L["Show info"]</MudButton>
            </MudItem>
        </MudGrid>
    </MudExGroupBox>

    <MudExGroupBox Class="mt-1" Text="Items Pick and edit">
        <p>@L["You have {0} Users where you can pick from", Users.Count]</p>

        <MudGrid Style="width: 100%" Justify="Justify.Center">
            <MudItem xs="3" Class="mb-4">
                <MudMenu Class="ma-5" EndIcon="@Icons.Material.Filled.KeyboardArrowDown" Label="Pick Item(s)" Color="Color.Primary" Variant="Variant.Filled">
                    <MudMenuItem OnClick="@PickItem">@L["Pick Item"]...</MudMenuItem>
                    <MudMenuItem OnClick="@PickItems">@L["Pick Items"]...</MudMenuItem>
                    <MudDivider />
                    <MudMenuItem OnClick="@ForcePickItem">@L["Force pick Item"]...</MudMenuItem>
                    <MudMenuItem OnClick="@ForcePickItems">@L["Force pick Items"]...</MudMenuItem>
                </MudMenu>
            </MudItem>
            <MudItem xs="3" Class="mb-4">
                <MudMenu Class="ma-5" EndIcon="@Icons.Material.Filled.KeyboardArrowDown" Label="Select Item(s)" Color="Color.Primary" Variant="Variant.Filled">
                    <MudMenuItem OnClick="@SelectItem">@L["Select Item"]...</MudMenuItem>
                    <MudMenuItem OnClick="@SelectItems">@L["Select Items"]...</MudMenuItem>
                    <MudDivider />
                    <MudMenuItem OnClick="@ForceSelectItem">@L["Force select Item"]...</MudMenuItem>
                    <MudMenuItem OnClick="@ForceSelectItems">@L["Force select Items"]...</MudMenuItem>
                </MudMenu>
            </MudItem>
            <MudItem xs="3" Class="mb-4">
                <MudButton Class="mt-3" Size="Size.Large" OnClick="@EditItems" Variant="Variant.Outlined" Color="Color.Secondary">@L["Edit Items"]</MudButton>
            </MudItem>
        </MudGrid>
    </MudExGroupBox>

    @if (!string.IsNullOrEmpty(_code))
    {
        <MudExGroupBox Class="mt-1" Text="Code">
            <MudExCodeView Theme="@(MainLayout.GetCodeBlockTheme())" Code="@_code"/>
        </MudExGroupBox>
    }

</DemoComponent>

@code {
    private string _code;
    public List<UserModel> Users { get; set; } =
        [
        new() { FirstName = "Florian", LastName = "Gilde", Password = "xyz1234" },
        new() { FirstName = "Peter", LastName = "Griffin", Password = "jdojdo90udu" },
        new() { FirstName = "Bart", LastName = "Simpson", Password = "ayCaramba" },
        new() { FirstName = "Simon", LastName = "Pack", Password = "dsasdI)SH)(" }
    ];

    private async Task EditItems()
    {
        _code = MudExCodeView.ExecuteAndReturnFuncAsString(async () =>
        {
            Users = (await DialogService.EditItemsAsync(L["Edit Users"], L["Here you can edit the users, but only confirm if count is at least 2"], Users, canCancel: false, validResult: users => users.Count >= 2)).ToList();
        });
    }

    private async Task PickItems()
    {
        _code = MudExCodeView.ExecuteAndReturnFuncAsString(async () =>
        {
            var res = await DialogService.PickItemsAsync<UserModel>(L["Pick some users"], L["In this sample you can pick multiple users"], Users);
            if (res?.Length > 0)
                await JsRuntime.AlertAsync($"{L["You picked"]} ({res.Length}) {string.Join(",", res.Select(u => u.FirstName))}");
        });
    }

    private async Task PickItem()
    {
        _code = MudExCodeView.ExecuteAndReturnFuncAsString(async () =>
        {
            var res = await DialogService.PickItemAsync<UserModel>(L["Pick one user"], L["In this sample you can pick one user"], Users);
            if (res != null)
                await JsRuntime.AlertAsync($"{L["You picked"]} {res}");
        });
    }

    private async Task ForcePickItems()
    {
        _code = MudExCodeView.ExecuteAndReturnFuncAsString(async () =>
        {
            var res = await DialogService.PickItemsAsync<UserModel>(L["Pick one user"], L["In this sample you are forced to pick some users"], Users, true, false, cmpConfigure: list => list.SearchBox = false);
            if (res?.Length > 0)
                await JsRuntime.AlertAsync($"{L["You picked"]} ({res.Length}) {string.Join(",", res.Select(u => u.FirstName))}");
        });
    }

    private async Task ForcePickItem()
    {
        _code = MudExCodeView.ExecuteAndReturnFuncAsString(async () =>
        {
            var res = await DialogService.PickItemAsync<UserModel>(L["Pick one user"], L["In this sample you are forced to pick an user"], Users, true, false, cmpConfigure: list => list.SearchBox = false);
            if (res != null)
                await JsRuntime.AlertAsync($"{L["You picked"]} {res}");
        });
    }


    private async Task SelectItems()
    {
        _code = MudExCodeView.ExecuteAndReturnFuncAsString(async () =>
        {
            var res = await DialogService.SelectItemsAsync<UserModel>(L["Pick some users"], L["In this sample you can select multiple users"], Users);
            if (res?.Length > 0)
                await JsRuntime.AlertAsync($"{L["You picked"]} ({res.Length}) {string.Join(",", res.Select(u => u.FirstName))}");
        });
    }

    private async Task SelectItem()
    {
        _code = MudExCodeView.ExecuteAndReturnFuncAsString(async () =>
        {
            var res = await DialogService.SelectItemAsync<UserModel>(L["Pick one user"], L["In this sample you can select one user"], Users);
            if (res != null)
                await JsRuntime.AlertAsync($"{L["You picked"]} {res}");
        });
    }

    private async Task ForceSelectItems()
    {
        _code = MudExCodeView.ExecuteAndReturnFuncAsString(async () =>
        {
            var res = await DialogService.SelectItemsAsync<UserModel>(L["Pick one user"], L["In this sample you are forced to select some users"], Users, true, false, cmpConfigure: list => list.SearchBox = false);
            if (res?.Length > 0)
                await JsRuntime.AlertAsync($"{L["You picked"]} ({res.Length}) {string.Join(",", res.Select(u => u.FirstName))}");
        });
    }

    private async Task ForceSelectItem()
    {
        _code = MudExCodeView.ExecuteAndReturnFuncAsString(async () =>
        {
            var res = await DialogService.SelectItemAsync<UserModel>(L["Pick one user"], L["In this sample you are forced to select an user"], Users, true, false, cmpConfigure: list => list.SearchBox = false);
            if (res != null)
                await JsRuntime.AlertAsync($"{L["You picked"]} {res}");
        });
    }


    private async Task MessageBox()
    {
        _code = MudExCodeView.ExecuteAndReturnFuncAsString(async () =>
        {
            var res = await DialogService.ShowConfirmationDialogAsync(L["Confirmation"], L["Are you sure?"], L["Yes"], L["No"]);
            await JsRuntime.AlertAsync($"{L["You clicked"]} {(res ? L["Yes"] : L["No"])}");
        });
    }

    private async Task Prompt()
    {
        _code = MudExCodeView.ExecuteAndReturnFuncAsString(async () =>
        {
            var name = await DialogService.PromptAsync(L["Enter name"], L["Please enter your name"], Icons.Material.Filled.VerifiedUser, s => !string.IsNullOrEmpty(s));
            if (name != null)
                await JsRuntime.AlertAsync($"{L["Hello"]} {name}");
        });
    }

    private async Task PromptWithColors()
    {
        _code = MudExCodeView.ExecuteAndReturnFuncAsString(async () =>
        {
            var parameters = new DialogParameters
            {
                {nameof(MudExPromptDialog.OkColor), Color.Primary},
                {nameof(MudExPromptDialog.CancelVariant), Variant.Outlined}
            };
            var name = await DialogService.PromptAsync(L["Enter name"], L["Please enter your name"], Icons.Material.Filled.VerifiedUser, s => !string.IsNullOrEmpty(s),parameters);
            if (name != null)
                await JsRuntime.AlertAsync($"{L["Hello"]} {name}");
        });
    }


    private async Task ShowInfo()
    {
        _code = MudExCodeView.ExecuteAndReturnFuncAsString(async () =>
        {
            int seconds = 5;
            IMudExDialogReference<MudExMessageDialog>? dlg = await DialogService.ShowInformationAsync(L["Information"], L["This is a simple information dialog that closes after {0} seconds", seconds], Icons.Material.Filled.Info, false, true);
            for (int i = 0; i < seconds; i++)
            {
                await Task.Delay(1000);
                dlg.ExecuteOnDialogComponent(async dialog =>
                {
                    dialog.ProgressValue = (i + 1) * 100 / seconds;
                    dialog.Message = L["This is a simple information dialog that closes after {0} seconds", seconds - i - 1];
                    await dialog.InvokeStateHasChanged();
                });
            }

            dlg.Close();
        });

    }

}
