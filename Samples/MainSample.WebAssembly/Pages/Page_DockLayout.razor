@page "/dock-layout"
@inherits BasePage
@using MudBlazor.Extensions.Components.ObjectEdit.Options

@attribute [Demo(Name = "MudExDockLayout", Icon = Icons.Material.Outlined.ColorLens, Documentation = "Dock", ForComponentType = typeof(MudExDockLayout))]

<MudButton OnClick="@Save">Save</MudButton>
<MudButton OnClick="@Restore">Restore</MudButton>


<MudExDockLayout @ref="_layout">
    <!-- Root teilt horizontal -->
    <MudExDockItem Direction="DockDirection.Right">

        <!-- Linke Spalte: Container teilt vertikal -->
        <MudExDockItem Title="LeftArea" Direction="DockDirection.Below">
            <MudExDockItem Title="Top">
                <MudText Typo="Typo.h6">Oben</MudText>
            </MudExDockItem>
            <MudExDockItem Title="Bottom">
                <MudButton OnClick="@(() => cc++)" Color="Color.Primary">Click me @cc</MudButton>
            </MudExDockItem>
        </MudExDockItem>

        <!-- Rechte Spalte: Leaf -->
        <MudExDockItem Title="Super Right">
            <p>Whatever 2</p>
        </MudExDockItem>

    </MudExDockItem>
</MudExDockLayout>




@code {
    int cc = 0;
    private MudExDockLayout? _layout;
    private string initJson = """{"grid":{"root":{"type":"branch","data":[{"type":"leaf","data":{"views":["MudExDockLayout-0.1","MudExDockLayout-0.0.1","MudExDockLayout-0.0.0"],"activeView":"MudExDockLayout-0.0.0","id":"3"},"size":1250}],"size":782.390625},"width":1250,"height":782.390625,"orientation":"HORIZONTAL"},"panels":{"MudExDockLayout-0.1":{"id":"MudExDockLayout-0.1","contentComponent":"blazor","title":"Super Right"},"MudExDockLayout-0.0.1":{"id":"MudExDockLayout-0.0.1","contentComponent":"blazor","title":"Bottom"},"MudExDockLayout-0.0.0":{"id":"MudExDockLayout-0.0.0","contentComponent":"blazor","title":"Top"}},"activeGroup":"3"}""";
    private string json;
    protected override void OnInitialized()
    {
        json = initJson;
        base.OnInitialized();
    }

    private async Task Save()
    {
        json = await _layout!.SaveLayoutAsync();
        // -> in DB/LocalStorage sichern
        Console.WriteLine(json);
    }

    private async Task Restore()
    {
        await _layout!.RestoreLayoutAsync(json);
    }
}


@* <DemoComponent PageType="@GetType()" >
    <SplitContainer>
        <Left>
            <MudExColorEdit Value="Color.Secondary" @ref="component"></MudExColorEdit>
        </Left>
        <Right>
            <ComponentPropertyGrid MetaConfiguration="@Configure()" Value="@component"></ComponentPropertyGrid>
        </Right>
    </SplitContainer>
</DemoComponent> *@


@code {
    // MudExColorEdit component;
    // private Action<ObjectEditMeta<MudExColorEdit>> Configure()
    // {
    //     return meta =>
    //     {
    //         meta.Property(m => m.Localizer).Ignore();
    //         meta.Property(m => m.CssVars).Ignore();
    //         meta.Property(m => m.Color).WithAdditionalAttribute(nameof(MudColorPicker.ShowAlpha), false, true);
    //         meta.IgnoreAllReadOnlyFields();
    //     };
    // }

}