@using Nextended.Core.Extensions
@using System.Reflection.Metadata
@using System.Reflection

<HeaderForDemo Type="@PageType" />

<MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
    <MudHidden Breakpoint="Breakpoint.MdAndDown">
        <p style="top: 0; position: absolute; right: 0; margin-right: 22px; margin-top: -38px; font-size: 18pt; color: var(--mud-palette-primary); font-weight: bold;">
            @Title
        </p>
    </MudHidden>
    <MudTabPanel Text="Demo">
        @ChildContent
    </MudTabPanel>
    
    @if (!string.IsNullOrEmpty(CodeFile))
    {
        <MudTabPanel Text="Code">
            <MudCard>
                @if (CodeFiles is { Length: > 1 })
                {
                    <MudSelect Label="File" @bind-Value="@SelectedCodeFile" Variant="Variant.Outlined" Color="Color.Primary">
                        @foreach (var file in CodeFiles)
                        {
                            <MudSelectItem Value="@file">@System.IO.Path.GetFileName(file)</MudSelectItem>
                        }
                    </MudSelect>
                }
                <MudLink Href="@SelectedCodeFilePath" Target="_blank" Color="Color.Primary">Show on github</MudLink>
            </MudCard>
            <DemoMarkdown Value="@SelectedCodeValue"></DemoMarkdown>

        </MudTabPanel>
    }
    
    @if (_docFiles?.Any() == true)
    {       
        <MudTabPanel Text="Documentation">
                <MudCard>
                @if (_docFiles.Count > 1)
                    {
                        <MudSelect Label="File" @bind-Value="@_selectedDoc" Variant="Variant.Outlined" Color="Color.Primary">
                        @foreach (var doc in _docFiles)
                            {
                                <MudSelectItem Value="@doc.Value">@Path.GetFileNameWithoutExtension(doc.Key))</MudSelectItem>
                            }
                        </MudSelect>
                    }
                </MudCard>
            <DemoMarkdown Value="@(_selectedDoc ?? _docFiles.First().Value)"></DemoMarkdown>

            </MudTabPanel>

    }

    @if (DemoAttribute?.RelatedComponents?.Any() == true)
    {
        <MudTabPanel Text="Api">
            <MudCard>
                @if (DemoAttribute.RelatedComponents.Count() > 1)
                {
                    <MudSelect Label="Type" @bind-Value="@_selectedApiType" Variant="Variant.Outlined" Color="Color.Primary">
                        @foreach (var type in DemoAttribute?.RelatedComponents ?? Array.Empty<Type>())
                        {
                            <MudSelectItem Value="@type">@Api.GetTypeName(type)</MudSelectItem>
                        }
                    </MudSelect>
                }
            </MudCard>

            <Api Type="@(_selectedApiType ?? DemoAttribute?.RelatedComponents.First())"></Api>

        </MudTabPanel>
    }

</MudTabs>

@code {

    #region private fields

    private Dictionary<string, string> _docFiles = new();
    private string? _selectedDoc;
    private string _selectedCodeFile;
    private Type? _pageType;
    private Type? _selectedApiType;
    private string? _title;
    [Inject] HttpClient http { get; set; }

    #endregion

    #region Parameter

    [Parameter]
    public string? Title
    {
        get => _title ??= FallbackTitle();
        set => _title = value;
    }

    [Parameter]
    public string CodeFile
    {
        get => CodeFiles?.FirstOrDefault();
        set => CodeFiles = new[] { value };
    }

    public string SelectedCodeFilePath { get; set; }

    [Parameter]
    public Type? PageType
    {
        get => _pageType;
        set
        {
            _pageType = value;
            if (_pageType != null && string.IsNullOrEmpty(CodeFile))
            {
                CodeFile = $"Pages/{_pageType.Name}.razor";
            }
        }
    }

    [Parameter] public string[]? CodeFiles { get; set; }
    [Parameter] public string[]? DocFiles { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }

    public DemoAttribute? DemoAttribute => PageType?.GetCustomAttribute<DemoAttribute>();

    #endregion

    public string SelectedCodeValue { get; set; }

    private string FallbackTitle()
    {
        var res = _pageType != null ? _pageType.Name : CodeFile;
        return string.IsNullOrEmpty(res) ? "Demo" : res.Split("/").LastOrDefault()?.Replace("Page_", "")?.Replace(".razor", "") ?? "Demo";
    }

    private string SelectedCodeFile
    {
        get => _selectedCodeFile;
        set
        {
            _selectedCodeFile = value;
            SelectedCodeFilePath = value.StartsWith("http") ? value : GH.Path(value);
            SelectedCodeValue = "Loading...";
            StateHasChanged();
            http.GetStringAsync(SelectedCodeFilePath).ContinueWith(async task =>
            {
                SelectedCodeValue = MudExCodeView.CodeAsMarkup(task.Result);
                await InvokeAsync(() =>
                {
                    StateHasChanged();
                });
            });
        }
    }

    protected override async Task OnInitializedAsync()
    {
        SelectedCodeFile = CodeFiles.FirstOrDefault();
        await base.OnInitializedAsync();

        try
        {
            foreach (var doc in DocFiles ?? Array.Empty<string>())
            {
                var v = await http.LoadDocumentation(doc);
                if (!string.IsNullOrEmpty(v))
                    _docFiles.Add(doc, v);
            }
        }
        catch { }
    }
}
