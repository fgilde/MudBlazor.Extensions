@using Microsoft.AspNetCore.Components.Rendering
@using MudBlazor.Extensions.Helper
@using MainSample.WebAssembly.Utils
@using MudBlazor.Extensions.Attribute
@using MudBlazor.Extensions.Components.ObjectEdit.Options
@using MudBlazor.Extensions.Core
@using MudBlazor.Extensions.Options
@inherits MudExObjectEdit<T>
@typeparam T

@if (rendered)
{
    @Inherited()
}
else
{
    <MudProgressCircular Style="margin-top: 70%; margin-left: 50%;" Color="Color.Primary" Indeterminate="true" />
}


@code {

    [Inject]
    IDialogService dialogService { get; set; }

    [Inject] private IJsApiService JsApiService { get; set; }

    private bool rendered;
    protected RenderFragment Inherited() => builder => base.BuildRenderTree(builder);

    protected override Task OnInitializedAsync()
    {
        ToolBarContent = RenderShowCodeButton();
        StickyToolbar = true;
        ToolbarColor = Color.Surface;
        StickyToolbarTop = "-8px";
        StoreAndReadValueFromUrl = true;

        return base.OnInitializedAsync();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (!rendered)
        {
            rendered = true;
            Task.Delay(500).ContinueWith(_ => InvokeAsync(StateHasChanged));
        }
    }


    protected override ObjectEditMeta<T> ConfigureMetaBase(ObjectEditMeta<T> meta)
    {
        meta.IgnoreAllObsoleteFields();
        meta.GroupByCategoryAttribute();
        meta.Properties<string>().Where(p => p?.Value?.ToString()?.StartsWith("<g") == true || p?.Value?.ToString()?.StartsWith("<path") == true)
        .RenderWith<MudExIconPicker, string, string>(edit => edit.Value);
        return base.ConfigureMetaBase(meta);
    }


    RenderFragment RenderShowCodeButton()
    {
        return
    @<div>
        <MudButton StartIcon="@Icons.Material.Filled.Code" OnClick="@ShowCode">Show Markup</MudButton>
    </div>;
    }

    private async Task ShowCode()
    {
        //await dialogService.ShowInformationAsync("Code", ComponentRenderHelper.GenerateBlazorMarkupFromInstance(Value));
        await dialogService.ShowComponentInDialogAsync<DemoMarkdown>("Markup Code for using " + typeof(T).Name.Split('`').First(), "Notice: This is generated and maybe not 100% correct",
            md =>
            {
                md.Value = CodeView.CodeAsMarkup(CodeView.GenerateBlazorMarkupFromInstance(Value));
            },
            dialog =>
            {
                dialog.Icon = Icons.Material.Filled.Code;
                dialog.Buttons = MudExDialogResultAction.Ok();

            }, new DialogOptionsEx()
                {
                    DialogAppearance = MudExAppearance.FromCss(MudExCss.Classes.Dialog.Glass),
                    DragMode = MudDialogDragMode.Simple,
                    CloseButton = true,
                    Resizeable = true,
                });
    }

}
@code {
    private Action<ObjectEditMeta<T>> _metaConfiguration;
}
