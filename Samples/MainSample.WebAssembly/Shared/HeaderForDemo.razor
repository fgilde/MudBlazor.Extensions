@using System.Reflection;
@using MudBlazor.Extensions.Attribute
@using MudBlazor.Extensions.Helper

<div class="doc-header">
    
    <PageHeader>@(DemoAttribute?.Name ?? Type.Name)</PageHeader>

    <MudAlert>@Documentation</MudAlert>
    @if (DemoAttribute != null)
    {
        @foreach (var info in DemoAttribute?.RelatedComponents?.Select(t => new {Type = t, BetaInfos = t.GetCustomAttributes<BetaAttribute>()}).Where(arg => arg?.BetaInfos?.Any() == true)!)
        {
            <MudAlert Severity="Severity.Warning">@($"{Api.GetTypeName(info.Type)} - {string.Join("<br/>", info.BetaInfos.Select(b => b.Message))}")</MudAlert>
        }
@*        @foreach (var info in DemoAttribute?.RelatedComponents?.Select(t => new { Type = t, ObsoleteAttributes = t.GetCustomAttributes<ObsoleteAttribute>() }).Where(arg => arg?.ObsoleteAttributes?.Any() == true)!)
        {
            <MudAlert Severity="Severity.Warning">@($"{Api.GetTypeName(info.Type)} is obsolete - {string.Join("<br/>", info.ObsoleteAttributes.Select(b => b.Message))}")</MudAlert>
        }*@
    }
</div>


@code {

    [Parameter]
    public DemoAttribute? DemoAttribute { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(DemoAttribute?.Documentation))
        {
            doc = await MudExResource.GetSummaryDocumentationAsync(DemoAttribute?.RelatedComponents?.FirstOrDefault());
        }
        
        await base.OnInitializedAsync();
    }

    private string doc;
    public string? Documentation => DemoAttribute?.Documentation ?? doc;

    [Parameter]
    public Type Type
    {
        get => _type;
        set
        {
            _type = value;
            DemoAttribute ??= value.GetCustomAttribute<DemoAttribute>();
        }
    }
    
    private Type _type;
}
