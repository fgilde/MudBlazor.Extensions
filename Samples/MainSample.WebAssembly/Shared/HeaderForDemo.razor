@using System.Reflection;
@using Microsoft.Extensions.Localization
@using MudBlazor.Extensions.Api
@using MudBlazor.Extensions.Attribute
@using MudBlazor.Extensions.Helper
@inject IStringLocalizer<HeaderForDemo> L
<div class="doc-header">
    
    <PageHeader>@L[(DemoAttribute?.Name ?? Type.Name)]</PageHeader>
    <MudAlert>@(Documentation != null ? L[Documentation] : "Documentation")</MudAlert>
    @if (DemoAttribute != null)
    {
        @foreach (var info in DemoAttribute?.RelatedComponents?.Select(t => new {Type = t, BetaInfos = t.GetCustomAttributes<BetaAttribute>()}).Where(arg => arg?.BetaInfos?.Any() == true)!)
        {
            <MudAlert Severity="Severity.Warning">@($"{ApiMemberInfo.GetGenericFriendlyTypeName(info.Type)} - {string.Join("<br/>", info.BetaInfos.Select(b => L[b.Message]))}")</MudAlert>
        }
        @foreach (var info in DemoAttribute?.RelatedComponents?.Select(t => new { Type = t, ObsoleteAttributes = t.GetCustomAttributes<ObsoleteAttribute>() }).Where(arg => arg?.ObsoleteAttributes?.Any() == true)!)
        {
            <MudAlert Severity="Severity.Warning">@($"{ApiMemberInfo.GetGenericFriendlyTypeName(info.Type)} is obsolete - {string.Join("<br/>", info.ObsoleteAttributes.Where(s => !string.IsNullOrEmpty(s.Message)).Select(b => L[b.Message]))}")</MudAlert>
        }
    }
</div>


@code {

    [Parameter]
    public DemoAttribute? DemoAttribute { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(DemoAttribute?.Documentation))
        {
            doc = await MudExResource.GetSummaryDocumentationAsync(DemoAttribute?.RelatedComponents?.FirstOrDefault());
        }
        if (MainLayout.Instance != null)
            MainLayout.Instance.LanguageChanged += (_, _) => InvokeAsync(StateHasChanged);
        await base.OnInitializedAsync();
    }

    private string doc;
    public string? Documentation => DemoAttribute?.Documentation ?? doc;

    [Parameter]
    public Type Type
    {
        get => _type;
        set
        {
            _type = value;
            DemoAttribute ??= value.GetCustomAttributes<DemoAttribute>()?.FirstOrDefault();
        }
    }
    
    private Type _type;
}
