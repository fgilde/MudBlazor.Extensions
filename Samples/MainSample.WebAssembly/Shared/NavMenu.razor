@using MudBlazor.Extensions.Core
@using MudBlazor.Extensions.Core.Enums
@using Nextended.Core.Extensions
<MudExTreeView SelectedItemBackgroundColor="@(SelectedNavEntry.HasChildren || ViewMode != TreeViewMode.Default ? MudExColor.Default : MudExColor.HoverBackground)"
               @bind-SelectedNode="SelectedNavEntry" 
               AllowedToSelectFunc="@HasAction" 
               ItemContentStyle="font-size:14px;" 
               FilterChipsPlacedRight="true"
               ExpandOnFilter="true"
               Parameters="@(new Dictionary<string, object>() {{nameof(ExpandBehaviour), ExpandBehaviour}})"
               FilterMode="@(ClientTheme.CurrentTheme.ShowFilterInDrawer && ViewMode != TreeViewMode.Breadcrumb ? PropertyFilterMode.AlwaysVisible : PropertyFilterMode.Disabled)"
               FilterBoxStyle="margin:10px;" 
               Style="margin: 0 10px;" 
               ExpandButtonDirection="LeftOrRight.Right" 
               ViewMode="@ViewMode" 
               Items="@Entries">
    <ItemContentTemplate>
        <div style="display: flex; align-items: center; width: 100%; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;" >
        @if (!context.Item.Icon.IsNullOrWhiteSpace())
        {
            <MudIcon Color="@context.Item.GetIconColor()" Icon="@context.Item.Icon" Class="ml-0 mr-2"/>
        }
        @context.TreeView.RenderItemContent(context)
        @RenderChipIf(context.Item)
        </div>
    </ItemContentTemplate>
</MudExTreeView>


@code {
    private RenderFragment RenderChipIf(NavigationEntry context)
    {
        if (context.Demo is DemoNewAttribute or DemoUpdatedAttribute)
        {
            return @<MudChip T="NavigationEntry" Style="margin-left: 8px; margin-top: 0;" Size="Size.Small" Variant="Variant.Text" Color="@context.Demo.IconColor">@(context?.Demo.GetType().Name.Replace("Demo", "").Replace("Attribute", ""))</MudChip>;
        }
        return @<p></p>;
    }
}