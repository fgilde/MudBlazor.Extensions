@using MudBlazor.Extensions.Helper;
@using MudBlazor.Extensions.Options;


<MudIconButton Class="mudex-demo-themeedit-toggle-button" Icon="@Icons.Material.Filled.Palette" Color="Color.Inherit" OnClick="@EditTheme" />
@* <MudExPopover OnBlur="@(OnThemeBlur)" Animation="AnimationType.Perspective3d" AnimationPosition="DialogPosition.TopRight"
              SelectorsForIgnoreBlur=".mudex-demo-themeedit-toggle-button" Open="@_themeEditOpen" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopRight" MaxHeight="900">
    <MudItem xs="12" Style="padding:4px;">
        <MudCard @onclick="@(() => { _themeEditOpen = false; })" Style="border-width: 3px;" Class="cursor-pointer hover-border" Outlined="true">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudCheckBox UncheckedIcon="@Icons.Material.Outlined.LightMode" CheckedIcon="@Icons.Material.Outlined.DarkMode" T="bool" ValueChanged="@(OnDarkChange)" Value="@IsDark" Color="Color.Inherit" Label="Dark Mode" />
                    <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(EditThemeFull)">Customize current</MudButton>
                    <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(EditAllThemes)">Create, Delete or Edit Themes</MudButton>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudExThemeSelect SelectedThemeChanged="@OnThemeSelected" TTheme="ClientTheme" Available="@_themes" SelectionMode="ThemeSelectionMode.ItemList"></MudExThemeSelect>
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudExPopover> *@

<MudDrawer @bind-Open="@_themeEditOpen" Anchor="Anchor.End" Elevation="1" Variant="@DrawerVariant.Temporary">
    <MudDrawerHeader>
        <MudGrid Justify="Justify.SpaceBetween" Spacing="0">
            <MudText Style="align-self: center" Typo="Typo.h6">Theming</MudText>
            <MudCheckBox UncheckedIcon="@Icons.Material.Outlined.LightMode" CheckedIcon="@Icons.Material.Outlined.DarkMode" T="bool" ValueChanged="@(OnDarkChange)" Value="@IsDark" Color="Color.Inherit" />
        </MudGrid>
    </MudDrawerHeader>
    <MudExDivider />

    <MudExThemeSelect PreviewFont="true" PreviewImageSize="@("60x40")" SelectedThemeChanged="@OnThemeSelected" TTheme="ClientTheme" Available="@_themes" SelectionMode="ThemeSelectionMode.ItemList"></MudExThemeSelect>
    <MudExDivider />
    <MudGrid Justify="Justify.FlexEnd" Spacing="0">
        <MudExIconButton ToolTip="Edit Current" OnClick="@(EditThemeFull)" Icon="@Icons.Material.Filled.Edit"></MudExIconButton>
        <MudExIconButton ToolTip="Create, Edit or delete themes" OnClick="@(EditAllThemes)" Icon="@Icons.Material.Filled.Settings"></MudExIconButton>
    </MudGrid>
</MudDrawer>

@code {
    bool _themeEditOpen = false;
    private string aniStyle => new[] { AnimationType.LightSpeed }.GetAnimationCssStyle(TimeSpan.FromMilliseconds(300), AnimationDirection.In, null, DialogPosition.TopLeft);
    private ICollection<ThemePreset<ClientTheme>> _themes;

    [Parameter] public bool IsBusy { get; set; }
    [Parameter] public EventCallback<bool> IsBusyChanged { get; set; }
    [Parameter] public bool IsDark { get; set; }
    [Parameter] public EventCallback<bool> IsDarkChanged { get; set; }
    [Parameter] public Action<bool, ClientTheme> OnThemeChanged { get; set; }

    private Task EditTheme()
    {
        _themeEditOpen = !_themeEditOpen;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private void OnThemeBlur()
    {
        _themeEditOpen = false;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (MainLayout.Instance != null)
        {
            MainLayout.Instance.ThemeChanged += async (_, _) =>
            {
                _themes = await ClientTheme.GetAllThemes(LocalStorageService);
                StateHasChanged();
            };
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            _themes = await ClientTheme.GetAllThemes(LocalStorageService);
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task EditThemeFull()
    {
        _themeEditOpen = false;
        await IsBusyChanged.InvokeAsync(IsBusy = true);
        StateHasChanged();
        ClientTheme.CurrentTheme = await OpenThemeEdit();
        await IsBusyChanged.InvokeAsync(IsBusy = false);
        OnThemeChanged?.Invoke(IsDark, ClientTheme.CurrentTheme);
        StateHasChanged();
    }

    private void OnDarkChange(bool dark)
    {
        IsDarkChanged.InvokeAsync(IsDark = dark);
        OnThemeChanged?.Invoke(IsDark, ClientTheme.CurrentTheme);
        StateHasChanged();
    }

    private Task<ClientTheme> OpenThemeEdit() => DialogService.ShowThemeEditAsync(ClientTheme.CurrentTheme);

    private void OnThemeSelected(ClientTheme obj)
    {
        MainLayout.Instance?.SetTheme(obj);
    }

    private void EditAllThemes()
    {
        _themeEditOpen = false;
        NavigationManager.NavigateTo("/theme-edit");
    }

}
