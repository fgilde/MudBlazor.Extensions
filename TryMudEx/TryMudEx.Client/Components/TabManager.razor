@using TryMudEx.Client.Enums
@using TryMudEx.Client.Models
@using System.ComponentModel
@using Try.Core


<div class="try-tabs tabs-wrapper">
    <div class="try-tabs-toolbar">
        <div class="try-tabs-toolbar-inner">
            <div class="try-tabs-toolbar-content">
                <div class="try-tabs-toolbar-wrapper" style="width: 100%">
                    @if (Tabs != null)
                    {
                        @for (var i = 0; i < Tabs.Count; i++)
                        {
                            var tab = Tabs[i];
                            var activeClass = i == ActiveIndex ? "try-tab-active" : string.Empty;
                            var currentIndex = i;

                            <div class="try-tab @activeClass mud-ripple" @onclick="@(() => ActivateTabAsync(currentIndex))" title="@tab">
                                @tab
                                @if (currentIndex != DefaultActiveIndex)
                                {
                                    <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Inherit" Size="Size.Small" OnClick="@(() => CloseTabAsync(currentIndex))" Class="ml-4 mr-n2" />
                                }
                            </div>
                        }
                    }
                    <div class="try-tab pa-0" style="@TabCreatingDisplayStyle">
                        <form @onsubmit="@CreateTabAsync" autocomplete="off" class="try-tab-form-input">
                            <input class="try-tab-input"
                            @ref="_newTabInput"
                            @bind="@_newTab"
                            @onkeydown="OnTabCreateInputKeyDown"
                            @onblur="@CreateTabAsync"
                                   placeholder=".razor OR .cs" />
                        </form>
                    </div>
                    <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Success" @onclick="@InitTabCreating" Class="rounded-0 py-1 px-2" />

                    @if (CodeFileTemplates.All().Any(f => !Tabs.Contains(f.Path)))
                    {
                        <MudMenu Dense="true">
                            <ActivatorContent>
                                <MudIconButton Icon="@Icons.Material.Filled.ArrowDropDown" Class="rounded-0 py-1 px-2" />
                            </ActivatorContent>
                            <ChildContent>
                                @foreach (var file in CodeFileTemplates.All().Where(f => !Tabs.Contains(f.Path)))
                                {
                                    <MudMenuItem OnClick="@(() => CreateFromTemplate(file))">@file.Path</MudMenuItem>
                                }
                            </ChildContent>
                        </MudMenu>
                    }
                    <MudSpacer />

                    @if (Tools != null)
                    {
                        @Tools
                    }

                    <MudTooltip Text="Change view mode">
                        <MudIconButton OnClick="@(() => _viewModePopoverOpen = !_viewModePopoverOpen)" Color="@ViewModeColor(ViewMode)" Icon="@(ViewMode.GetAttribute<IconAttribute>()?.IconName)" Class="view_mode_toggle rounded-0 py-1 px-2" />
                    </MudTooltip>

                    <MudExPopover Animation="MudBlazor.Extensions.Options.AnimationType.Scale" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter" OnBlur="@( () => _viewModePopoverOpen = false)" SelectorsForIgnoreBlur=".view_mode_toggle" @bind-Open="_viewModePopoverOpen">
                        @foreach (var mode in Enum.GetValues<CodeViewMode>())
                        {
                            <MudHidden HiddenChanged="@(hidden => CheckHidden(hidden, mode))" Breakpoint="@(mode.GetAttribute<HiddenAttribute>()?.Breakpoint ?? Breakpoint.None)" Invert="@(mode.GetAttribute<HiddenAttribute>()?.Invert ?? false)">
                                <MudTooltip Text="@(mode.GetAttribute<DescriptionAttribute>()?.Description)">
                                    <MudIconButton OnClick="@(() => { _lastModeBeforeAutoChanged = null; ViewMode = mode; _viewModePopoverOpen = false; })" Color="@ViewModeColor(mode)" Icon="@(mode.GetAttribute<IconAttribute>()?.IconName)" Class="rounded-0 py-1 px-2" />
                                </MudTooltip>
                            </MudHidden>
                        }
                    </MudExPopover>
                    <div style="width: 15px;"></div>
                </div>
            </div>
        </div>

    </div>
</div>

@code {
    bool _viewModePopoverOpen;
}