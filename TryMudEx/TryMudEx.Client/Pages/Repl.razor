@page "/snippet/{snippetId?}"
@page "/snippet/samples/{sample?}"
@page "/snippet/from/{snippetFileUrl?}"
@using TryMudEx.Client.Enums
@using MudBlazor.Extensions.Core
@using Try.Core

@layout MainLayout

<div class="try-layout">
    <MudDrawer Fixed="false" Elevation="1" Variant="@DrawerVariant.Mini" Class="try-drawer">
        <MudIconButton Title="Run (Ctrl + S)" OnClick="@CompileAsync" Disabled="@Loading" Icon="@Icons.Material.Rounded.PlayArrow" Color="@(LayoutService.IsDarkMode ? Color.Success : Color.Inherit)" />
        <MudTooltip Text="@(LayoutService.IsDarkMode ? "Switch to Light Theme" : "Switch to Dark Theme")" Delay="800" Arrow="true" Placement="Placement.Right" Color="Color.Dark">
            <MudIconButton OnClick="@UpdateTheme" Icon="@(LayoutService.IsDarkMode ? @Icons.Material.Rounded.LightMode : @Icons.Material.Outlined.DarkMode)" Color="@(LayoutService.IsDarkMode ? Color.Warning : Color.Inherit)" />
        </MudTooltip>
        <MudExDivider Style="flex-grow: 0;" UseBorder="true" Color="MudExColor.Primary" />
        <MudTooltip Text="Save or Share" Delay="800" Arrow="true" Placement="Placement.Right" Color="Color.Dark">
            <SaveSnippetPopup @bind-Visible="SaveSnippetPopupVisible" CodeFiles="@CodeFiles.Values" UpdateActiveCodeFileContentAction="UpdateActiveCodeFileContent" />
            <MudIconButton OnClick="ShowSaveSnippetPopup" Icon="@Icons.Material.Outlined.Save" Color="@(LayoutService.IsDarkMode ? Color.Info : Color.Inherit)" />
        </MudTooltip>
        <MudTooltip Text="Download" Delay="800" Arrow="true" Placement="Placement.Right" Color="Color.Dark">
            <MudIconButton OnClick="Download" Icon="@Icons.Material.Outlined.Download" Color="@(LayoutService.IsDarkMode ? Color.Info : Color.Inherit)" />
        </MudTooltip>
        <MudTooltip Text="Upload" Delay="800" Arrow="true" Placement="Placement.Right" Color="Color.Dark">
            <MudIconButton OnClick="Upload" Icon="@Icons.Material.Outlined.UploadFile" Color="@(LayoutService.IsDarkMode ? Color.Info : Color.Inherit)" />
        </MudTooltip>


        @if (_samples?.Any() == true)
        {
            <MudExDivider Style="flex-grow: 0;" UseBorder="true" Color="MudExColor.Primary" />
            <MudTooltip Text="Show samples" Delay="800" Arrow="true" Placement="Placement.Right" Color="Color.Dark">
                <MudIconButton OnClick="@ShowSamples" Icon="@Icons.Material.Outlined.Folder" Color="@(LayoutService.IsDarkMode ? Color.Primary : Color.Inherit)" />
            </MudTooltip>
        }


        <MudSpacer />
        <div class="d-flex justify-center">
            <div class="brand" style="margin-bottom: 35px;"><MudExGradientText Typo="Typo.h5">MudEx </MudExGradientText></div>
        </div>
    </MudDrawer>
    <div class="try-editor">
        <MudOverlay Visible="Loading" Absolute="true" DarkBackground="true">
            <MudText Typo="Typo.h4" Class="white-text"> @LoaderText</MudText>
        </MudOverlay>

        @if (Mode != CodeViewMode.Window)
        {
            <MudExSplitPanel Splittable="true" IsCollapsible="false" Reverse="@(Mode == CodeViewMode.DockedTop || Mode == CodeViewMode.DockedLeft)" ColumnLayout="@(Mode == CodeViewMode.DockedRight || Mode == CodeViewMode.DockedLeft)">
                <Left>
                    <MudExSplitPanelItem Class="mt-3" Style="@($"overflow-y:hidden; width: 100%; min-width: {MinWidthLeft}; height:auto; min-height: {MinHeightLeft};")">
                        @RenderEditor()
                    </MudExSplitPanelItem>
                </Left>
                <Right>
                    <MudExSplitPanelItem Class="mt-3" Style="@($"overflow-y:hidden; min-width: {MinWidthRight}; min-height: {MinHeightRight}; width: 65%;")">
                        @RenderIFrame()
                    </MudExSplitPanelItem>
                </Right>
            </MudExSplitPanel>
        }
        else
        {
            @RenderEditor()
            <MudExDialog Class="compile-result-dlg full-height" ContentClass="full-height" @bind-Visible="_compiledSuccessfully" OptionsEx="@GetResultDialogOptions()">
                <TitleContent>
                    <MudText Typo="Typo.h6">
                        <MudIcon Color="Color.Success" Icon="@Icons.Material.Filled.PlayArrow" Class="mr-3" /> Compilation Result
                    </MudText>
                </TitleContent>
                <DialogContent>
                    @RenderIFrame()
                </DialogContent>
            </MudExDialog>
        }

    </div>
    <MudAppBar Bottom="true" Fixed="false" Color="@GetBottomAppBarColor()" Elevation="0" Class="try-errorlist repl-navbar">
        <div class="try-errorlist-button d-flex align-center" @onclick="@ToggleDiagnostics">
            <MudIcon Icon="@Icons.Material.Outlined.ErrorOutline" />
            <MudText>@ErrorsCount</MudText>
            <MudIcon Icon="@Icons.Material.Outlined.WarningAmber" />
            <MudText>@WarningsCount</MudText>
            @if (ErrorsCount != 0 || WarningsCount != 0)
            {
                <MudIcon Icon="@(ShowDiagnostics ? $"{Icons.Material.Outlined.ExpandMore}" : $"{Icons.Material.Outlined.ExpandLess}")" />
            }
        </div>
        <MudSpacer />
        <MudButton DropShadow="false" Ripple="false" OnClick="@ReloadIframe">Reload</MudButton>
        <MudDivider Vertical="true" Class="mr-1" />
        @foreach (var package in _installedPackages.Take(_maxPackagesInStatusBar))
        {
            <MudText Typo="Typo.body2" Class="mr-3 try-mudblazor-version">
                <a href="@package.ProjectUrl" target="_blank">@TrimmedPackageText(package)</a>
            </MudText>
        }
        @if (_installedPackages.Length > _maxPackagesInStatusBar)
        {
            <MudMenu Style="align-self: end;" MaxHeight="400" Dense="true">
                <ActivatorContent>
                    <MudIconButton Style="transform: scale(.8);" Class="rounded-0 py-0 px-2" Icon="@Icons.Material.Filled.MoreHoriz"></MudIconButton>
                </ActivatorContent>
                <ChildContent>
                    @foreach (var package in _installedPackages)
                    {
                        <MudText Typo="Typo.body2" Class="py-1 px-1 mb-1">
                            <a href="@package.ProjectUrl" target="_blank">@TrimmedPackageText(package, 70)</a>
                        </MudText>
                    }
                </ChildContent>
            </MudMenu>

        }

        <MudTooltip Text="Manage Nuget packages" Placement="Placement.Left">
            <MudIconButton Style="transform: scale(.8);" Icon="@MudExIcons.Custom.Brands.Nuget" Class="rounded-0 py-0 px-0" OnClick="@(() => EditPackageReferences(true))"></MudIconButton>
        </MudTooltip>

    </MudAppBar>
</div>
@code {
    int _maxPackagesInStatusBar = 4;
    public Color GetBottomAppBarColor() => ErrorsCount != 0 ? Color.Error : WarningsCount != 0 ? Color.Warning : Color.Inherit;

    protected RenderFragment RenderIFrame()
    {
        return @<iframe class="mb-3 pr-5" style="max-height:97%" id="user-page-window" src="/user-page"></iframe>;
    }
    protected RenderFragment RenderEditor()
    {
        return @<div style="height: 100%; width: 100%">
        <TabManager @bind-ViewMode="Mode" @bind-ActiveIndex="_activeTabIndex" Tabs="@CodeFileNames" OnTabActivate="@HandleTabActivate" OnTemplateCreate="@HandleCreateFromTemplate" OnTabClose="@HandleTabClose" OnTabCreate="@HandleTabCreate">
            <Tools>
                <MudTooltip Text="Manage Nuget packages">
                    <MudIconButton Icon="@MudExIcons.Custom.Brands.ColorFull.Nuget" Class="view_mode_toggle rounded-0 py-1 px-2" OnClick="@(() => EditPackageReferences(Mode == CodeViewMode.DockedTop))"></MudIconButton>
                </MudTooltip>
            </Tools>
        </TabManager>
        <CodeEditor @ref="@CodeEditorComponent" Theme="@(LayoutService.IsDarkMode ? "vs-dark" : "default")" Code="@CodeEditorContent" CodeFileType="@CodeFileType" />
        <ErrorList OnDiagnosticClick="OpenDiagnostic" @bind-Show="@ShowDiagnostics" Diagnostics="@Diagnostics" />
    </div>;
    }

    private string TrimmedPackageText(NugetPackage package, int maxChars = 35)
    {
        var text = $"{package.Id} {package.Version}";

        if (text.Length > maxChars)
        {
            return text.Substring(0, maxChars - 3) + "...";
        }

        return text;
    }

}

